
STM32TFG1-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d518  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  0800d6a8  0800d6a8  0001d6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e370  0800e370  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800e370  0800e370  0001e370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e378  0800e378  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e378  0800e378  0001e378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e37c  0800e37c  0001e37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800e380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003234  20000074  0800e3f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032a8  0800e3f4  000232a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030896  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d08  00000000  00000000  0005093a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002880  00000000  00000000  00056648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002638  00000000  00000000  00058ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008a38  00000000  00000000  0005b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eb4f  00000000  00000000  00063f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cdc6  00000000  00000000  00092a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019f84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba6c  00000000  00000000  0019f8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d690 	.word	0x0800d690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800d690 	.word	0x0800d690

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
#include "SerialTask.h"


PUTCHAR_PROTOTYPE {
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	//xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY);
	while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 30000)) {
 800058c:	bf00      	nop
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f247 5330 	movw	r3, #30000	; 0x7530
 8000594:	2201      	movs	r2, #1
 8000596:	480b      	ldr	r0, [pc, #44]	; (80005c4 <__io_putchar+0x40>)
 8000598:	f005 fe7c 	bl	8006294 <HAL_UART_Transmit>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f5      	bne.n	800058e <__io_putchar+0xa>
		;
	}
	while (HAL_OK != HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 30000)) {
 80005a2:	bf00      	nop
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f247 5330 	movw	r3, #30000	; 0x7530
 80005aa:	2201      	movs	r2, #1
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <__io_putchar+0x44>)
 80005ae:	f005 fe71 	bl	8006294 <HAL_UART_Transmit>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1f5      	bne.n	80005a4 <__io_putchar+0x20>
			;
		}
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1);
	return ch;
 80005b8:	687b      	ldr	r3, [r7, #4]

}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000240 	.word	0x20000240
 80005c8:	200001bc 	.word	0x200001bc

080005cc <CreateSerialObjects>:
		//vTaskDelay(pMov.duration * 100);
		vTaskDelay(50);
	}
}

void CreateSerialObjects() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	//Liberamos el semaforo
	xSemaphoreGive(xSemaphoreSerialHandle);
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <CreateSerialObjects+0x18>)
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	f009 f9b9 	bl	8009950 <xQueueGenericSend>

	//Creamos una cola de 16 elementos en la que cada elemento tiene 1 byte
	//xQueue = xQueueCreate(16, 1);
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200006d4 	.word	0x200006d4

080005e8 <CreateSerialTask>:

void CreateSerialTask() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af02      	add	r7, sp, #8
	xTaskCreate(TareaWebServer, "TareaWebServer", 256, NULL, 1, NULL);
 80005ee:	2300      	movs	r3, #0
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005fc:	4903      	ldr	r1, [pc, #12]	; (800060c <CreateSerialTask+0x24>)
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <CreateSerialTask+0x28>)
 8000600:	f009 fe39 	bl	800a276 <xTaskCreate>
	//xTaskCreate(serialTxTask, "serialTxTask", 256, NULL, 1,
	//NULL);
	//xTaskCreate(serialRxTask, "serialRxTask", 256, NULL, 1,
	//NULL);
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	0800d6a8 	.word	0x0800d6a8
 8000610:	08000639 	.word	0x08000639

08000614 <__io_getchar>:

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

int __io_getchar(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]

	//while(HAL_OK != HAL_UART_Receive(&huart1, &ch, 1, 30000))
	//{
	//	;
	//}
	HAL_UART_Receive(&huart1, &ch, 1, 0);
 800061e:	1df9      	adds	r1, r7, #7
 8000620:	2300      	movs	r3, #0
 8000622:	2201      	movs	r2, #1
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <__io_getchar+0x20>)
 8000626:	f005 fec9 	bl	80063bc <HAL_UART_Receive>

	return ch;
 800062a:	79fb      	ldrb	r3, [r7, #7]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000240 	.word	0x20000240

08000638 <TareaWebServer>:
xTaskHandle serialRxTaskHandle;
xTaskHandle serialTxTaskHandle;

int wifi_server(void);

void TareaWebServer(void *pArg) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	printf("HOLA MUNDO");
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <TareaWebServer+0x1c>)
 8000642:	f00b fe9d 	bl	800c380 <iprintf>
	wifi_server();
 8000646:	f001 f89f 	bl	8001788 <wifi_server>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	0800d6b8 	.word	0x0800d6b8

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f001 fbbd 	bl	8001dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f840 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fa0a 	bl	8000a7c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000668:	f000 f89e 	bl	80007a8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800066c:	f000 f8d4 	bl	8000818 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000670:	f000 f912 	bl	8000898 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000674:	f000 f936 	bl	80008e4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000678:	f000 f9a2 	bl	80009c0 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800067c:	f000 f9d0 	bl	8000a20 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000680:	f000 f96e 	bl	8000960 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000684:	f008 fce0 	bl	8009048 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreSerial */
  xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <main+0x70>)
 800068a:	2101      	movs	r1, #1
 800068c:	2001      	movs	r0, #1
 800068e:	f008 fdd2 	bl	8009236 <osSemaphoreNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <main+0x74>)
 8000696:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  CreateSerialObjects();
 8000698:	f7ff ff98 	bl	80005cc <CreateSerialObjects>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of instructionQueue */
  instructionQueueHandle = osMessageQueueNew (100, sizeof(MovementInstruction_t), &instructionQueue_attributes);
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <main+0x78>)
 800069e:	2102      	movs	r1, #2
 80006a0:	2064      	movs	r0, #100	; 0x64
 80006a2:	f008 fe51 	bl	8009348 <osMessageQueueNew>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <main+0x7c>)
 80006aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ac:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <main+0x80>)
 80006ae:	2100      	movs	r1, #0
 80006b0:	480a      	ldr	r0, [pc, #40]	; (80006dc <main+0x84>)
 80006b2:	f008 fd13 	bl	80090dc <osThreadNew>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <main+0x88>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  CreateSerialTask();
 80006bc:	f7ff ff94 	bl	80005e8 <CreateSerialTask>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006c0:	f008 fce6 	bl	8009090 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x6c>
 80006c6:	bf00      	nop
 80006c8:	0800e1d0 	.word	0x0800e1d0
 80006cc:	200006d4 	.word	0x200006d4
 80006d0:	0800e1b8 	.word	0x0800e1b8
 80006d4:	200006d0 	.word	0x200006d0
 80006d8:	0800e194 	.word	0x0800e194
 80006dc:	08000dc1 	.word	0x08000dc1
 80006e0:	200006cc 	.word	0x200006cc

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b096      	sub	sp, #88	; 0x58
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2244      	movs	r2, #68	; 0x44
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00b fd5c 	bl	800c1b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	463b      	mov	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000706:	f44f 7000 	mov.w	r0, #512	; 0x200
 800070a:	f002 fb65 	bl	8002dd8 <HAL_PWREx_ControlVoltageScaling>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000714:	f000 fb6e 	bl	8000df4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000718:	f002 fb40 	bl	8002d9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <SystemClock_Config+0xc0>)
 800071e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000722:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <SystemClock_Config+0xc0>)
 8000724:	f023 0318 	bic.w	r3, r3, #24
 8000728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800072c:	2314      	movs	r3, #20
 800072e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800073c:	2360      	movs	r3, #96	; 0x60
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000744:	2301      	movs	r3, #1
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800074c:	2328      	movs	r3, #40	; 0x28
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000750:	2307      	movs	r3, #7
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fc5b 	bl	800301c <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800076c:	f000 fb42 	bl	8000df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2303      	movs	r3, #3
 8000776:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	2104      	movs	r1, #4
 8000788:	4618      	mov	r0, r3
 800078a:	f003 f82f 	bl	80037ec <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000794:	f000 fb2e 	bl	8000df4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000798:	f003 fd4a 	bl	8004230 <HAL_RCCEx_EnableMSIPLLMode>
}
 800079c:	bf00      	nop
 800079e:	3758      	adds	r7, #88	; 0x58
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007ae:	4a19      	ldr	r2, [pc, #100]	; (8000814 <MX_DFSDM1_Init+0x6c>)
 80007b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_DFSDM1_Init+0x68>)
 80007fe:	f001 fc2b 	bl	8002058 <HAL_DFSDM_ChannelInit>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000808:	f000 faf4 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000090 	.word	0x20000090
 8000814:	40016020 	.word	0x40016020

08000818 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_I2C2_Init+0x74>)
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_I2C2_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_I2C2_Init+0x74>)
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <MX_I2C2_Init+0x7c>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_I2C2_Init+0x74>)
 8000830:	2201      	movs	r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_I2C2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_I2C2_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_I2C2_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000852:	480e      	ldr	r0, [pc, #56]	; (800088c <MX_I2C2_Init+0x74>)
 8000854:	f002 f834 	bl	80028c0 <HAL_I2C_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800085e:	f000 fac9 	bl	8000df4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_I2C2_Init+0x74>)
 8000866:	f002 f8ba 	bl	80029de <HAL_I2CEx_ConfigAnalogFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000870:	f000 fac0 	bl	8000df4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000874:	2100      	movs	r1, #0
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_I2C2_Init+0x74>)
 8000878:	f002 f8fc 	bl	8002a74 <HAL_I2CEx_ConfigDigitalFilter>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 fab7 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000c8 	.word	0x200000c8
 8000890:	40005800 	.word	0x40005800
 8000894:	10909cec 	.word	0x10909cec

08000898 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_QUADSPI_Init+0x44>)
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <MX_QUADSPI_Init+0x48>)
 80008a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_QUADSPI_Init+0x44>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_QUADSPI_Init+0x44>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_QUADSPI_Init+0x44>)
 80008b0:	2210      	movs	r2, #16
 80008b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_QUADSPI_Init+0x44>)
 80008b6:	2217      	movs	r2, #23
 80008b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_QUADSPI_Init+0x44>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_QUADSPI_Init+0x44>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_QUADSPI_Init+0x44>)
 80008c8:	f002 faec 	bl	8002ea4 <HAL_QSPI_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80008d2:	f000 fa8f 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000114 	.word	0x20000114
 80008e0:	a0001000 	.word	0xa0001000

080008e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_SPI3_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <MX_SPI3_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_SPI3_Init+0x74>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI3_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI3_Init+0x74>)
 80008fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000902:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI3_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_SPI3_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI3_Init+0x74>)
 8000912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000916:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI3_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SPI3_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI3_Init+0x74>)
 8000932:	2207      	movs	r2, #7
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_SPI3_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI3_Init+0x74>)
 800093e:	2208      	movs	r2, #8
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_SPI3_Init+0x74>)
 8000944:	f003 fe56 	bl	80045f4 <HAL_SPI_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800094e:	f000 fa51 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000158 	.word	0x20000158
 800095c:	40003c00 	.word	0x40003c00

08000960 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_UART4_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	; (80009bc <MX_UART4_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <MX_UART4_Init+0x58>)
 800096c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000970:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_UART4_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_UART4_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_UART4_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_UART4_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_UART4_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_UART4_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_UART4_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_UART4_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_UART4_Init+0x58>)
 80009a4:	f005 fc28 	bl	80061f8 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009ae:	f000 fa21 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001bc 	.word	0x200001bc
 80009bc:	40004c00 	.word	0x40004c00

080009c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_USART1_UART_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART1_UART_Init+0x58>)
 8000a04:	f005 fbf8 	bl	80061f8 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 f9f1 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000240 	.word	0x20000240
 8000a1c:	40013800 	.word	0x40013800

08000a20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2206      	movs	r2, #6
 8000a30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a64:	f002 f852 	bl	8002b0c <HAL_PCD_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a6e:	f000 f9c1 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200002c4 	.word	0x200002c4

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4bbc      	ldr	r3, [pc, #752]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4abb      	ldr	r2, [pc, #748]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4bb9      	ldr	r3, [pc, #740]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4bb6      	ldr	r3, [pc, #728]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4ab5      	ldr	r2, [pc, #724]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4bb3      	ldr	r3, [pc, #716]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4bb0      	ldr	r3, [pc, #704]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4aaf      	ldr	r2, [pc, #700]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4bad      	ldr	r3, [pc, #692]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4baa      	ldr	r3, [pc, #680]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4aa9      	ldr	r2, [pc, #676]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4ba7      	ldr	r3, [pc, #668]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	4ba4      	ldr	r3, [pc, #656]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	4aa3      	ldr	r2, [pc, #652]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afe:	4ba1      	ldr	r3, [pc, #644]	; (8000d84 <MX_GPIO_Init+0x308>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b10:	489d      	ldr	r0, [pc, #628]	; (8000d88 <MX_GPIO_Init+0x30c>)
 8000b12:	f001 fea5 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f248 1104 	movw	r1, #33028	; 0x8104
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f001 fe9e 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b24:	2200      	movs	r2, #0
 8000b26:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b2a:	4898      	ldr	r0, [pc, #608]	; (8000d8c <MX_GPIO_Init+0x310>)
 8000b2c:	f001 fe98 	bl	8002860 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b36:	4896      	ldr	r0, [pc, #600]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b38:	f001 fe92 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b42:	4893      	ldr	r0, [pc, #588]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000b44:	f001 fe8c 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b4e:	4891      	ldr	r0, [pc, #580]	; (8000d94 <MX_GPIO_Init+0x318>)
 8000b50:	f001 fe86 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2120      	movs	r1, #32
 8000b58:	488c      	ldr	r0, [pc, #560]	; (8000d8c <MX_GPIO_Init+0x310>)
 8000b5a:	f001 fe81 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2101      	movs	r1, #1
 8000b62:	4889      	ldr	r0, [pc, #548]	; (8000d88 <MX_GPIO_Init+0x30c>)
 8000b64:	f001 fe7c 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b68:	f240 1315 	movw	r3, #277	; 0x115
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4881      	ldr	r0, [pc, #516]	; (8000d88 <MX_GPIO_Init+0x30c>)
 8000b82:	f001 fbb7 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b86:	236a      	movs	r3, #106	; 0x6a
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	487b      	ldr	r0, [pc, #492]	; (8000d88 <MX_GPIO_Init+0x30c>)
 8000b9c:	f001 fbaa 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4877      	ldr	r0, [pc, #476]	; (8000d94 <MX_GPIO_Init+0x318>)
 8000bb8:	f001 fb9c 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000bbc:	233f      	movs	r3, #63	; 0x3f
 8000bbe:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4871      	ldr	r0, [pc, #452]	; (8000d94 <MX_GPIO_Init+0x318>)
 8000bd0:	f001 fb90 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000bd4:	f248 1304 	movw	r3, #33028	; 0x8104
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f001 fb80 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c04:	2301      	movs	r3, #1
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f001 fb6f 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c16:	23e0      	movs	r3, #224	; 0xe0
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c26:	2305      	movs	r3, #5
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f001 fb5e 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	484f      	ldr	r0, [pc, #316]	; (8000d8c <MX_GPIO_Init+0x310>)
 8000c4e:	f001 fb51 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c52:	2302      	movs	r3, #2
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c56:	230b      	movs	r3, #11
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4849      	ldr	r0, [pc, #292]	; (8000d8c <MX_GPIO_Init+0x310>)
 8000c66:	f001 fb45 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c6a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c6e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4842      	ldr	r0, [pc, #264]	; (8000d8c <MX_GPIO_Init+0x310>)
 8000c84:	f001 fb36 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000c88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	483a      	ldr	r0, [pc, #232]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ca6:	f001 fb25 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000caa:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000cae:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4833      	ldr	r0, [pc, #204]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000cc2:	f001 fb17 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000cc6:	f243 0381 	movw	r3, #12417	; 0x3081
 8000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	482c      	ldr	r0, [pc, #176]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000ce0:	f001 fb08 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ce4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4825      	ldr	r0, [pc, #148]	; (8000d94 <MX_GPIO_Init+0x318>)
 8000cfe:	f001 faf9 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	481e      	ldr	r0, [pc, #120]	; (8000d94 <MX_GPIO_Init+0x318>)
 8000d1a:	f001 faeb 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2e:	2305      	movs	r3, #5
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4815      	ldr	r0, [pc, #84]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000d3a:	f001 fadb 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PD5 PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|GPIO_PIN_5|PMOD_UART2_RX_Pin;
 8000d3e:	2378      	movs	r3, #120	; 0x78
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_GPIO_Init+0x314>)
 8000d5a:	f001 facb 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d64:	2312      	movs	r3, #18
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d70:	2304      	movs	r3, #4
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0x310>)
 8000d7c:	f001 faba 	bl	80022f4 <HAL_GPIO_Init>
 8000d80:	e00a      	b.n	8000d98 <MX_GPIO_Init+0x31c>
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48001000 	.word	0x48001000
 8000d8c:	48000400 	.word	0x48000400
 8000d90:	48000c00 	.word	0x48000c00
 8000d94:	48000800 	.word	0x48000800

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2105      	movs	r1, #5
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f001 f931 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000da2:	2017      	movs	r0, #23
 8000da4:	f001 f94a 	bl	800203c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2105      	movs	r1, #5
 8000dac:	2028      	movs	r0, #40	; 0x28
 8000dae:	f001 f929 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db2:	2028      	movs	r0, #40	; 0x28
 8000db4:	f001 f942 	bl	800203c <HAL_NVIC_EnableIRQ>

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f008 fa19 	bl	8009200 <osDelay>
 8000dce:	e7fb      	b.n	8000dc8 <StartDefaultTask+0x8>

08000dd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000de2:	f001 f813 	bl	8001e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40000800 	.word	0x40000800

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6613      	str	r3, [r2, #96]	; 0x60
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	210f      	movs	r1, #15
 8000e3a:	f06f 0001 	mvn.w	r0, #1
 8000e3e:	f001 f8e1 	bl	8002004 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0ac      	sub	sp, #176	; 0xb0
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2288      	movs	r2, #136	; 0x88
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00b f99d 	bl	800c1b0 <memset>
  if(DFSDM1_Init == 0)
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d142      	bne.n	8000f04 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 fee4 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000e9a:	f7ff ffab 	bl	8000df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ebc:	f043 0310 	orr.w	r3, r3, #16
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0310 	and.w	r3, r3, #16
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000ece:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ee8:	2306      	movs	r3, #6
 8000eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4807      	ldr	r0, [pc, #28]	; (8000f14 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000ef6:	f001 f9fd 	bl	80022f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a02      	ldr	r2, [pc, #8]	; (8000f0c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f02:	6013      	str	r3, [r2, #0]
  }

}
 8000f04:	bf00      	nop
 8000f06:	37b0      	adds	r7, #176	; 0xb0
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200006d8 	.word	0x200006d8
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48001000 	.word	0x48001000

08000f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ac      	sub	sp, #176	; 0xb0
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2288      	movs	r2, #136	; 0x88
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00b f939 	bl	800c1b0 <memset>
  if(hi2c->Instance==I2C2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <HAL_I2C_MspInit+0xb0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d13b      	bne.n	8000fc0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 fe81 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f60:	f7ff ff48 	bl	8000df4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f84:	2312      	movs	r3, #18
 8000f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f96:	2304      	movs	r3, #4
 8000f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <HAL_I2C_MspInit+0xb8>)
 8000fa4:	f001 f9a6 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000fae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_I2C_MspInit+0xb4>)
 8000fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	37b0      	adds	r7, #176	; 0xb0
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_QSPI_MspInit+0x7c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d128      	bne.n	8001048 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8000ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6513      	str	r3, [r2, #80]	; 0x50
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8001004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_QSPI_MspInit+0x80>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001026:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800102a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001038:	230a      	movs	r3, #10
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_QSPI_MspInit+0x84>)
 8001044:	f001 f956 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	a0001000 	.word	0xa0001000
 8001054:	40021000 	.word	0x40021000
 8001058:	48001000 	.word	0x48001000

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_SPI_MspInit+0x7c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d128      	bne.n	80010d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_SPI_MspInit+0x80>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_SPI_MspInit+0x80>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_SPI_MspInit+0x80>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_SPI_MspInit+0x80>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c0:	2306      	movs	r3, #6
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_SPI_MspInit+0x84>)
 80010cc:	f001 f912 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40003c00 	.word	0x40003c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000800 	.word	0x48000800

080010e4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_SPI_MspDeInit+0x30>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10a      	bne.n	800110c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_SPI_MspDeInit+0x34>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_SPI_MspDeInit+0x34>)
 80010fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001100:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001102:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_SPI_MspDeInit+0x38>)
 8001108:	f001 fa9e 	bl	8002648 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40003c00 	.word	0x40003c00
 8001118:	40021000 	.word	0x40021000
 800111c:	48000800 	.word	0x48000800

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ae      	sub	sp, #184	; 0xb8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	2288      	movs	r2, #136	; 0x88
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f00b f835 	bl	800c1b0 <memset>
  if(huart->Instance==UART4)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a42      	ldr	r2, [pc, #264]	; (8001254 <HAL_UART_MspInit+0x134>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d13c      	bne.n	80011ca <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001150:	2308      	movs	r3, #8
 8001152:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001154:	2300      	movs	r3, #0
 8001156:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4618      	mov	r0, r3
 800115e:	f002 fd7d 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001168:	f7ff fe44 	bl	8000df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_UART_MspInit+0x138>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001170:	4a39      	ldr	r2, [pc, #228]	; (8001258 <HAL_UART_MspInit+0x138>)
 8001172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001176:	6593      	str	r3, [r2, #88]	; 0x58
 8001178:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_UART_MspInit+0x138>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_UART_MspInit+0x138>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	4a33      	ldr	r2, [pc, #204]	; (8001258 <HAL_UART_MspInit+0x138>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <HAL_UART_MspInit+0x138>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800119c:	2303      	movs	r3, #3
 800119e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011b4:	2308      	movs	r3, #8
 80011b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011be:	4619      	mov	r1, r3
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f001 f896 	bl	80022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011c8:	e03f      	b.n	800124a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <HAL_UART_MspInit+0x13c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d13a      	bne.n	800124a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011d8:	2300      	movs	r3, #0
 80011da:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fd3b 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80011ec:	f7ff fe02 	bl	8000df4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_UART_MspInit+0x138>)
 80011f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f4:	4a18      	ldr	r2, [pc, #96]	; (8001258 <HAL_UART_MspInit+0x138>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fa:	6613      	str	r3, [r2, #96]	; 0x60
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_UART_MspInit+0x138>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_UART_MspInit+0x138>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_UART_MspInit+0x138>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_UART_MspInit+0x138>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001220:	23c0      	movs	r3, #192	; 0xc0
 8001222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001238:	2307      	movs	r3, #7
 800123a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001242:	4619      	mov	r1, r3
 8001244:	4806      	ldr	r0, [pc, #24]	; (8001260 <HAL_UART_MspInit+0x140>)
 8001246:	f001 f855 	bl	80022f4 <HAL_GPIO_Init>
}
 800124a:	bf00      	nop
 800124c:	37b8      	adds	r7, #184	; 0xb8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40004c00 	.word	0x40004c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40013800 	.word	0x40013800
 8001260:	48000400 	.word	0x48000400

08001264 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0ac      	sub	sp, #176	; 0xb0
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2288      	movs	r2, #136	; 0x88
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f00a ff93 	bl	800c1b0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001292:	d17c      	bne.n	800138e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001298:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800129a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800129e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012aa:	2318      	movs	r3, #24
 80012ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012ae:	2307      	movs	r3, #7
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fcc9 	bl	8003c5c <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80012d0:	f7ff fd90 	bl	8000df4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_PCD_MspInit+0x134>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_PCD_MspInit+0x134>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_PCD_MspInit+0x134>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f000 fff3 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800130e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001328:	230a      	movs	r3, #10
 800132a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001332:	4619      	mov	r1, r3
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f000 ffdc 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_PCD_MspInit+0x134>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	4a15      	ldr	r2, [pc, #84]	; (8001398 <HAL_PCD_MspInit+0x134>)
 8001342:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_PCD_MspInit+0x134>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_PCD_MspInit+0x134>)
 8001356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d114      	bne.n	800138a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_PCD_MspInit+0x134>)
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <HAL_PCD_MspInit+0x134>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136a:	6593      	str	r3, [r2, #88]	; 0x58
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_PCD_MspInit+0x134>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001378:	f001 fd84 	bl	8002e84 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_PCD_MspInit+0x134>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <HAL_PCD_MspInit+0x134>)
 8001382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001386:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001388:	e001      	b.n	800138e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800138a:	f001 fd7b 	bl	8002e84 <HAL_PWREx_EnableVddUSB>
}
 800138e:	bf00      	nop
 8001390:	37b0      	adds	r7, #176	; 0xb0
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	201e      	movs	r0, #30
 80013b2:	f000 fe27 	bl	8002004 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013b6:	201e      	movs	r0, #30
 80013b8:	f000 fe40 	bl	800203c <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_InitTick+0x9c>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_InitTick+0x9c>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6593      	str	r3, [r2, #88]	; 0x58
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_InitTick+0x9c>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013d4:	f107 0210 	add.w	r2, r7, #16
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fbaa 	bl	8003b38 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013e4:	f002 fb7c 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 80013e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	4a13      	ldr	r2, [pc, #76]	; (800143c <HAL_InitTick+0xa0>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9b      	lsrs	r3, r3, #18
 80013f4:	3b01      	subs	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_InitTick+0xa4>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <HAL_InitTick+0xa8>)
 80013fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <HAL_InitTick+0xa4>)
 8001400:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001404:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_InitTick+0xa4>)
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_InitTick+0xa4>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_InitTick+0xa4>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <HAL_InitTick+0xa4>)
 800141a:	f004 fc1c 	bl	8005c56 <HAL_TIM_Base_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001424:	4806      	ldr	r0, [pc, #24]	; (8001440 <HAL_InitTick+0xa4>)
 8001426:	f004 fc77 	bl	8005d18 <HAL_TIM_Base_Start_IT>
 800142a:	4603      	mov	r3, r0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3730      	adds	r7, #48	; 0x30
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40021000 	.word	0x40021000
 800143c:	431bde83 	.word	0x431bde83
 8001440:	200006dc 	.word	0x200006dc
 8001444:	40000800 	.word	0x40000800

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800144c:	e7fe      	b.n	800144c <NMI_Handler+0x4>

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001478:	2020      	movs	r0, #32
 800147a:	f001 fa09 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800147e:	2040      	movs	r0, #64	; 0x40
 8001480:	f001 fa06 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001484:	2080      	movs	r0, #128	; 0x80
 8001486:	f001 fa03 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800148a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800148e:	f001 f9ff 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM4_IRQHandler+0x10>)
 800149e:	f004 fcab 	bl	8005df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200006dc 	.word	0x200006dc

080014ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80014b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014b4:	f001 f9ec 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80014b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014bc:	f001 f9e8 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80014c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014c4:	f001 f9e4 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80014c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014cc:	f001 f9e0 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80014d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014d4:	f001 f9dc 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	return 1;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_kill>:

int _kill(int pid, int sig)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014f6:	f00a fd11 	bl	800bf1c <__errno>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2216      	movs	r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <_exit>:

void _exit (int status)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffe7 	bl	80014ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800151e:	e7fe      	b.n	800151e <_exit+0x12>

08001520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e00a      	b.n	8001548 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001532:	f7ff f86f 	bl	8000614 <__io_getchar>
 8001536:	4601      	mov	r1, r0
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	60ba      	str	r2, [r7, #8]
 800153e:	b2ca      	uxtb	r2, r1
 8001540:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf0      	blt.n	8001532 <_read+0x12>
	}

return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
 800156a:	e009      	b.n	8001580 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	60ba      	str	r2, [r7, #8]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f805 	bl	8000584 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf1      	blt.n	800156c <_write+0x12>
	}
	return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_close>:

int _close(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ba:	605a      	str	r2, [r3, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_isatty>:

int _isatty(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
	return 1;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f00a fc76 	bl	800bf1c <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20018000 	.word	0x20018000
 800165c:	00000400 	.word	0x00000400
 8001660:	20000728 	.word	0x20000728
 8001664:	200032a8 	.word	0x200032a8

08001668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <wifi_start>:




static int wifi_start(void)
{
 800168c:	b5b0      	push	{r4, r5, r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8001692:	f007 fb2f 	bl	8008cf4 <WIFI_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d123      	bne.n	80016e4 <wifi_start+0x58>
  {
    LOG(("ES-WIFI Initialized.\n"));
 800169c:	4814      	ldr	r0, [pc, #80]	; (80016f0 <wifi_start+0x64>)
 800169e:	f00a fef5 	bl	800c48c <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 80016a2:	463b      	mov	r3, r7
 80016a4:	4618      	mov	r0, r3
 80016a6:	f007 fb73 	bl	8008d90 <WIFI_GetMAC_Address>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d113      	bne.n	80016d8 <wifi_start+0x4c>
    {
      LOG(("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 80016b0:	783b      	ldrb	r3, [r7, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	461c      	mov	r4, r3
 80016b8:	78bb      	ldrb	r3, [r7, #2]
 80016ba:	461d      	mov	r5, r3
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	793a      	ldrb	r2, [r7, #4]
 80016c0:	7979      	ldrb	r1, [r7, #5]
 80016c2:	9102      	str	r1, [sp, #8]
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	462b      	mov	r3, r5
 80016ca:	4622      	mov	r2, r4
 80016cc:	4601      	mov	r1, r0
 80016ce:	4809      	ldr	r0, [pc, #36]	; (80016f4 <wifi_start+0x68>)
 80016d0:	f00a fe56 	bl	800c380 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e007      	b.n	80016e8 <wifi_start+0x5c>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <wifi_start+0x6c>)
 80016da:	f00a fed7 	bl	800c48c <puts>
      return -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	e001      	b.n	80016e8 <wifi_start+0x5c>
    return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdb0      	pop	{r4, r5, r7, pc}
 80016f0:	0800d6f8 	.word	0x0800d6f8
 80016f4:	0800d710 	.word	0x0800d710
 80016f8:	0800d744 	.word	0x0800d744

080016fc <wifi_connect>:



int wifi_connect(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af02      	add	r7, sp, #8

  wifi_start();
 8001702:	f7ff ffc3 	bl	800168c <wifi_start>

  LOG(("\nConnecting to %s , %s\n",SSID,PASSWORD));
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <wifi_connect+0x70>)
 8001708:	4919      	ldr	r1, [pc, #100]	; (8001770 <wifi_connect+0x74>)
 800170a:	481a      	ldr	r0, [pc, #104]	; (8001774 <wifi_connect+0x78>)
 800170c:	f00a fe38 	bl	800c380 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8001710:	2203      	movs	r2, #3
 8001712:	4916      	ldr	r1, [pc, #88]	; (800176c <wifi_connect+0x70>)
 8001714:	4816      	ldr	r0, [pc, #88]	; (8001770 <wifi_connect+0x74>)
 8001716:	f007 fb19 	bl	8008d4c <WIFI_Connect>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d11d      	bne.n	800175c <wifi_connect+0x60>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8001720:	4815      	ldr	r0, [pc, #84]	; (8001778 <wifi_connect+0x7c>)
 8001722:	f007 fb4b 	bl	8008dbc <WIFI_GetIP_Address>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d111      	bne.n	8001750 <wifi_connect+0x54>
    {
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <wifi_connect+0x7c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <wifi_connect+0x7c>)
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	461a      	mov	r2, r3
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <wifi_connect+0x7c>)
 800173a:	789b      	ldrb	r3, [r3, #2]
 800173c:	4618      	mov	r0, r3
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <wifi_connect+0x7c>)
 8001740:	78db      	ldrb	r3, [r3, #3]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4603      	mov	r3, r0
 8001746:	480d      	ldr	r0, [pc, #52]	; (800177c <wifi_connect+0x80>)
 8001748:	f00a fe1a 	bl	800c380 <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 800174c:	2300      	movs	r3, #0
 800174e:	e00a      	b.n	8001766 <wifi_connect+0x6a>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <wifi_connect+0x84>)
 8001752:	f00a fe9b 	bl	800c48c <puts>
      return -1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e004      	b.n	8001766 <wifi_connect+0x6a>
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 800175c:	4809      	ldr	r0, [pc, #36]	; (8001784 <wifi_connect+0x88>)
 800175e:	f00a fe95 	bl	800c48c <puts>
     return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	0800d768 	.word	0x0800d768
 8001770:	0800d780 	.word	0x0800d780
 8001774:	0800d790 	.word	0x0800d790
 8001778:	20000b2c 	.word	0x20000b2c
 800177c:	0800d7a8 	.word	0x0800d7a8
 8001780:	0800d7e4 	.word	0x0800d7e4
 8001784:	0800d814 	.word	0x0800d814

08001788 <wifi_server>:

int wifi_server(void)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b087      	sub	sp, #28
 800178c:	af02      	add	r7, sp, #8
  bool StopServer = false;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 8001792:	483d      	ldr	r0, [pc, #244]	; (8001888 <wifi_server+0x100>)
 8001794:	f00a fe7a 	bl	800c48c <puts>
  if (wifi_connect()!=0) return -1;
 8001798:	f7ff ffb0 	bl	80016fc <wifi_connect>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <wifi_server+0x20>
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e06b      	b.n	8001880 <wifi_server+0xf8>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 80017a8:	2350      	movs	r3, #80	; 0x50
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4b37      	ldr	r3, [pc, #220]	; (800188c <wifi_server+0x104>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	2100      	movs	r1, #0
 80017b2:	2000      	movs	r0, #0
 80017b4:	f007 fb1e 	bl	8008df4 <WIFI_StartServer>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 80017be:	4834      	ldr	r0, [pc, #208]	; (8001890 <wifi_server+0x108>)
 80017c0:	f00a fe64 	bl	800c48c <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <wifi_server+0x10c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <wifi_server+0x10c>)
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <wifi_server+0x10c>)
 80017d2:	789b      	ldrb	r3, [r3, #2]
 80017d4:	4618      	mov	r0, r3
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <wifi_server+0x10c>)
 80017d8:	78db      	ldrb	r3, [r3, #3]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4603      	mov	r3, r0
 80017de:	482e      	ldr	r0, [pc, #184]	; (8001898 <wifi_server+0x110>)
 80017e0:	f00a fdce 	bl	800c380 <iprintf>
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;


    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 80017e4:	e00f      	b.n	8001806 <wifi_server+0x7e>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <wifi_server+0x10c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <wifi_server+0x10c>)
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <wifi_server+0x10c>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	4618      	mov	r0, r3
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <wifi_server+0x10c>)
 80017fa:	78db      	ldrb	r3, [r3, #3]
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4603      	mov	r3, r0
 8001800:	4826      	ldr	r0, [pc, #152]	; (800189c <wifi_server+0x114>)
 8001802:	f00a fdbd 	bl	800c380 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,&RemotePort))
 8001806:	1dbb      	adds	r3, r7, #6
 8001808:	f107 0208 	add.w	r2, r7, #8
 800180c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001810:	2000      	movs	r0, #0
 8001812:	f007 fb1f 	bl	8008e54 <WIFI_WaitServerConnection>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e4      	bne.n	80017e6 <wifi_server+0x5e>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 800181c:	7a3b      	ldrb	r3, [r7, #8]
 800181e:	4619      	mov	r1, r3
 8001820:	7a7b      	ldrb	r3, [r7, #9]
 8001822:	4618      	mov	r0, r3
 8001824:	7abb      	ldrb	r3, [r7, #10]
 8001826:	461c      	mov	r4, r3
 8001828:	7afb      	ldrb	r3, [r7, #11]
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	9201      	str	r2, [sp, #4]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	4602      	mov	r2, r0
 8001834:	481a      	ldr	r0, [pc, #104]	; (80018a0 <wifi_server+0x118>)
 8001836:	f00a fda3 	bl	800c380 <iprintf>

    StopServer=WebServerProcess();
 800183a:	f000 f839 	bl	80018b0 <WebServerProcess>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8001842:	2000      	movs	r0, #0
 8001844:	f007 fb4a 	bl	8008edc <WIFI_CloseServerConnection>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <wifi_server+0xd2>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 800184e:	4815      	ldr	r0, [pc, #84]	; (80018a4 <wifi_server+0x11c>)
 8001850:	f00a fe1c 	bl	800c48c <puts>
      return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	e012      	b.n	8001880 <wifi_server+0xf8>
    }
  }
  while(StopServer == false);
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1cf      	bne.n	8001806 <wifi_server+0x7e>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8001866:	2000      	movs	r0, #0
 8001868:	f007 fb4e 	bl	8008f08 <WIFI_StopServer>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <wifi_server+0xf0>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <wifi_server+0x120>)
 8001874:	f00a fe0a 	bl	800c48c <puts>
  }

  LOG(("Server is stop\n"));
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <wifi_server+0x124>)
 800187a:	f00a fe07 	bl	800c48c <puts>
  return 0;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	0800d83c 	.word	0x0800d83c
 800188c:	0800d858 	.word	0x0800d858
 8001890:	0800d85c 	.word	0x0800d85c
 8001894:	20000b2c 	.word	0x20000b2c
 8001898:	0800d878 	.word	0x0800d878
 800189c:	0800d8c8 	.word	0x0800d8c8
 80018a0:	0800d8ec 	.word	0x0800d8ec
 80018a4:	0800d910 	.word	0x0800d910
 80018a8:	0800d944 	.word	0x0800d944
 80018ac:	0800d960 	.word	0x0800d960

080018b0 <WebServerProcess>:


static bool WebServerProcess(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af02      	add	r7, sp, #8
	uint8_t LedState=1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	71fb      	strb	r3, [r7, #7]
  uint8_t temp;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 80018ba:	2300      	movs	r3, #0
 80018bc:	71bb      	strb	r3, [r7, #6]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 80018be:	1cbb      	adds	r3, r7, #2
 80018c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80018c4:	9200      	str	r2, [sp, #0]
 80018c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ca:	493f      	ldr	r1, [pc, #252]	; (80019c8 <WebServerProcess+0x118>)
 80018cc:	2000      	movs	r0, #0
 80018ce:	f007 fb55 	bl	8008f7c <WIFI_ReceiveData>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d16e      	bne.n	80019b6 <WebServerProcess+0x106>
  {
   LOG(("get %d byte from server\n",respLen));
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	4619      	mov	r1, r3
 80018dc:	483b      	ldr	r0, [pc, #236]	; (80019cc <WebServerProcess+0x11c>)
 80018de:	f00a fd4f 	bl	800c380 <iprintf>

   if( respLen > 0)
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d069      	beq.n	80019bc <WebServerProcess+0x10c>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 80018e8:	4939      	ldr	r1, [pc, #228]	; (80019d0 <WebServerProcess+0x120>)
 80018ea:	4837      	ldr	r0, [pc, #220]	; (80019c8 <WebServerProcess+0x118>)
 80018ec:	f00a fee9 	bl	800c6c2 <strstr>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d010      	beq.n	8001918 <WebServerProcess+0x68>
      {
        //temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80018f6:	797a      	ldrb	r2, [r7, #5]
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f881 	bl	8001a04 <SendWebPage>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <WebServerProcess+0x60>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 8001908:	4832      	ldr	r0, [pc, #200]	; (80019d4 <WebServerProcess+0x124>)
 800190a:	f00a fdbf 	bl	800c48c <puts>
 800190e:	e055      	b.n	80019bc <WebServerProcess+0x10c>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 8001910:	4831      	ldr	r0, [pc, #196]	; (80019d8 <WebServerProcess+0x128>)
 8001912:	f00a fdbb 	bl	800c48c <puts>
 8001916:	e051      	b.n	80019bc <WebServerProcess+0x10c>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 8001918:	4930      	ldr	r1, [pc, #192]	; (80019dc <WebServerProcess+0x12c>)
 800191a:	482b      	ldr	r0, [pc, #172]	; (80019c8 <WebServerProcess+0x118>)
 800191c:	f00a fed1 	bl	800c6c2 <strstr>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d04a      	beq.n	80019bc <WebServerProcess+0x10c>
       {
         LOG(("Post request\n"));
 8001926:	482e      	ldr	r0, [pc, #184]	; (80019e0 <WebServerProcess+0x130>)
 8001928:	f00a fdb0 	bl	800c48c <puts>

         if(strstr((char *)resp, "radio"))
 800192c:	492d      	ldr	r1, [pc, #180]	; (80019e4 <WebServerProcess+0x134>)
 800192e:	4826      	ldr	r0, [pc, #152]	; (80019c8 <WebServerProcess+0x118>)
 8001930:	f00a fec7 	bl	800c6c2 <strstr>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d012      	beq.n	8001960 <WebServerProcess+0xb0>
         {
           if(strstr((char *)resp, "radio=0"))
 800193a:	492b      	ldr	r1, [pc, #172]	; (80019e8 <WebServerProcess+0x138>)
 800193c:	4822      	ldr	r0, [pc, #136]	; (80019c8 <WebServerProcess+0x118>)
 800193e:	f00a fec0 	bl	800c6c2 <strstr>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <WebServerProcess+0x9e>
           {
             LedState = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	71fb      	strb	r3, [r7, #7]
 800194c:	e008      	b.n	8001960 <WebServerProcess+0xb0>
             //EncolarLED(LedState);
           }
           else if(strstr((char *)resp, "radio=1"))
 800194e:	4927      	ldr	r1, [pc, #156]	; (80019ec <WebServerProcess+0x13c>)
 8001950:	481d      	ldr	r0, [pc, #116]	; (80019c8 <WebServerProcess+0x118>)
 8001952:	f00a feb6 	bl	800c6c2 <strstr>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <WebServerProcess+0xb0>
           {
             LedState = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	71fb      	strb	r3, [r7, #7]
             //EncolarLED(LedState);
           }
           //temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
         }
         if(strstr((char *)resp, "stop_server"))
 8001960:	4923      	ldr	r1, [pc, #140]	; (80019f0 <WebServerProcess+0x140>)
 8001962:	4819      	ldr	r0, [pc, #100]	; (80019c8 <WebServerProcess+0x118>)
 8001964:	f00a fead 	bl	800c6c2 <strstr>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d012      	beq.n	8001994 <WebServerProcess+0xe4>
         {
           if(strstr((char *)resp, "stop_server=0"))
 800196e:	4921      	ldr	r1, [pc, #132]	; (80019f4 <WebServerProcess+0x144>)
 8001970:	4815      	ldr	r0, [pc, #84]	; (80019c8 <WebServerProcess+0x118>)
 8001972:	f00a fea6 	bl	800c6c2 <strstr>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <WebServerProcess+0xd2>
           {
             stopserver = false;
 800197c:	2300      	movs	r3, #0
 800197e:	71bb      	strb	r3, [r7, #6]
 8001980:	e008      	b.n	8001994 <WebServerProcess+0xe4>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 8001982:	491d      	ldr	r1, [pc, #116]	; (80019f8 <WebServerProcess+0x148>)
 8001984:	4810      	ldr	r0, [pc, #64]	; (80019c8 <WebServerProcess+0x118>)
 8001986:	f00a fe9c 	bl	800c6c2 <strstr>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <WebServerProcess+0xe4>
           {
             stopserver = true;
 8001990:	2301      	movs	r3, #1
 8001992:	71bb      	strb	r3, [r7, #6]
           }
         }
         //temp = (int) GetSensores(); //BSP_TSENSOR_ReadTemp();
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8001994:	797a      	ldrb	r2, [r7, #5]
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f832 	bl	8001a04 <SendWebPage>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <WebServerProcess+0xfe>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 80019a6:	480b      	ldr	r0, [pc, #44]	; (80019d4 <WebServerProcess+0x124>)
 80019a8:	f00a fd70 	bl	800c48c <puts>
 80019ac:	e006      	b.n	80019bc <WebServerProcess+0x10c>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 80019ae:	4813      	ldr	r0, [pc, #76]	; (80019fc <WebServerProcess+0x14c>)
 80019b0:	f00a fd6c 	bl	800c48c <puts>
 80019b4:	e002      	b.n	80019bc <WebServerProcess+0x10c>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 80019b6:	4812      	ldr	r0, [pc, #72]	; (8001a00 <WebServerProcess+0x150>)
 80019b8:	f00a fd68 	bl	800c48c <puts>
  }
  return stopserver;
 80019bc:	79bb      	ldrb	r3, [r7, #6]

 }
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000b30 	.word	0x20000b30
 80019cc:	0800d970 	.word	0x0800d970
 80019d0:	0800d98c 	.word	0x0800d98c
 80019d4:	0800d990 	.word	0x0800d990
 80019d8:	0800d9b0 	.word	0x0800d9b0
 80019dc:	0800d9d0 	.word	0x0800d9d0
 80019e0:	0800d9d8 	.word	0x0800d9d8
 80019e4:	0800d9e8 	.word	0x0800d9e8
 80019e8:	0800d9f0 	.word	0x0800d9f0
 80019ec:	0800d9f8 	.word	0x0800d9f8
 80019f0:	0800da00 	.word	0x0800da00
 80019f4:	0800da0c 	.word	0x0800da0c
 80019f8:	0800da1c 	.word	0x0800da1c
 80019fc:	0800da2c 	.word	0x0800da2c
 8001a00:	0800da4c 	.word	0x0800da4c

08001a04 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 8001a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a06:	b093      	sub	sp, #76	; 0x4c
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	4613      	mov	r3, r2
 8001a12:	71bb      	strb	r3, [r7, #6]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8001a14:	4abc      	ldr	r2, [pc, #752]	; (8001d08 <SendWebPage+0x304>)
 8001a16:	4bbd      	ldr	r3, [pc, #756]	; (8001d0c <SendWebPage+0x308>)
 8001a18:	4614      	mov	r4, r2
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a2c:	c407      	stmia	r4!, {r0, r1, r2}
 8001a2e:	8023      	strh	r3, [r4, #0]
 8001a30:	3402      	adds	r4, #2
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 8001a36:	48b4      	ldr	r0, [pc, #720]	; (8001d08 <SendWebPage+0x304>)
 8001a38:	f7fe fbca 	bl	80001d0 <strlen>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4bb1      	ldr	r3, [pc, #708]	; (8001d08 <SendWebPage+0x304>)
 8001a42:	4413      	add	r3, r2
 8001a44:	4ab2      	ldr	r2, [pc, #712]	; (8001d10 <SendWebPage+0x30c>)
 8001a46:	461d      	mov	r5, r3
 8001a48:	4614      	mov	r4, r2
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	6028      	str	r0, [r5, #0]
 8001a4e:	6069      	str	r1, [r5, #4]
 8001a50:	60aa      	str	r2, [r5, #8]
 8001a52:	60eb      	str	r3, [r5, #12]
 8001a54:	7823      	ldrb	r3, [r4, #0]
 8001a56:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 8001a58:	48ab      	ldr	r0, [pc, #684]	; (8001d08 <SendWebPage+0x304>)
 8001a5a:	f7fe fbb9 	bl	80001d0 <strlen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4ba9      	ldr	r3, [pc, #676]	; (8001d08 <SendWebPage+0x304>)
 8001a64:	4413      	add	r3, r2
 8001a66:	4aab      	ldr	r2, [pc, #684]	; (8001d14 <SendWebPage+0x310>)
 8001a68:	4614      	mov	r4, r2
 8001a6a:	469c      	mov	ip, r3
 8001a6c:	f104 0e20 	add.w	lr, r4, #32
 8001a70:	4665      	mov	r5, ip
 8001a72:	4626      	mov	r6, r4
 8001a74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a76:	6028      	str	r0, [r5, #0]
 8001a78:	6069      	str	r1, [r5, #4]
 8001a7a:	60aa      	str	r2, [r5, #8]
 8001a7c:	60eb      	str	r3, [r5, #12]
 8001a7e:	3410      	adds	r4, #16
 8001a80:	f10c 0c10 	add.w	ip, ip, #16
 8001a84:	4574      	cmp	r4, lr
 8001a86:	d1f3      	bne.n	8001a70 <SendWebPage+0x6c>
 8001a88:	4662      	mov	r2, ip
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 8001a90:	489d      	ldr	r0, [pc, #628]	; (8001d08 <SendWebPage+0x304>)
 8001a92:	f7fe fb9d 	bl	80001d0 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b9b      	ldr	r3, [pc, #620]	; (8001d08 <SendWebPage+0x304>)
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a9e      	ldr	r2, [pc, #632]	; (8001d18 <SendWebPage+0x314>)
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	469c      	mov	ip, r3
 8001aa4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001aa8:	4665      	mov	r5, ip
 8001aaa:	4626      	mov	r6, r4
 8001aac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001aae:	6028      	str	r0, [r5, #0]
 8001ab0:	6069      	str	r1, [r5, #4]
 8001ab2:	60aa      	str	r2, [r5, #8]
 8001ab4:	60eb      	str	r3, [r5, #12]
 8001ab6:	3410      	adds	r4, #16
 8001ab8:	f10c 0c10 	add.w	ip, ip, #16
 8001abc:	4574      	cmp	r4, lr
 8001abe:	d1f3      	bne.n	8001aa8 <SendWebPage+0xa4>
 8001ac0:	4665      	mov	r5, ip
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ac6:	6028      	str	r0, [r5, #0]
 8001ac8:	6069      	str	r1, [r5, #4]
 8001aca:	60aa      	str	r2, [r5, #8]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	732b      	strb	r3, [r5, #12]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 8001ad0:	488d      	ldr	r0, [pc, #564]	; (8001d08 <SendWebPage+0x304>)
 8001ad2:	f7fe fb7d 	bl	80001d0 <strlen>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b8b      	ldr	r3, [pc, #556]	; (8001d08 <SendWebPage+0x304>)
 8001adc:	4413      	add	r3, r2
 8001ade:	4a8f      	ldr	r2, [pc, #572]	; (8001d1c <SendWebPage+0x318>)
 8001ae0:	461c      	mov	r4, r3
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ae6:	6020      	str	r0, [r4, #0]
 8001ae8:	6061      	str	r1, [r4, #4]
 8001aea:	60a2      	str	r2, [r4, #8]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8001af0:	4885      	ldr	r0, [pc, #532]	; (8001d08 <SendWebPage+0x304>)
 8001af2:	f7fe fb6d 	bl	80001d0 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b83      	ldr	r3, [pc, #524]	; (8001d08 <SendWebPage+0x304>)
 8001afc:	4413      	add	r3, r2
 8001afe:	4a88      	ldr	r2, [pc, #544]	; (8001d20 <SendWebPage+0x31c>)
 8001b00:	4614      	mov	r4, r2
 8001b02:	469c      	mov	ip, r3
 8001b04:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001b08:	4665      	mov	r5, ip
 8001b0a:	4626      	mov	r6, r4
 8001b0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b0e:	6028      	str	r0, [r5, #0]
 8001b10:	6069      	str	r1, [r5, #4]
 8001b12:	60aa      	str	r2, [r5, #8]
 8001b14:	60eb      	str	r3, [r5, #12]
 8001b16:	3410      	adds	r4, #16
 8001b18:	f10c 0c10 	add.w	ip, ip, #16
 8001b1c:	4574      	cmp	r4, lr
 8001b1e:	d1f3      	bne.n	8001b08 <SendWebPage+0x104>
  sprintf((char *)temp, "%d", temperature);
 8001b20:	79ba      	ldrb	r2, [r7, #6]
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	497f      	ldr	r1, [pc, #508]	; (8001d24 <SendWebPage+0x320>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00a fd31 	bl	800c590 <siprintf>
  strcat((char *)http, (char *)temp);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4619      	mov	r1, r3
 8001b34:	4874      	ldr	r0, [pc, #464]	; (8001d08 <SendWebPage+0x304>)
 8001b36:	f00a fd8e 	bl	800c656 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 8001b3a:	4873      	ldr	r0, [pc, #460]	; (8001d08 <SendWebPage+0x304>)
 8001b3c:	f7fe fb48 	bl	80001d0 <strlen>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b70      	ldr	r3, [pc, #448]	; (8001d08 <SendWebPage+0x304>)
 8001b46:	4413      	add	r3, r2
 8001b48:	4a77      	ldr	r2, [pc, #476]	; (8001d28 <SendWebPage+0x324>)
 8001b4a:	461d      	mov	r5, r3
 8001b4c:	4614      	mov	r4, r2
 8001b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b50:	6028      	str	r0, [r5, #0]
 8001b52:	6069      	str	r1, [r5, #4]
 8001b54:	60aa      	str	r2, [r5, #8]
 8001b56:	60eb      	str	r3, [r5, #12]
 8001b58:	7823      	ldrb	r3, [r4, #0]
 8001b5a:	742b      	strb	r3, [r5, #16]

  if (ledIsOn)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d040      	beq.n	8001be4 <SendWebPage+0x1e0>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 8001b62:	4869      	ldr	r0, [pc, #420]	; (8001d08 <SendWebPage+0x304>)
 8001b64:	f7fe fb34 	bl	80001d0 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b66      	ldr	r3, [pc, #408]	; (8001d08 <SendWebPage+0x304>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <SendWebPage+0x328>)
 8001b72:	4614      	mov	r4, r2
 8001b74:	469c      	mov	ip, r3
 8001b76:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b7a:	4665      	mov	r5, ip
 8001b7c:	4626      	mov	r6, r4
 8001b7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b80:	6028      	str	r0, [r5, #0]
 8001b82:	6069      	str	r1, [r5, #4]
 8001b84:	60aa      	str	r2, [r5, #8]
 8001b86:	60eb      	str	r3, [r5, #12]
 8001b88:	3410      	adds	r4, #16
 8001b8a:	f10c 0c10 	add.w	ip, ip, #16
 8001b8e:	4574      	cmp	r4, lr
 8001b90:	d1f3      	bne.n	8001b7a <SendWebPage+0x176>
 8001b92:	4663      	mov	r3, ip
 8001b94:	4622      	mov	r2, r4
 8001b96:	6810      	ldr	r0, [r2, #0]
 8001b98:	6018      	str	r0, [r3, #0]
 8001b9a:	8891      	ldrh	r1, [r2, #4]
 8001b9c:	7992      	ldrb	r2, [r2, #6]
 8001b9e:	8099      	strh	r1, [r3, #4]
 8001ba0:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8001ba2:	4859      	ldr	r0, [pc, #356]	; (8001d08 <SendWebPage+0x304>)
 8001ba4:	f7fe fb14 	bl	80001d0 <strlen>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <SendWebPage+0x304>)
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a5f      	ldr	r2, [pc, #380]	; (8001d30 <SendWebPage+0x32c>)
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	469c      	mov	ip, r3
 8001bb6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001bba:	4665      	mov	r5, ip
 8001bbc:	4626      	mov	r6, r4
 8001bbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bc0:	6028      	str	r0, [r5, #0]
 8001bc2:	6069      	str	r1, [r5, #4]
 8001bc4:	60aa      	str	r2, [r5, #8]
 8001bc6:	60eb      	str	r3, [r5, #12]
 8001bc8:	3410      	adds	r4, #16
 8001bca:	f10c 0c10 	add.w	ip, ip, #16
 8001bce:	4574      	cmp	r4, lr
 8001bd0:	d1f3      	bne.n	8001bba <SendWebPage+0x1b6>
 8001bd2:	4665      	mov	r5, ip
 8001bd4:	4623      	mov	r3, r4
 8001bd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001bd8:	6028      	str	r0, [r5, #0]
 8001bda:	6069      	str	r1, [r5, #4]
 8001bdc:	60aa      	str	r2, [r5, #8]
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	81ab      	strh	r3, [r5, #12]
 8001be2:	e03f      	b.n	8001c64 <SendWebPage+0x260>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8001be4:	4848      	ldr	r0, [pc, #288]	; (8001d08 <SendWebPage+0x304>)
 8001be6:	f7fe faf3 	bl	80001d0 <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <SendWebPage+0x304>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a50      	ldr	r2, [pc, #320]	; (8001d34 <SendWebPage+0x330>)
 8001bf4:	4614      	mov	r4, r2
 8001bf6:	469c      	mov	ip, r3
 8001bf8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001bfc:	4665      	mov	r5, ip
 8001bfe:	4626      	mov	r6, r4
 8001c00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c02:	6028      	str	r0, [r5, #0]
 8001c04:	6069      	str	r1, [r5, #4]
 8001c06:	60aa      	str	r2, [r5, #8]
 8001c08:	60eb      	str	r3, [r5, #12]
 8001c0a:	3410      	adds	r4, #16
 8001c0c:	f10c 0c10 	add.w	ip, ip, #16
 8001c10:	4574      	cmp	r4, lr
 8001c12:	d1f3      	bne.n	8001bfc <SendWebPage+0x1f8>
 8001c14:	4665      	mov	r5, ip
 8001c16:	4623      	mov	r3, r4
 8001c18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c1a:	6028      	str	r0, [r5, #0]
 8001c1c:	6069      	str	r1, [r5, #4]
 8001c1e:	60aa      	str	r2, [r5, #8]
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8001c24:	4838      	ldr	r0, [pc, #224]	; (8001d08 <SendWebPage+0x304>)
 8001c26:	f7fe fad3 	bl	80001d0 <strlen>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <SendWebPage+0x304>)
 8001c30:	4413      	add	r3, r2
 8001c32:	4a41      	ldr	r2, [pc, #260]	; (8001d38 <SendWebPage+0x334>)
 8001c34:	4614      	mov	r4, r2
 8001c36:	469c      	mov	ip, r3
 8001c38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c3c:	4665      	mov	r5, ip
 8001c3e:	4626      	mov	r6, r4
 8001c40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c42:	6028      	str	r0, [r5, #0]
 8001c44:	6069      	str	r1, [r5, #4]
 8001c46:	60aa      	str	r2, [r5, #8]
 8001c48:	60eb      	str	r3, [r5, #12]
 8001c4a:	3410      	adds	r4, #16
 8001c4c:	f10c 0c10 	add.w	ip, ip, #16
 8001c50:	4574      	cmp	r4, lr
 8001c52:	d1f3      	bne.n	8001c3c <SendWebPage+0x238>
 8001c54:	4663      	mov	r3, ip
 8001c56:	4622      	mov	r2, r4
 8001c58:	6810      	ldr	r0, [r2, #0]
 8001c5a:	6018      	str	r0, [r3, #0]
 8001c5c:	8891      	ldrh	r1, [r2, #4]
 8001c5e:	7992      	ldrb	r2, [r2, #6]
 8001c60:	8099      	strh	r1, [r3, #4]
 8001c62:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8001c64:	4828      	ldr	r0, [pc, #160]	; (8001d08 <SendWebPage+0x304>)
 8001c66:	f7fe fab3 	bl	80001d0 <strlen>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <SendWebPage+0x304>)
 8001c70:	4413      	add	r3, r2
 8001c72:	4a32      	ldr	r2, [pc, #200]	; (8001d3c <SendWebPage+0x338>)
 8001c74:	4614      	mov	r4, r2
 8001c76:	469c      	mov	ip, r3
 8001c78:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c7c:	4665      	mov	r5, ip
 8001c7e:	4626      	mov	r6, r4
 8001c80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c82:	6028      	str	r0, [r5, #0]
 8001c84:	6069      	str	r1, [r5, #4]
 8001c86:	60aa      	str	r2, [r5, #8]
 8001c88:	60eb      	str	r3, [r5, #12]
 8001c8a:	3410      	adds	r4, #16
 8001c8c:	f10c 0c10 	add.w	ip, ip, #16
 8001c90:	4574      	cmp	r4, lr
 8001c92:	d1f3      	bne.n	8001c7c <SendWebPage+0x278>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8001c94:	481c      	ldr	r0, [pc, #112]	; (8001d08 <SendWebPage+0x304>)
 8001c96:	f7fe fa9b 	bl	80001d0 <strlen>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <SendWebPage+0x304>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a27      	ldr	r2, [pc, #156]	; (8001d40 <SendWebPage+0x33c>)
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	6028      	str	r0, [r5, #0]
 8001cac:	6069      	str	r1, [r5, #4]
 8001cae:	60aa      	str	r2, [r5, #8]
 8001cb0:	60eb      	str	r3, [r5, #12]
 8001cb2:	8823      	ldrh	r3, [r4, #0]
 8001cb4:	78a2      	ldrb	r2, [r4, #2]
 8001cb6:	822b      	strh	r3, [r5, #16]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <SendWebPage+0x304>)
 8001cbe:	f7fe fa87 	bl	80001d0 <strlen>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 030a 	add.w	r3, r7, #10
 8001cca:	f242 7110 	movw	r1, #10000	; 0x2710
 8001cce:	9100      	str	r1, [sp, #0]
 8001cd0:	490d      	ldr	r1, [pc, #52]	; (8001d08 <SendWebPage+0x304>)
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f007 f930 	bl	8008f38 <WIFI_SendData>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8001cde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10a      	bne.n	8001cfc <SendWebPage+0x2f8>
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	461c      	mov	r4, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	; (8001d08 <SendWebPage+0x304>)
 8001cec:	f7fe fa70 	bl	80001d0 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	429c      	cmp	r4, r3
 8001cf4:	d002      	beq.n	8001cfc <SendWebPage+0x2f8>
  {
    ret = WIFI_STATUS_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 8001cfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3744      	adds	r7, #68	; 0x44
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d08:	2000072c 	.word	0x2000072c
 8001d0c:	0800da64 	.word	0x0800da64
 8001d10:	0800daa4 	.word	0x0800daa4
 8001d14:	0800dab8 	.word	0x0800dab8
 8001d18:	0800dadc 	.word	0x0800dadc
 8001d1c:	0800db1c 	.word	0x0800db1c
 8001d20:	0800db2c 	.word	0x0800db2c
 8001d24:	0800db6c 	.word	0x0800db6c
 8001d28:	0800db70 	.word	0x0800db70
 8001d2c:	0800db84 	.word	0x0800db84
 8001d30:	0800dbbc 	.word	0x0800dbbc
 8001d34:	0800dbfc 	.word	0x0800dbfc
 8001d38:	0800dc3c 	.word	0x0800dc3c
 8001d3c:	0800dc74 	.word	0x0800dc74
 8001d40:	0800dca4 	.word	0x0800dca4

08001d44 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f000 fda1 	bl	8002890 <HAL_GPIO_EXTI_IRQHandler>
 portYIELD_FROM_ISR(pdFALSE);
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d102      	bne.n	8001d68 <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8001d62:	f006 ffb7 	bl	8008cd4 <SPI_WIFI_ISR>
      break;
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8001d68:	bf00      	nop
    }
  }
  portYIELD_FROM_ISR(pdFALSE);
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <SPI3_IRQHandler>:
  * @param  None
  * @retval None
  */
extern  SPI_HandleTypeDef hspi;
void SPI3_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <SPI3_IRQHandler+0x10>)
 8001d7a:	f003 fa37 	bl	80051ec <HAL_SPI_IRQHandler>
  portYIELD_FROM_ISR(pdFALSE);
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000f5c 	.word	0x20000f5c

08001d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d8c:	f7ff fc6c 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d92:	490d      	ldr	r1, [pc, #52]	; (8001dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <LoopForever+0xe>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da8:	4c0a      	ldr	r4, [pc, #40]	; (8001dd4 <LoopForever+0x16>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f00a f9ad 	bl	800c114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dba:	f7fe fc4d 	bl	8000658 <main>

08001dbe <LoopForever>:

LoopForever:
    b LoopForever
 8001dbe:	e7fe      	b.n	8001dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001dcc:	0800e380 	.word	0x0800e380
  ldr r2, =_sbss
 8001dd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001dd4:	200032a8 	.word	0x200032a8

08001dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC1_2_IRQHandler>

08001dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 f902 	bl	8001fee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dea:	200f      	movs	r0, #15
 8001dec:	f7ff fad6 	bl	800139c <HAL_InitTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	e001      	b.n	8001e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dfc:	f7ff f800 	bl	8000e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e00:	79fb      	ldrb	r3, [r7, #7]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000f30 	.word	0x20000f30

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000f30 	.word	0x20000f30

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff ffee 	bl	8001e34 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ff4c 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002016:	f7ff ff61 	bl	8001edc <__NVIC_GetPriorityGrouping>
 800201a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	6978      	ldr	r0, [r7, #20]
 8002022:	f7ff ffb1 	bl	8001f88 <NVIC_EncodePriority>
 8002026:	4602      	mov	r2, r0
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff80 	bl	8001f34 <__NVIC_SetPriority>
}
 8002034:	bf00      	nop
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff54 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0ac      	b.n	80021c4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f8b2 	bl	80021d8 <DFSDM_GetChannelFromInstance>
 8002074:	4603      	mov	r3, r0
 8002076:	4a55      	ldr	r2, [pc, #340]	; (80021cc <HAL_DFSDM_ChannelInit+0x174>)
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e09f      	b.n	80021c4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7fe fee3 	bl	8000e50 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_DFSDM_ChannelInit+0x178>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_DFSDM_ChannelInit+0x178>)
 8002092:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002094:	4b4e      	ldr	r3, [pc, #312]	; (80021d0 <HAL_DFSDM_ChannelInit+0x178>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d125      	bne.n	80020e8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800209c:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020a6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4948      	ldr	r1, [pc, #288]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a46      	ldr	r2, [pc, #280]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020bc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80020c0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	791b      	ldrb	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d108      	bne.n	80020dc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	493f      	ldr	r1, [pc, #252]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80020dc:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3c      	ldr	r2, [pc, #240]	; (80021d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80020e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020e6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80020f6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002106:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800210c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 020f 	bic.w	r2, r2, #15
 8002124:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800214c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	3b01      	subs	r3, #1
 800215e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f002 0207 	and.w	r2, r2, #7
 8002178:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f810 	bl	80021d8 <DFSDM_GetChannelFromInstance>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4904      	ldr	r1, [pc, #16]	; (80021cc <HAL_DFSDM_ChannelInit+0x174>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000f38 	.word	0x20000f38
 80021d0:	20000f34 	.word	0x20000f34
 80021d4:	40016000 	.word	0x40016000

080021d8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <DFSDM_GetChannelFromInstance+0x7c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d102      	bne.n	80021ee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e02b      	b.n	8002246 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <DFSDM_GetChannelFromInstance+0x80>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d102      	bne.n	80021fc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	e024      	b.n	8002246 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <DFSDM_GetChannelFromInstance+0x84>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d102      	bne.n	800220a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002204:	2302      	movs	r3, #2
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e01d      	b.n	8002246 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <DFSDM_GetChannelFromInstance+0x88>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d102      	bne.n	8002218 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002212:	2304      	movs	r3, #4
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e016      	b.n	8002246 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <DFSDM_GetChannelFromInstance+0x8c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d102      	bne.n	8002226 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002220:	2305      	movs	r3, #5
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e00f      	b.n	8002246 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <DFSDM_GetChannelFromInstance+0x90>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d102      	bne.n	8002234 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800222e:	2306      	movs	r3, #6
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e008      	b.n	8002246 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a0d      	ldr	r2, [pc, #52]	; (800226c <DFSDM_GetChannelFromInstance+0x94>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d102      	bne.n	8002242 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800223c:	2307      	movs	r3, #7
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e001      	b.n	8002246 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002242:	2303      	movs	r3, #3
 8002244:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40016000 	.word	0x40016000
 8002258:	40016020 	.word	0x40016020
 800225c:	40016040 	.word	0x40016040
 8002260:	40016080 	.word	0x40016080
 8002264:	400160a0 	.word	0x400160a0
 8002268:	400160c0 	.word	0x400160c0
 800226c:	400160e0 	.word	0x400160e0

08002270 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d005      	beq.n	8002294 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2204      	movs	r2, #4
 800228c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e029      	b.n	80022e8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 020e 	bic.w	r2, r2, #14
 80022a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	f003 021c 	and.w	r2, r3, #28
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f202 	lsl.w	r2, r1, r2
 80022c6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
    }
  }
  return status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e17f      	b.n	8002604 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2101      	movs	r1, #1
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	4013      	ands	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8171 	beq.w	80025fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b01      	cmp	r3, #1
 8002326:	d005      	beq.n	8002334 <HAL_GPIO_Init+0x40>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d130      	bne.n	8002396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800236a:	2201      	movs	r2, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 0201 	and.w	r2, r3, #1
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d118      	bne.n	80023d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023a8:	2201      	movs	r2, #1
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	f003 0201 	and.w	r2, r3, #1
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d017      	beq.n	8002410 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d123      	bne.n	8002464 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	6939      	ldr	r1, [r7, #16]
 8002460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0203 	and.w	r2, r3, #3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80ac 	beq.w	80025fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	4a5e      	ldr	r2, [pc, #376]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6613      	str	r3, [r2, #96]	; 0x60
 80024b2:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <HAL_GPIO_Init+0x330>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024be:	4a5a      	ldr	r2, [pc, #360]	; (8002628 <HAL_GPIO_Init+0x334>)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	3302      	adds	r3, #2
 80024c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	220f      	movs	r2, #15
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e8:	d025      	beq.n	8002536 <HAL_GPIO_Init+0x242>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4f      	ldr	r2, [pc, #316]	; (800262c <HAL_GPIO_Init+0x338>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <HAL_GPIO_Init+0x23e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <HAL_GPIO_Init+0x33c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d019      	beq.n	800252e <HAL_GPIO_Init+0x23a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4d      	ldr	r2, [pc, #308]	; (8002634 <HAL_GPIO_Init+0x340>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x236>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <HAL_GPIO_Init+0x344>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x232>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4b      	ldr	r2, [pc, #300]	; (800263c <HAL_GPIO_Init+0x348>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x22e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4a      	ldr	r2, [pc, #296]	; (8002640 <HAL_GPIO_Init+0x34c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x22a>
 800251a:	2306      	movs	r3, #6
 800251c:	e00c      	b.n	8002538 <HAL_GPIO_Init+0x244>
 800251e:	2307      	movs	r3, #7
 8002520:	e00a      	b.n	8002538 <HAL_GPIO_Init+0x244>
 8002522:	2305      	movs	r3, #5
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x244>
 8002526:	2304      	movs	r3, #4
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x244>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x244>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x244>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x244>
 8002536:	2300      	movs	r3, #0
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002548:	4937      	ldr	r1, [pc, #220]	; (8002628 <HAL_GPIO_Init+0x334>)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002556:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_GPIO_Init+0x350>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800257a:	4a32      	ldr	r2, [pc, #200]	; (8002644 <HAL_GPIO_Init+0x350>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002580:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_GPIO_Init+0x350>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025a4:	4a27      	ldr	r2, [pc, #156]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_GPIO_Init+0x350>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	f47f ae78 	bne.w	8002304 <HAL_GPIO_Init+0x10>
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	40010000 	.word	0x40010000
 800262c:	48000400 	.word	0x48000400
 8002630:	48000800 	.word	0x48000800
 8002634:	48000c00 	.word	0x48000c00
 8002638:	48001000 	.word	0x48001000
 800263c:	48001400 	.word	0x48001400
 8002640:	48001800 	.word	0x48001800
 8002644:	40010400 	.word	0x40010400

08002648 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002656:	e0cd      	b.n	80027f4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002658:	2201      	movs	r2, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80c0 	beq.w	80027ee <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800266e:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_GPIO_DeInit+0x1c8>)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002696:	d025      	beq.n	80026e4 <HAL_GPIO_DeInit+0x9c>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a5e      	ldr	r2, [pc, #376]	; (8002814 <HAL_GPIO_DeInit+0x1cc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d01f      	beq.n	80026e0 <HAL_GPIO_DeInit+0x98>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_GPIO_DeInit+0x1d0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d019      	beq.n	80026dc <HAL_GPIO_DeInit+0x94>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_GPIO_DeInit+0x1d4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d013      	beq.n	80026d8 <HAL_GPIO_DeInit+0x90>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a5b      	ldr	r2, [pc, #364]	; (8002820 <HAL_GPIO_DeInit+0x1d8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00d      	beq.n	80026d4 <HAL_GPIO_DeInit+0x8c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a5a      	ldr	r2, [pc, #360]	; (8002824 <HAL_GPIO_DeInit+0x1dc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d007      	beq.n	80026d0 <HAL_GPIO_DeInit+0x88>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a59      	ldr	r2, [pc, #356]	; (8002828 <HAL_GPIO_DeInit+0x1e0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_GPIO_DeInit+0x84>
 80026c8:	2306      	movs	r3, #6
 80026ca:	e00c      	b.n	80026e6 <HAL_GPIO_DeInit+0x9e>
 80026cc:	2307      	movs	r3, #7
 80026ce:	e00a      	b.n	80026e6 <HAL_GPIO_DeInit+0x9e>
 80026d0:	2305      	movs	r3, #5
 80026d2:	e008      	b.n	80026e6 <HAL_GPIO_DeInit+0x9e>
 80026d4:	2304      	movs	r3, #4
 80026d6:	e006      	b.n	80026e6 <HAL_GPIO_DeInit+0x9e>
 80026d8:	2303      	movs	r3, #3
 80026da:	e004      	b.n	80026e6 <HAL_GPIO_DeInit+0x9e>
 80026dc:	2302      	movs	r3, #2
 80026de:	e002      	b.n	80026e6 <HAL_GPIO_DeInit+0x9e>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_GPIO_DeInit+0x9e>
 80026e4:	2300      	movs	r3, #0
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	f002 0203 	and.w	r2, r2, #3
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	4093      	lsls	r3, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d132      	bne.n	800275c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80026f6:	4b4d      	ldr	r3, [pc, #308]	; (800282c <HAL_GPIO_DeInit+0x1e4>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	494b      	ldr	r1, [pc, #300]	; (800282c <HAL_GPIO_DeInit+0x1e4>)
 8002700:	4013      	ands	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002704:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_GPIO_DeInit+0x1e4>)
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	4947      	ldr	r1, [pc, #284]	; (800282c <HAL_GPIO_DeInit+0x1e4>)
 800270e:	4013      	ands	r3, r2
 8002710:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <HAL_GPIO_DeInit+0x1e4>)
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	4944      	ldr	r1, [pc, #272]	; (800282c <HAL_GPIO_DeInit+0x1e4>)
 800271c:	4013      	ands	r3, r2
 800271e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002720:	4b42      	ldr	r3, [pc, #264]	; (800282c <HAL_GPIO_DeInit+0x1e4>)
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	4940      	ldr	r1, [pc, #256]	; (800282c <HAL_GPIO_DeInit+0x1e4>)
 800272a:	4013      	ands	r3, r2
 800272c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	220f      	movs	r2, #15
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800273e:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_GPIO_DeInit+0x1c8>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43da      	mvns	r2, r3
 800274e:	4830      	ldr	r0, [pc, #192]	; (8002810 <HAL_GPIO_DeInit+0x1c8>)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	400a      	ands	r2, r1
 8002756:	3302      	adds	r3, #2
 8002758:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2103      	movs	r1, #3
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	220f      	movs	r2, #15
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	08d2      	lsrs	r2, r2, #3
 8002790:	4019      	ands	r1, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3208      	adds	r2, #8
 8002796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2103      	movs	r1, #3
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	401a      	ands	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	2101      	movs	r1, #1
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2103      	movs	r1, #3
 80027ce:	fa01 f303 	lsl.w	r3, r1, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027de:	2101      	movs	r1, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f47f af2b 	bne.w	8002658 <HAL_GPIO_DeInit+0x10>
  }
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40010000 	.word	0x40010000
 8002814:	48000400 	.word	0x48000400
 8002818:	48000800 	.word	0x48000800
 800281c:	48000c00 	.word	0x48000c00
 8002820:	48001000 	.word	0x48001000
 8002824:	48001400 	.word	0x48001400
 8002828:	48001800 	.word	0x48001800
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e001      	b.n	8002852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800287c:	e002      	b.n	8002884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028a6:	4a05      	ldr	r2, [pc, #20]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fa4f 	bl	8001d52 <HAL_GPIO_EXTI_Callback>
  }
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40010400 	.word	0x40010400

080028c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e081      	b.n	80029d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fb16 	bl	8000f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002910:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002920:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e006      	b.n	8002948 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002946:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d104      	bne.n	800295a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002958:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800296c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800297c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1a      	ldr	r2, [r3, #32]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d138      	bne.n	8002a66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e032      	b.n	8002a68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2224      	movs	r2, #36	; 0x24
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d139      	bne.n	8002afe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e033      	b.n	8002b00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ac6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e000      	b.n	8002b00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
  }
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b0e:	b08f      	sub	sp, #60	; 0x3c
 8002b10:	af0a      	add	r7, sp, #40	; 0x28
 8002b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e116      	b.n	8002d4c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe fb93 	bl	8001264 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2203      	movs	r2, #3
 8002b42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 f992 	bl	8006e86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	687e      	ldr	r6, [r7, #4]
 8002b6a:	466d      	mov	r5, sp
 8002b6c:	f106 0410 	add.w	r4, r6, #16
 8002b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b80:	1d33      	adds	r3, r6, #4
 8002b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b84:	6838      	ldr	r0, [r7, #0]
 8002b86:	f004 f952 	bl	8006e2e <USB_CoreInit>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0d7      	b.n	8002d4c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 f980 	bl	8006ea8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	e04a      	b.n	8002c44 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	333d      	adds	r3, #61	; 0x3d
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	333c      	adds	r3, #60	; 0x3c
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	b298      	uxth	r0, r3
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3342      	adds	r3, #66	; 0x42
 8002bea:	4602      	mov	r2, r0
 8002bec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	333f      	adds	r3, #63	; 0x3f
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	3344      	adds	r3, #68	; 0x44
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	3348      	adds	r3, #72	; 0x48
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3350      	adds	r3, #80	; 0x50
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	3301      	adds	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3af      	bcc.n	8002bae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	e044      	b.n	8002cde <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d3b5      	bcc.n	8002c54 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	687e      	ldr	r6, [r7, #4]
 8002cf0:	466d      	mov	r5, sp
 8002cf2:	f106 0410 	add.w	r4, r6, #16
 8002cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d02:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d06:	1d33      	adds	r3, r6, #4
 8002d08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d0a:	6838      	ldr	r0, [r7, #0]
 8002d0c:	f004 f918 	bl	8006f40 <USB_DevInit>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e014      	b.n	8002d4c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f80a 	bl	8002d54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 fac0 	bl	80072ca <USB_DevDisconnect>

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	f043 0303 	orr.w	r3, r3, #3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40007000 	.word	0x40007000

08002dbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de6:	d130      	bne.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df4:	d038      	beq.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2232      	movs	r2, #50	; 0x32
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9b      	lsrs	r3, r3, #18
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e1c:	e002      	b.n	8002e24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e30:	d102      	bne.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f2      	bne.n	8002e1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e44:	d110      	bne.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e00f      	b.n	8002e6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d007      	beq.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e60:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e92:	6053      	str	r3, [r2, #4]
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40007000 	.word	0x40007000

08002ea4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7fe ffc2 	bl	8001e34 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e063      	b.n	8002f84 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe f87f 	bl	8000fd4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002ed6:	f241 3188 	movw	r1, #5000	; 0x1388
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f858 	bl	8002f90 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	021a      	lsls	r2, r3, #8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2120      	movs	r1, #32
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f850 	bl	8002fac <QSPI_WaitFlagStateUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d131      	bne.n	8002f7a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f20:	f023 0310 	bic.w	r3, r3, #16
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6852      	ldr	r2, [r2, #4]
 8002f28:	0611      	lsls	r1, r2, #24
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68d2      	ldr	r2, [r2, #12]
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <HAL_QSPI_Init+0xe8>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6912      	ldr	r2, [r2, #16]
 8002f46:	0411      	lsls	r1, r2, #16
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6952      	ldr	r2, [r2, #20]
 8002f4c:	4311      	orrs	r1, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6992      	ldr	r2, [r2, #24]
 8002f52:	4311      	orrs	r1, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002f82:	7afb      	ldrb	r3, [r7, #11]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	ffe0f8fe 	.word	0xffe0f8fe

08002f90 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002fbc:	e01a      	b.n	8002ff4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d016      	beq.n	8002ff4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7fe ff35 	bl	8001e34 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e00e      	b.n	8003012 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d1d6      	bne.n	8002fbe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e3d8      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302e:	4b97      	ldr	r3, [pc, #604]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003038:	4b94      	ldr	r3, [pc, #592]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80e4 	beq.w	8003218 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_RCC_OscConfig+0x4a>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b0c      	cmp	r3, #12
 800305a:	f040 808b 	bne.w	8003174 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b01      	cmp	r3, #1
 8003062:	f040 8087 	bne.w	8003174 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003066:	4b89      	ldr	r3, [pc, #548]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e3b0      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	4b82      	ldr	r3, [pc, #520]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_RCC_OscConfig+0x7c>
 800308e:	4b7f      	ldr	r3, [pc, #508]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003096:	e005      	b.n	80030a4 <HAL_RCC_OscConfig+0x88>
 8003098:	4b7c      	ldr	r3, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800309a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d223      	bcs.n	80030f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fd75 	bl	8003b9c <RCC_SetFlashLatencyFromMSIRange>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e391      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030bc:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a72      	ldr	r2, [pc, #456]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	496d      	ldr	r1, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030da:	4b6c      	ldr	r3, [pc, #432]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	4968      	ldr	r1, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
 80030ee:	e025      	b.n	800313c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f0:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030f6:	f043 0308 	orr.w	r3, r3, #8
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4960      	ldr	r1, [pc, #384]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	495b      	ldr	r1, [pc, #364]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d109      	bne.n	800313c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fd35 	bl	8003b9c <RCC_SetFlashLatencyFromMSIRange>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e351      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800313c:	f000 fc38 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b52      	ldr	r3, [pc, #328]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	4950      	ldr	r1, [pc, #320]	; (8003290 <HAL_RCC_OscConfig+0x274>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
 8003158:	4a4e      	ldr	r2, [pc, #312]	; (8003294 <HAL_RCC_OscConfig+0x278>)
 800315a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800315c:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <HAL_RCC_OscConfig+0x27c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe f91b 	bl	800139c <HAL_InitTick>
 8003166:	4603      	mov	r3, r0
 8003168:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d052      	beq.n	8003216 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	e335      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d032      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003188:	f7fe fe54 	bl	8001e34 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003190:	f7fe fe50 	bl	8001e34 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e31e      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a2:	4b3a      	ldr	r3, [pc, #232]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a36      	ldr	r2, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b4:	f043 0308 	orr.w	r3, r3, #8
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4931      	ldr	r1, [pc, #196]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	492c      	ldr	r1, [pc, #176]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
 80031e0:	e01a      	b.n	8003218 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031e2:	4b2a      	ldr	r3, [pc, #168]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a29      	ldr	r2, [pc, #164]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fe21 	bl	8001e34 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f6:	f7fe fe1d 	bl	8001e34 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e2eb      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x1da>
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003216:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d074      	beq.n	800330e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b08      	cmp	r3, #8
 8003228:	d005      	beq.n	8003236 <HAL_RCC_OscConfig+0x21a>
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b0c      	cmp	r3, #12
 800322e:	d10e      	bne.n	800324e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d10b      	bne.n	800324e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d064      	beq.n	800330c <HAL_RCC_OscConfig+0x2f0>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d160      	bne.n	800330c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e2c8      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x24a>
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800325e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	e026      	b.n	80032b4 <HAL_RCC_OscConfig+0x298>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326e:	d115      	bne.n	800329c <HAL_RCC_OscConfig+0x280>
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e014      	b.n	80032b4 <HAL_RCC_OscConfig+0x298>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	0800e1e0 	.word	0x0800e1e0
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004
 800329c:	4ba0      	ldr	r3, [pc, #640]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a9f      	ldr	r2, [pc, #636]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b9d      	ldr	r3, [pc, #628]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a9c      	ldr	r2, [pc, #624]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fe fdba 	bl	8001e34 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fe fdb6 	bl	8001e34 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e284      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x2a8>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fda6 	bl	8001e34 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fda2 	bl	8001e34 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e270      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fe:	4b88      	ldr	r3, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d0>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d060      	beq.n	80033dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x310>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d119      	bne.n	800335a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d116      	bne.n	800335a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800332c:	4b7c      	ldr	r3, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x328>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e24d      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	4973      	ldr	r1, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003358:	e040      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d023      	beq.n	80033aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fe fd61 	bl	8001e34 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003376:	f7fe fd5d 	bl	8001e34 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e22b      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	495f      	ldr	r1, [pc, #380]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	e018      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fe fd3d 	bl	8001e34 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7fe fd39 	bl	8001e34 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e207      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d03c      	beq.n	8003462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01c      	beq.n	800342a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f0:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	4a4a      	ldr	r2, [pc, #296]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe fd18 	bl	8001e34 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003408:	f7fe fd14 	bl	8001e34 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1e2      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ef      	beq.n	8003408 <HAL_RCC_OscConfig+0x3ec>
 8003428:	e01b      	b.n	8003462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003430:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fe fcfb 	bl	8001e34 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003442:	f7fe fcf7 	bl	8001e34 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1c5      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a6 	beq.w	80035bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	; 0x58
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003498:	2301      	movs	r3, #1
 800349a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d118      	bne.n	80034da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b4:	f7fe fcbe 	bl	8001e34 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fe fcba 	bl	8001e34 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e188      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d108      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4d8>
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f2:	e029      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d115      	bne.n	8003528 <HAL_RCC_OscConfig+0x50c>
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a03      	ldr	r2, [pc, #12]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	4b91      	ldr	r3, [pc, #580]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a90      	ldr	r2, [pc, #576]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003538:	4b8d      	ldr	r3, [pc, #564]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a8c      	ldr	r2, [pc, #560]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d016      	beq.n	800357e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe fc70 	bl	8001e34 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fe fc6c 	bl	8001e34 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e138      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356e:	4b80      	ldr	r3, [pc, #512]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ed      	beq.n	8003558 <HAL_RCC_OscConfig+0x53c>
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fe fc59 	bl	8001e34 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fc55 	bl	8001e34 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e121      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800359c:	4b74      	ldr	r3, [pc, #464]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ed      	bne.n	8003586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b0:	4b6f      	ldr	r3, [pc, #444]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	4a6e      	ldr	r2, [pc, #440]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 80035b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 810c 	beq.w	80037de <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	f040 80d4 	bne.w	8003778 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035d0:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 0203 	and.w	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d130      	bne.n	8003646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	3b01      	subs	r3, #1
 80035f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d127      	bne.n	8003646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d11f      	bne.n	8003646 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003610:	2a07      	cmp	r2, #7
 8003612:	bf14      	ite	ne
 8003614:	2201      	movne	r2, #1
 8003616:	2200      	moveq	r2, #0
 8003618:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361a:	4293      	cmp	r3, r2
 800361c:	d113      	bne.n	8003646 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	3b01      	subs	r3, #1
 800362c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d109      	bne.n	8003646 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d06e      	beq.n	8003724 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b0c      	cmp	r3, #12
 800364a:	d069      	beq.n	8003720 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800364c:	4b48      	ldr	r3, [pc, #288]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003658:	4b45      	ldr	r3, [pc, #276]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0bb      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003668:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a40      	ldr	r2, [pc, #256]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800366e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003672:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003674:	f7fe fbde 	bl	8001e34 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367c:	f7fe fbda 	bl	8001e34 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0a8      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368e:	4b38      	ldr	r3, [pc, #224]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800369a:	4b35      	ldr	r3, [pc, #212]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	4b35      	ldr	r3, [pc, #212]	; (8003774 <HAL_RCC_OscConfig+0x758>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0112      	lsls	r2, r2, #4
 80036ae:	4311      	orrs	r1, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036b4:	0212      	lsls	r2, r2, #8
 80036b6:	4311      	orrs	r1, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036bc:	0852      	lsrs	r2, r2, #1
 80036be:	3a01      	subs	r2, #1
 80036c0:	0552      	lsls	r2, r2, #21
 80036c2:	4311      	orrs	r1, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036c8:	0852      	lsrs	r2, r2, #1
 80036ca:	3a01      	subs	r2, #1
 80036cc:	0652      	lsls	r2, r2, #25
 80036ce:	4311      	orrs	r1, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036d4:	0912      	lsrs	r2, r2, #4
 80036d6:	0452      	lsls	r2, r2, #17
 80036d8:	430a      	orrs	r2, r1
 80036da:	4925      	ldr	r1, [pc, #148]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a22      	ldr	r2, [pc, #136]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 80036e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 80036f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036f8:	f7fe fb9c 	bl	8001e34 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe fb98 	bl	8001e34 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e066      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800371e:	e05e      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e05d      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d156      	bne.n	80037de <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003748:	f7fe fb74 	bl	8001e34 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe fb70 	bl	8001e34 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e03e      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003762:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_OscConfig+0x754>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x734>
 800376e:	e036      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
 8003770:	40021000 	.word	0x40021000
 8003774:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d02d      	beq.n	80037da <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 8003784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003788:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 800379c:	f023 0303 	bic.w	r3, r3, #3
 80037a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 80037a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b2:	f7fe fb3f 	bl	8001e34 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fb3b 	bl	8001e34 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e009      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_OscConfig+0x7cc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x79e>
 80037d8:	e001      	b.n	80037de <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0c8      	b.n	8003992 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <HAL_RCC_ClockConfig+0x1b0>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d910      	bls.n	8003830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b63      	ldr	r3, [pc, #396]	; (800399c <HAL_RCC_ClockConfig+0x1b0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f023 0207 	bic.w	r2, r3, #7
 8003816:	4961      	ldr	r1, [pc, #388]	; (800399c <HAL_RCC_ClockConfig+0x1b0>)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_RCC_ClockConfig+0x1b0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0b0      	b.n	8003992 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d04c      	beq.n	80038d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d107      	bne.n	8003854 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003844:	4b56      	ldr	r3, [pc, #344]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d121      	bne.n	8003894 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e09e      	b.n	8003992 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d107      	bne.n	800386c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800385c:	4b50      	ldr	r3, [pc, #320]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d115      	bne.n	8003894 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e092      	b.n	8003992 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003874:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e086      	b.n	8003992 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003884:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e07e      	b.n	8003992 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003894:	4b42      	ldr	r3, [pc, #264]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 0203 	bic.w	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	493f      	ldr	r1, [pc, #252]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a6:	f7fe fac5 	bl	8001e34 <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ae:	f7fe fac1 	bl	8001e34 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e066      	b.n	8003992 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c4:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 020c 	and.w	r2, r3, #12
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d1eb      	bne.n	80038ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e2:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	492c      	ldr	r1, [pc, #176]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <HAL_RCC_ClockConfig+0x1b0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d210      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCC_ClockConfig+0x1b0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4924      	ldr	r1, [pc, #144]	; (800399c <HAL_RCC_ClockConfig+0x1b0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b22      	ldr	r3, [pc, #136]	; (800399c <HAL_RCC_ClockConfig+0x1b0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e036      	b.n	8003992 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4918      	ldr	r1, [pc, #96]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394e:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4910      	ldr	r1, [pc, #64]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003962:	f000 f825 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <HAL_RCC_ClockConfig+0x1b4>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490c      	ldr	r1, [pc, #48]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	fa22 f303 	lsr.w	r3, r2, r3
 800397e:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fd08 	bl	800139c <HAL_InitTick>
 800398c:	4603      	mov	r3, r0
 800398e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003990:	7afb      	ldrb	r3, [r7, #11]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40022000 	.word	0x40022000
 80039a0:	40021000 	.word	0x40021000
 80039a4:	0800e1e0 	.word	0x0800e1e0
 80039a8:	20000000 	.word	0x20000000
 80039ac:	20000004 	.word	0x20000004

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	2300      	movs	r3, #0
 80039bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4b3e      	ldr	r3, [pc, #248]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c8:	4b3b      	ldr	r3, [pc, #236]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x34>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d121      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d11e      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039e4:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039f0:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	e005      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a00:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10d      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d102      	bne.n	8003a2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a28:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	e004      	b.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d134      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d003      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0xac>
 8003a54:	e005      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a58:	617b      	str	r3, [r7, #20]
      break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a5e:	617b      	str	r3, [r7, #20]
      break;
 8003a60:	e002      	b.n	8003a68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	617b      	str	r3, [r7, #20]
      break;
 8003a66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	3301      	adds	r3, #1
 8003a74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	fb03 f202 	mul.w	r2, r3, r2
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0e5b      	lsrs	r3, r3, #25
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	; 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	0800e1f8 	.word	0x0800e1f8
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	007a1200 	.word	0x007a1200

08003ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000

08003ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ae4:	f7ff fff0 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	4904      	ldr	r1, [pc, #16]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003af6:	5ccb      	ldrb	r3, [r1, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000
 8003b08:	0800e1f0 	.word	0x0800e1f0

08003b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b10:	f7ff ffda 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0adb      	lsrs	r3, r3, #11
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4904      	ldr	r1, [pc, #16]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	f003 031f 	and.w	r3, r3, #31
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	0800e1f0 	.word	0x0800e1f0

08003b38 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	220f      	movs	r2, #15
 8003b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <HAL_RCC_GetClockConfig+0x60>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0207 	and.w	r2, r3, #7
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	601a      	str	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40022000 	.word	0x40022000

08003b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ba8:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bb4:	f7ff f902 	bl	8002dbc <HAL_PWREx_GetVoltageRange>
 8003bb8:	6178      	str	r0, [r7, #20]
 8003bba:	e014      	b.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bd4:	f7ff f8f2 	bl	8002dbc <HAL_PWREx_GetVoltageRange>
 8003bd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bec:	d10b      	bne.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d919      	bls.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2ba0      	cmp	r3, #160	; 0xa0
 8003bf8:	d902      	bls.n	8003c00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	e013      	b.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c00:	2301      	movs	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e010      	b.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b80      	cmp	r3, #128	; 0x80
 8003c0a:	d902      	bls.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e00a      	b.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d102      	bne.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c18:	2302      	movs	r3, #2
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	e004      	b.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b70      	cmp	r3, #112	; 0x70
 8003c22:	d101      	bne.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c24:	2301      	movs	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f023 0207 	bic.w	r2, r3, #7
 8003c30:	4909      	ldr	r1, [pc, #36]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d001      	beq.n	8003c4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000
 8003c58:	40022000 	.word	0x40022000

08003c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c64:	2300      	movs	r3, #0
 8003c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c68:	2300      	movs	r3, #0
 8003c6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d041      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c80:	d02a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c86:	d824      	bhi.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c8c:	d008      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c92:	d81e      	bhi.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9c:	d010      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c9e:	e018      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ca0:	4b86      	ldr	r3, [pc, #536]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4a85      	ldr	r2, [pc, #532]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003caa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cac:	e015      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 facb 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cbe:	e00c      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3320      	adds	r3, #32
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fbb6 	bl	8004438 <RCCEx_PLLSAI2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd0:	e003      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	74fb      	strb	r3, [r7, #19]
      break;
 8003cd6:	e000      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cda:	7cfb      	ldrb	r3, [r7, #19]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ce0:	4b76      	ldr	r3, [pc, #472]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cee:	4973      	ldr	r1, [pc, #460]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cf6:	e001      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d041      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d10:	d02a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d16:	d824      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d1c:	d008      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d22:	d81e      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d2c:	d010      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d2e:	e018      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d30:	4b62      	ldr	r3, [pc, #392]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a61      	ldr	r2, [pc, #388]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d3c:	e015      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fa83 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d4e:	e00c      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3320      	adds	r3, #32
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fb6e 	bl	8004438 <RCCEx_PLLSAI2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	74fb      	strb	r3, [r7, #19]
      break;
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10b      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d70:	4b52      	ldr	r3, [pc, #328]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7e:	494f      	ldr	r1, [pc, #316]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d86:	e001      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80a0 	beq.w	8003eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d9e:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dae:	2300      	movs	r3, #0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	4a40      	ldr	r2, [pc, #256]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc0:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a3a      	ldr	r2, [pc, #232]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ddc:	f7fe f82a 	bl	8001e34 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de2:	e009      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de4:	f7fe f826 	bl	8001e34 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d902      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	74fb      	strb	r3, [r7, #19]
        break;
 8003df6:	e005      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ef      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d15c      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e0a:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01f      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d019      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e34:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e54:	4a19      	ldr	r2, [pc, #100]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d016      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fd ffe5 	bl	8001e34 <HAL_GetTick>
 8003e6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6c:	e00b      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fd ffe1 	bl	8001e34 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d902      	bls.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	74fb      	strb	r3, [r7, #19]
            break;
 8003e84:	e006      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ec      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eaa:	4904      	ldr	r1, [pc, #16]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003eb2:	e009      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
 8003eb8:	e006      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec8:	7c7b      	ldrb	r3, [r7, #17]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ece:	4b9e      	ldr	r3, [pc, #632]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	4a9d      	ldr	r2, [pc, #628]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee6:	4b98      	ldr	r3, [pc, #608]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 0203 	bic.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	4994      	ldr	r1, [pc, #592]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f08:	4b8f      	ldr	r3, [pc, #572]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 020c 	bic.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	498c      	ldr	r1, [pc, #560]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f2a:	4b87      	ldr	r3, [pc, #540]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	4983      	ldr	r1, [pc, #524]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	497b      	ldr	r1, [pc, #492]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7c:	4972      	ldr	r1, [pc, #456]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f90:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	496a      	ldr	r1, [pc, #424]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fb2:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc0:	4961      	ldr	r1, [pc, #388]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd4:	4b5c      	ldr	r3, [pc, #368]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	4959      	ldr	r1, [pc, #356]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff6:	4b54      	ldr	r3, [pc, #336]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004004:	4950      	ldr	r1, [pc, #320]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004018:	4b4b      	ldr	r3, [pc, #300]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	4948      	ldr	r1, [pc, #288]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800403a:	4b43      	ldr	r3, [pc, #268]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	493f      	ldr	r1, [pc, #252]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d028      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800405c:	4b3a      	ldr	r3, [pc, #232]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406a:	4937      	ldr	r1, [pc, #220]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407a:	d106      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a31      	ldr	r2, [pc, #196]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004086:	60d3      	str	r3, [r2, #12]
 8004088:	e011      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004092:	d10c      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f8d8 	bl	8004250 <RCCEx_PLLSAI1_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d028      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	491f      	ldr	r1, [pc, #124]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d8:	d106      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e4:	60d3      	str	r3, [r2, #12]
 80040e6:	e011      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f0:	d10c      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3304      	adds	r3, #4
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 f8a9 	bl	8004250 <RCCEx_PLLSAI1_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004102:	7cfb      	ldrb	r3, [r7, #19]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02b      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004126:	4908      	ldr	r1, [pc, #32]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004136:	d109      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4a02      	ldr	r2, [pc, #8]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004142:	60d3      	str	r3, [r2, #12]
 8004144:	e014      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004154:	d10c      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	2101      	movs	r1, #1
 800415c:	4618      	mov	r0, r3
 800415e:	f000 f877 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d02f      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418a:	4928      	ldr	r1, [pc, #160]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419a:	d10d      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	2102      	movs	r1, #2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f854 	bl	8004250 <RCCEx_PLLSAI1_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d014      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	74bb      	strb	r3, [r7, #18]
 80041b6:	e011      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3320      	adds	r3, #32
 80041c6:	2102      	movs	r1, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f935 	bl	8004438 <RCCEx_PLLSAI2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f6:	490d      	ldr	r1, [pc, #52]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421a:	4904      	ldr	r1, [pc, #16]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004222:	7cbb      	ldrb	r3, [r7, #18]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40021000 	.word	0x40021000

08004230 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800423a:	f043 0304 	orr.w	r3, r3, #4
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000

08004250 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800425e:	4b75      	ldr	r3, [pc, #468]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d018      	beq.n	800429c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800426a:	4b72      	ldr	r3, [pc, #456]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0203 	and.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d10d      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
       ||
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004282:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
       ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d047      	beq.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e044      	b.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d018      	beq.n	80042d6 <RCCEx_PLLSAI1_Config+0x86>
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d825      	bhi.n	80042f4 <RCCEx_PLLSAI1_Config+0xa4>
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d002      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0x62>
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d009      	beq.n	80042c4 <RCCEx_PLLSAI1_Config+0x74>
 80042b0:	e020      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042b2:	4b60      	ldr	r3, [pc, #384]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11d      	bne.n	80042fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c2:	e01a      	b.n	80042fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042c4:	4b5b      	ldr	r3, [pc, #364]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d116      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d4:	e013      	b.n	80042fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042d6:	4b57      	ldr	r3, [pc, #348]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042e2:	4b54      	ldr	r3, [pc, #336]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042f2:	e006      	b.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e004      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004302:	bf00      	nop
    }

    if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10d      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800430a:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6819      	ldr	r1, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	430b      	orrs	r3, r1
 8004320:	4944      	ldr	r1, [pc, #272]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d17d      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800432c:	4b41      	ldr	r3, [pc, #260]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a40      	ldr	r2, [pc, #256]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fd fd7c 	bl	8001e34 <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800433e:	e009      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004340:	f7fd fd78 	bl	8001e34 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d902      	bls.n	8004354 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	73fb      	strb	r3, [r7, #15]
        break;
 8004352:	e005      	b.n	8004360 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004354:	4b37      	ldr	r3, [pc, #220]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ef      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d160      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d111      	bne.n	8004390 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6892      	ldr	r2, [r2, #8]
 800437c:	0211      	lsls	r1, r2, #8
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68d2      	ldr	r2, [r2, #12]
 8004382:	0912      	lsrs	r2, r2, #4
 8004384:	0452      	lsls	r2, r2, #17
 8004386:	430a      	orrs	r2, r1
 8004388:	492a      	ldr	r1, [pc, #168]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
 800438e:	e027      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d112      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004396:	4b27      	ldr	r3, [pc, #156]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800439e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6892      	ldr	r2, [r2, #8]
 80043a6:	0211      	lsls	r1, r2, #8
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6912      	ldr	r2, [r2, #16]
 80043ac:	0852      	lsrs	r2, r2, #1
 80043ae:	3a01      	subs	r2, #1
 80043b0:	0552      	lsls	r2, r2, #21
 80043b2:	430a      	orrs	r2, r1
 80043b4:	491f      	ldr	r1, [pc, #124]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]
 80043ba:	e011      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6892      	ldr	r2, [r2, #8]
 80043cc:	0211      	lsls	r1, r2, #8
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6952      	ldr	r2, [r2, #20]
 80043d2:	0852      	lsrs	r2, r2, #1
 80043d4:	3a01      	subs	r2, #1
 80043d6:	0652      	lsls	r2, r2, #25
 80043d8:	430a      	orrs	r2, r1
 80043da:	4916      	ldr	r1, [pc, #88]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a13      	ldr	r2, [pc, #76]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fd fd22 	bl	8001e34 <HAL_GetTick>
 80043f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043f2:	e009      	b.n	8004408 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f4:	f7fd fd1e 	bl	8001e34 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d902      	bls.n	8004408 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	73fb      	strb	r3, [r7, #15]
          break;
 8004406:	e005      	b.n	8004414 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ef      	beq.n	80043f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	4904      	ldr	r1, [pc, #16]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000

08004438 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004446:	4b6a      	ldr	r3, [pc, #424]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004452:	4b67      	ldr	r3, [pc, #412]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0203 	and.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d10d      	bne.n	800447e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
       ||
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800446a:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
       ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d047      	beq.n	800450e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
 8004482:	e044      	b.n	800450e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d018      	beq.n	80044be <RCCEx_PLLSAI2_Config+0x86>
 800448c:	2b03      	cmp	r3, #3
 800448e:	d825      	bhi.n	80044dc <RCCEx_PLLSAI2_Config+0xa4>
 8004490:	2b01      	cmp	r3, #1
 8004492:	d002      	beq.n	800449a <RCCEx_PLLSAI2_Config+0x62>
 8004494:	2b02      	cmp	r3, #2
 8004496:	d009      	beq.n	80044ac <RCCEx_PLLSAI2_Config+0x74>
 8004498:	e020      	b.n	80044dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800449a:	4b55      	ldr	r3, [pc, #340]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11d      	bne.n	80044e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044aa:	e01a      	b.n	80044e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044ac:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d116      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044bc:	e013      	b.n	80044e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ca:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044da:	e006      	b.n	80044ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      break;
 80044e0:	e004      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	3b01      	subs	r3, #1
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	430b      	orrs	r3, r1
 8004508:	4939      	ldr	r1, [pc, #228]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	4313      	orrs	r3, r2
 800450c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d167      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004514:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a35      	ldr	r2, [pc, #212]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004520:	f7fd fc88 	bl	8001e34 <HAL_GetTick>
 8004524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004526:	e009      	b.n	800453c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004528:	f7fd fc84 	bl	8001e34 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d902      	bls.n	800453c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	73fb      	strb	r3, [r7, #15]
        break;
 800453a:	e005      	b.n	8004548 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800453c:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ef      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d14a      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d111      	bne.n	8004578 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004554:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800455c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	0211      	lsls	r1, r2, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68d2      	ldr	r2, [r2, #12]
 800456a:	0912      	lsrs	r2, r2, #4
 800456c:	0452      	lsls	r2, r2, #17
 800456e:	430a      	orrs	r2, r1
 8004570:	491f      	ldr	r1, [pc, #124]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004572:	4313      	orrs	r3, r2
 8004574:	614b      	str	r3, [r1, #20]
 8004576:	e011      	b.n	800459c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004580:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6892      	ldr	r2, [r2, #8]
 8004588:	0211      	lsls	r1, r2, #8
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6912      	ldr	r2, [r2, #16]
 800458e:	0852      	lsrs	r2, r2, #1
 8004590:	3a01      	subs	r2, #1
 8004592:	0652      	lsls	r2, r2, #25
 8004594:	430a      	orrs	r2, r1
 8004596:	4916      	ldr	r1, [pc, #88]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fc44 	bl	8001e34 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ae:	e009      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045b0:	f7fd fc40 	bl	8001e34 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
          break;
 80045c2:	e005      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	4904      	ldr	r1, [pc, #16]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000

080045f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e095      	b.n	8004732 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d108      	bne.n	8004620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004616:	d009      	beq.n	800462c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	61da      	str	r2, [r3, #28]
 800461e:	e005      	b.n	800462c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fd08 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004662:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800466c:	d902      	bls.n	8004674 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e002      	b.n	800467a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004678:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004682:	d007      	beq.n	8004694 <HAL_SPI_Init+0xa0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800468c:	d002      	beq.n	8004694 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	ea42 0103 	orr.w	r1, r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f003 0204 	and.w	r2, r3, #4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004710:	ea42 0103 	orr.w	r1, r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e01a      	b.n	8004782 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7fc fcbd 	bl	80010e4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b088      	sub	sp, #32
 800478e:	af02      	add	r7, sp, #8
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a6:	d112      	bne.n	80047ce <HAL_SPI_Receive+0x44>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10e      	bne.n	80047ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2204      	movs	r2, #4
 80047b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f910 	bl	80049ea <HAL_SPI_TransmitReceive>
 80047ca:	4603      	mov	r3, r0
 80047cc:	e109      	b.n	80049e2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_SPI_Receive+0x52>
 80047d8:	2302      	movs	r3, #2
 80047da:	e102      	b.n	80049e2 <HAL_SPI_Receive+0x258>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e4:	f7fd fb26 	bl	8001e34 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d002      	beq.n	80047fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047fa:	e0e9      	b.n	80049d0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_SPI_Receive+0x7e>
 8004802:	88fb      	ldrh	r3, [r7, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d102      	bne.n	800480e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800480c:	e0e0      	b.n	80049d0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2204      	movs	r2, #4
 8004812:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	88fa      	ldrh	r2, [r7, #6]
 8004826:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	88fa      	ldrh	r2, [r7, #6]
 800482e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004858:	d908      	bls.n	800486c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	e007      	b.n	800487c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800487a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004884:	d10f      	bne.n	80048a6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004894:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d007      	beq.n	80048c4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048cc:	d867      	bhi.n	800499e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048ce:	e030      	b.n	8004932 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d117      	bne.n	800490e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f103 020c 	add.w	r2, r3, #12
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800490c:	e011      	b.n	8004932 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800490e:	f7fd fa91 	bl	8001e34 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d803      	bhi.n	8004926 <HAL_SPI_Receive+0x19c>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d102      	bne.n	800492c <HAL_SPI_Receive+0x1a2>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004930:	e04e      	b.n	80049d0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1c8      	bne.n	80048d0 <HAL_SPI_Receive+0x146>
 800493e:	e034      	b.n	80049aa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d115      	bne.n	800497a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	b292      	uxth	r2, r2
 800495a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004978:	e011      	b.n	800499e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497a:	f7fd fa5b 	bl	8001e34 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d803      	bhi.n	8004992 <HAL_SPI_Receive+0x208>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d102      	bne.n	8004998 <HAL_SPI_Receive+0x20e>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d102      	bne.n	800499e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800499c:	e018      	b.n	80049d0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1ca      	bne.n	8004940 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	6839      	ldr	r1, [r7, #0]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f001 f802 	bl	80059b8 <SPI_EndRxTransaction>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
 80049cc:	e000      	b.n	80049d0 <HAL_SPI_Receive+0x246>
  }

error :
 80049ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b08a      	sub	sp, #40	; 0x28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
 80049f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049f8:	2301      	movs	r3, #1
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x26>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e1fb      	b.n	8004e08 <HAL_SPI_TransmitReceive+0x41e>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a18:	f7fd fa0c 	bl	8001e34 <HAL_GetTick>
 8004a1c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a24:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a2c:	887b      	ldrh	r3, [r7, #2]
 8004a2e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004a30:	887b      	ldrh	r3, [r7, #2]
 8004a32:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a34:	7efb      	ldrb	r3, [r7, #27]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d00e      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x6e>
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a40:	d106      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <HAL_SPI_TransmitReceive+0x66>
 8004a4a:	7efb      	ldrb	r3, [r7, #27]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d003      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a56:	e1cd      	b.n	8004df4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_SPI_TransmitReceive+0x80>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_TransmitReceive+0x80>
 8004a64:	887b      	ldrh	r3, [r7, #2]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a70:	e1c0      	b.n	8004df4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d003      	beq.n	8004a86 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2205      	movs	r2, #5
 8004a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	887a      	ldrh	r2, [r7, #2]
 8004a9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ac8:	d802      	bhi.n	8004ad0 <HAL_SPI_TransmitReceive+0xe6>
 8004aca:	8a3b      	ldrh	r3, [r7, #16]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d908      	bls.n	8004ae2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	e007      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004af0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d007      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b18:	d97c      	bls.n	8004c14 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x13e>
 8004b22:	8a7b      	ldrh	r3, [r7, #18]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d169      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	881a      	ldrh	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	1c9a      	adds	r2, r3, #2
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4c:	e056      	b.n	8004bfc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d11b      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x1aa>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x1aa>
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d113      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d11c      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x1f2>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	b292      	uxth	r2, r2
 8004bba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bdc:	f7fd f92a 	bl	8001e34 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d807      	bhi.n	8004bfc <HAL_SPI_TransmitReceive+0x212>
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d003      	beq.n	8004bfc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004bfa:	e0fb      	b.n	8004df4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1a3      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x164>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d19d      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x164>
 8004c12:	e0df      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_SPI_TransmitReceive+0x23a>
 8004c1c:	8a7b      	ldrh	r3, [r7, #18]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	f040 80cb 	bne.w	8004dba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d912      	bls.n	8004c54 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	881a      	ldrh	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	1c9a      	adds	r2, r3, #2
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b02      	subs	r3, #2
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c52:	e0b2      	b.n	8004dba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c7a:	e09e      	b.n	8004dba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d134      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x30a>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02f      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x30a>
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d12c      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d912      	bls.n	8004cca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	881a      	ldrh	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	1c9a      	adds	r2, r3, #2
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b02      	subs	r3, #2
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cc8:	e012      	b.n	8004cf0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	7812      	ldrb	r2, [r2, #0]
 8004cd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d148      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x3aa>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d042      	beq.n	8004d94 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d923      	bls.n	8004d62 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	b292      	uxth	r2, r2
 8004d26:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	1c9a      	adds	r2, r3, #2
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b02      	subs	r3, #2
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d81f      	bhi.n	8004d90 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	e016      	b.n	8004d90 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f103 020c 	add.w	r2, r3, #12
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	7812      	ldrb	r2, [r2, #0]
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d90:	2301      	movs	r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d94:	f7fd f84e 	bl	8001e34 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d803      	bhi.n	8004dac <HAL_SPI_TransmitReceive+0x3c2>
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_TransmitReceive+0x3c8>
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004db8:	e01c      	b.n	8004df4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f47f af5b 	bne.w	8004c7c <HAL_SPI_TransmitReceive+0x292>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f47f af54 	bne.w	8004c7c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fe45 	bl	8005a68 <SPI_EndRxTxTransaction>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d006      	beq.n	8004df2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	661a      	str	r2, [r3, #96]	; 0x60
 8004df0:	e000      	b.n	8004df4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_SPI_Transmit_IT+0x20>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e072      	b.n	8004f16 <HAL_SPI_Transmit_IT+0x106>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_Transmit_IT+0x34>
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e48:	e060      	b.n	8004f0c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d002      	beq.n	8004e5c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
 8004e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e5a:	e057      	b.n	8004f0c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2203      	movs	r2, #3
 8004e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ea0:	d903      	bls.n	8004eaa <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <HAL_SPI_Transmit_IT+0x114>)
 8004ea6:	651a      	str	r2, [r3, #80]	; 0x50
 8004ea8:	e002      	b.n	8004eb0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <HAL_SPI_Transmit_IT+0x118>)
 8004eae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb8:	d10f      	bne.n	8004eda <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ed8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004ee8:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d008      	beq.n	8004f0a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e000      	b.n	8004f0c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8004f0a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	08005737 	.word	0x08005737
 8004f28:	080056f1 	.word	0x080056f1

08004f2c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d110      	bne.n	8004f68 <HAL_SPI_Receive_IT+0x3c>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4e:	d10b      	bne.n	8004f68 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2204      	movs	r2, #4
 8004f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f894 	bl	800508c <HAL_SPI_TransmitReceive_IT>
 8004f64:	4603      	mov	r3, r0
 8004f66:	e089      	b.n	800507c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_SPI_Receive_IT+0x4a>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e082      	b.n	800507c <HAL_SPI_Receive_IT+0x150>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d002      	beq.n	8004f90 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f8e:	e070      	b.n	8005072 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_SPI_Receive_IT+0x70>
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fa0:	e067      	b.n	8005072 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	88fa      	ldrh	r2, [r7, #6]
 8004fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fe6:	d90b      	bls.n	8005000 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ff6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a22      	ldr	r2, [pc, #136]	; (8005084 <HAL_SPI_Receive_IT+0x158>)
 8004ffc:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ffe:	e00a      	b.n	8005016 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800500e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <HAL_SPI_Receive_IT+0x15c>)
 8005014:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501e:	d10f      	bne.n	8005040 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800503e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800504e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d008      	beq.n	8005070 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e000      	b.n	8005072 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8005070:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	080056a5 	.word	0x080056a5
 8005088:	08005655 	.word	0x08005655

0800508c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_SPI_TransmitReceive_IT+0x20>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e091      	b.n	80051d0 <HAL_SPI_TransmitReceive_IT+0x144>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050ba:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050c2:	7dbb      	ldrb	r3, [r7, #22]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d00d      	beq.n	80050e4 <HAL_SPI_TransmitReceive_IT+0x58>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ce:	d106      	bne.n	80050de <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <HAL_SPI_TransmitReceive_IT+0x52>
 80050d8:	7dbb      	ldrb	r3, [r7, #22]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80050de:	2302      	movs	r3, #2
 80050e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050e2:	e070      	b.n	80051c6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050fa:	e064      	b.n	80051c6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b04      	cmp	r3, #4
 8005106:	d003      	beq.n	8005110 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2205      	movs	r2, #5
 800510c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	887a      	ldrh	r2, [r7, #2]
 8005126:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	887a      	ldrh	r2, [r7, #2]
 8005132:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	887a      	ldrh	r2, [r7, #2]
 800513a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005146:	d906      	bls.n	8005156 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a24      	ldr	r2, [pc, #144]	; (80051dc <HAL_SPI_TransmitReceive_IT+0x150>)
 800514c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4a23      	ldr	r2, [pc, #140]	; (80051e0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005152:	651a      	str	r2, [r3, #80]	; 0x50
 8005154:	e005      	b.n	8005162 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <HAL_SPI_TransmitReceive_IT+0x158>)
 800515a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005160:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800516a:	d802      	bhi.n	8005172 <HAL_SPI_TransmitReceive_IT+0xe6>
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d908      	bls.n	8005184 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	e007      	b.n	8005194 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005192:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80051a2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b40      	cmp	r3, #64	; 0x40
 80051b0:	d008      	beq.n	80051c4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e000      	b.n	80051c6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 80051c4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	371c      	adds	r7, #28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	0800558f 	.word	0x0800558f
 80051e0:	080055f5 	.word	0x080055f5
 80051e4:	0800543f 	.word	0x0800543f
 80051e8:	080054fd 	.word	0x080054fd

080051ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10f      	bne.n	8005230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	099b      	lsrs	r3, r3, #6
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	4798      	blx	r3
    return;
 800522e:	e0d7      	b.n	80053e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_SPI_IRQHandler+0x66>
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	09db      	lsrs	r3, r3, #7
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4798      	blx	r3
    return;
 8005250:	e0c6      	b.n	80053e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10c      	bne.n	8005278 <HAL_SPI_IRQHandler+0x8c>
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	099b      	lsrs	r3, r3, #6
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80b4 	beq.w	80053e0 <HAL_SPI_IRQHandler+0x1f4>
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80ad 	beq.w	80053e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	099b      	lsrs	r3, r3, #6
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d023      	beq.n	80052da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b03      	cmp	r3, #3
 800529c:	d011      	beq.n	80052c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a2:	f043 0204 	orr.w	r2, r3, #4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	e00b      	b.n	80052da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]
        return;
 80052d8:	e082      	b.n	80053e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d014      	beq.n	8005310 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ea:	f043 0201 	orr.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00c      	beq.n	8005336 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005320:	f043 0208 	orr.w	r2, r3, #8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005328:	2300      	movs	r3, #0
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533a:	2b00      	cmp	r3, #0
 800533c:	d04f      	beq.n	80053de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800534c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <HAL_SPI_IRQHandler+0x17e>
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d034      	beq.n	80053d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0203 	bic.w	r2, r2, #3
 8005378:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	2b00      	cmp	r3, #0
 8005380:	d011      	beq.n	80053a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <HAL_SPI_IRQHandler+0x1fc>)
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	4618      	mov	r0, r3
 8005390:	f7fc ff6e 	bl	8002270 <HAL_DMA_Abort_IT>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d016      	beq.n	80053dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	4a0d      	ldr	r2, [pc, #52]	; (80053e8 <HAL_SPI_IRQHandler+0x1fc>)
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fc ff58 	bl	8002270 <HAL_DMA_Abort_IT>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80053d2:	e003      	b.n	80053dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f813 	bl	8005400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80053da:	e000      	b.n	80053de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80053dc:	bf00      	nop
    return;
 80053de:	bf00      	nop
  }
}
 80053e0:	3720      	adds	r7, #32
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	08005415 	.word	0x08005415

080053ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7ff ffe5 	bl	8005400 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005436:	bf00      	nop
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b01      	cmp	r3, #1
 8005450:	d923      	bls.n	800549a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	b292      	uxth	r2, r2
 800545e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b02      	subs	r3, #2
 8005474:	b29a      	uxth	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d11f      	bne.n	80054c8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005496:	605a      	str	r2, [r3, #4]
 8005498:	e016      	b.n	80054c8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f103 020c 	add.w	r2, r3, #12
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	7812      	ldrb	r2, [r2, #0]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10f      	bne.n	80054f4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054e2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fb00 	bl	8005af4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b01      	cmp	r3, #1
 800550c:	d912      	bls.n	8005534 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	881a      	ldrh	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b02      	subs	r3, #2
 800552c:	b29a      	uxth	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005532:	e012      	b.n	800555a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	1c5a      	adds	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d110      	bne.n	8005586 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005572:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d102      	bne.n	8005586 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fab7 	bl	8005af4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	b292      	uxth	r2, r2
 80055a2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	1c9a      	adds	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10f      	bne.n	80055ec <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa84 	bl	8005af4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d110      	bne.n	800564c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005638:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa54 	bl	8005af4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f103 020c 	add.w	r2, r3, #12
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa6e 	bl	8005b78 <SPI_CloseRx_ISR>
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	b292      	uxth	r2, r2
 80056b8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	1c9a      	adds	r2, r3, #2
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d102      	bne.n	80056e8 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa48 	bl	8005b78 <SPI_CloseRx_ISR>
  }
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	7812      	ldrb	r2, [r2, #0]
 8005704:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa55 	bl	8005bd8 <SPI_CloseTx_ISR>
  }
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	881a      	ldrh	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	1c9a      	adds	r2, r3, #2
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa33 	bl	8005bd8 <SPI_CloseTx_ISR>
  }
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800578c:	f7fc fb52 	bl	8001e34 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	4413      	add	r3, r2
 800579a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800579c:	f7fc fb4a 	bl	8001e34 <HAL_GetTick>
 80057a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057a2:	4b39      	ldr	r3, [pc, #228]	; (8005888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	015b      	lsls	r3, r3, #5
 80057a8:	0d1b      	lsrs	r3, r3, #20
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057b2:	e054      	b.n	800585e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d050      	beq.n	800585e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057bc:	f7fc fb3a 	bl	8001e34 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d902      	bls.n	80057d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d13d      	bne.n	800584e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ea:	d111      	bne.n	8005810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f4:	d004      	beq.n	8005800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fe:	d107      	bne.n	8005810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005818:	d10f      	bne.n	800583a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e017      	b.n	800587e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	3b01      	subs	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4013      	ands	r3, r2
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	429a      	cmp	r2, r3
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	429a      	cmp	r2, r3
 800587a:	d19b      	bne.n	80057b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000000 	.word	0x20000000

0800588c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	; 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
 8005898:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800589e:	f7fc fac9 	bl	8001e34 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	4413      	add	r3, r2
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80058ae:	f7fc fac1 	bl	8001e34 <HAL_GetTick>
 80058b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058bc:	4b3d      	ldr	r3, [pc, #244]	; (80059b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	00da      	lsls	r2, r3, #3
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	0d1b      	lsrs	r3, r3, #20
 80058cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80058d4:	e060      	b.n	8005998 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80058dc:	d107      	bne.n	80058ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d050      	beq.n	8005998 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058f6:	f7fc fa9d 	bl	8001e34 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005902:	429a      	cmp	r2, r3
 8005904:	d902      	bls.n	800590c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d13d      	bne.n	8005988 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800591a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005924:	d111      	bne.n	800594a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800592e:	d004      	beq.n	800593a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005938:	d107      	bne.n	800594a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005948:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005952:	d10f      	bne.n	8005974 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005972:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e010      	b.n	80059aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	3b01      	subs	r3, #1
 8005996:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4013      	ands	r3, r2
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d196      	bne.n	80058d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3728      	adds	r7, #40	; 0x28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000000 	.word	0x20000000

080059b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059cc:	d111      	bne.n	80059f2 <SPI_EndRxTransaction+0x3a>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	d004      	beq.n	80059e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e0:	d107      	bne.n	80059f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2200      	movs	r2, #0
 80059fa:	2180      	movs	r1, #128	; 0x80
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff febd 	bl	800577c <SPI_WaitFlagStateUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0c:	f043 0220 	orr.w	r2, r3, #32
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e023      	b.n	8005a60 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a20:	d11d      	bne.n	8005a5e <SPI_EndRxTransaction+0xa6>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2a:	d004      	beq.n	8005a36 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a34:	d113      	bne.n	8005a5e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff ff22 	bl	800588c <SPI_WaitFifoStateUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e000      	b.n	8005a60 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff ff03 	bl	800588c <SPI_WaitFifoStateUntilTimeout>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a90:	f043 0220 	orr.w	r2, r3, #32
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e027      	b.n	8005aec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2180      	movs	r1, #128	; 0x80
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fe68 	bl	800577c <SPI_WaitFlagStateUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e014      	b.n	8005aec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fedc 	bl	800588c <SPI_WaitFifoStateUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e000      	b.n	8005aec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005afc:	f7fc f99a 	bl	8001e34 <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0220 	bic.w	r2, r2, #32
 8005b10:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	2164      	movs	r1, #100	; 0x64
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff ffa6 	bl	8005a68 <SPI_EndRxTxTransaction>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b26:	f043 0220 	orr.w	r2, r3, #32
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d115      	bne.n	8005b62 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d107      	bne.n	8005b52 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f003 f89a 	bl	8008c84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005b50:	e00e      	b.n	8005b70 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fc46 	bl	80053ec <HAL_SPI_TxRxCpltCallback>
}
 8005b60:	e006      	b.n	8005b70 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fc48 	bl	8005400 <HAL_SPI_ErrorCallback>
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005b90:	f7fc f950 	bl	8001e34 <HAL_GetTick>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	2164      	movs	r1, #100	; 0x64
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff ff0c 	bl	80059b8 <SPI_EndRxTransaction>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005baa:	f043 0220 	orr.w	r2, r3, #32
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d103      	bne.n	8005bca <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f003 f85e 	bl	8008c84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005bc8:	e002      	b.n	8005bd0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff fc18 	bl	8005400 <HAL_SPI_ErrorCallback>
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be0:	f7fc f928 	bl	8001e34 <HAL_GetTick>
 8005be4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	2164      	movs	r1, #100	; 0x64
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ff34 	bl	8005a68 <SPI_EndRxTxTransaction>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0a:	f043 0220 	orr.w	r2, r3, #32
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	60bb      	str	r3, [r7, #8]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff fbdd 	bl	8005400 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005c46:	e002      	b.n	8005c4e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f003 f82f 	bl	8008cac <HAL_SPI_TxCpltCallback>
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e049      	b.n	8005cfc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f841 	bl	8005d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f000 f9f7 	bl	8006088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e04f      	b.n	8005dd0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <HAL_TIM_Base_Start_IT+0xc4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d01d      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d018      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00e      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <HAL_TIM_Base_Start_IT+0xd4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_TIM_Base_Start_IT+0x76>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d115      	bne.n	8005dba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b06      	cmp	r3, #6
 8005d9e:	d015      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da6:	d011      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	e008      	b.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e000      	b.n	8005dce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	40012c00 	.word	0x40012c00
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40000c00 	.word	0x40000c00
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40014000 	.word	0x40014000
 8005df4:	00010007 	.word	0x00010007

08005df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d122      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d11b      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0202 	mvn.w	r2, #2
 8005e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f905 	bl	800604a <HAL_TIM_IC_CaptureCallback>
 8005e40:	e005      	b.n	8005e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8f7 	bl	8006036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f908 	bl	800605e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d122      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d11b      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0204 	mvn.w	r2, #4
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f8db 	bl	800604a <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f8cd 	bl	8006036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f8de 	bl	800605e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d122      	bne.n	8005efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d11b      	bne.n	8005efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0208 	mvn.w	r2, #8
 8005ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f8b1 	bl	800604a <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f8a3 	bl	8006036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f8b4 	bl	800605e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2b10      	cmp	r3, #16
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b10      	cmp	r3, #16
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0210 	mvn.w	r2, #16
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2208      	movs	r2, #8
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f887 	bl	800604a <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f879 	bl	8006036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f88a 	bl	800605e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10e      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0201 	mvn.w	r2, #1
 8005f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fa ff2a 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b80      	cmp	r3, #128	; 0x80
 8005f88:	d10e      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d107      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f914 	bl	80061d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb6:	d10e      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	d107      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f907 	bl	80061e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d10e      	bne.n	8006002 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d107      	bne.n	8006002 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f838 	bl	8006072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d10e      	bne.n	800602e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b20      	cmp	r3, #32
 800601c:	d107      	bne.n	800602e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0220 	mvn.w	r2, #32
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f8c7 	bl	80061bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a40      	ldr	r2, [pc, #256]	; (800619c <TIM_Base_SetConfig+0x114>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a6:	d00f      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a3d      	ldr	r2, [pc, #244]	; (80061a0 <TIM_Base_SetConfig+0x118>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00b      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <TIM_Base_SetConfig+0x11c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a3b      	ldr	r2, [pc, #236]	; (80061a8 <TIM_Base_SetConfig+0x120>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a3a      	ldr	r2, [pc, #232]	; (80061ac <TIM_Base_SetConfig+0x124>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a2f      	ldr	r2, [pc, #188]	; (800619c <TIM_Base_SetConfig+0x114>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d01f      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d01b      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a2c      	ldr	r2, [pc, #176]	; (80061a0 <TIM_Base_SetConfig+0x118>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d017      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <TIM_Base_SetConfig+0x11c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a2a      	ldr	r2, [pc, #168]	; (80061a8 <TIM_Base_SetConfig+0x120>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00f      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a29      	ldr	r2, [pc, #164]	; (80061ac <TIM_Base_SetConfig+0x124>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00b      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a28      	ldr	r2, [pc, #160]	; (80061b0 <TIM_Base_SetConfig+0x128>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <TIM_Base_SetConfig+0x12c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_Base_SetConfig+0x9a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <TIM_Base_SetConfig+0x130>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d108      	bne.n	8006134 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a10      	ldr	r2, [pc, #64]	; (800619c <TIM_Base_SetConfig+0x114>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00f      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a12      	ldr	r2, [pc, #72]	; (80061ac <TIM_Base_SetConfig+0x124>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a11      	ldr	r2, [pc, #68]	; (80061b0 <TIM_Base_SetConfig+0x128>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <TIM_Base_SetConfig+0x12c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0xf8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a0f      	ldr	r2, [pc, #60]	; (80061b8 <TIM_Base_SetConfig+0x130>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d103      	bne.n	8006188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	615a      	str	r2, [r3, #20]
}
 800618e:	bf00      	nop
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40000400 	.word	0x40000400
 80061a4:	40000800 	.word	0x40000800
 80061a8:	40000c00 	.word	0x40000c00
 80061ac:	40013400 	.word	0x40013400
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400
 80061b8:	40014800 	.word	0x40014800

080061bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e040      	b.n	800628c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fa ff80 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	; 0x24
 8006224:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f992 	bl	8006560 <UART_SetConfig>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e022      	b.n	800628c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fc3e 	bl	8006ad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fcc5 	bl	8006c14 <UART_CheckIdleState>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08a      	sub	sp, #40	; 0x28
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	4613      	mov	r3, r2
 80062a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	f040 8082 	bne.w	80063b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_UART_Transmit+0x26>
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07a      	b.n	80063b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Transmit+0x38>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e073      	b.n	80063b4 <HAL_UART_Transmit+0x120>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2221      	movs	r2, #33	; 0x21
 80062e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e2:	f7fb fda7 	bl	8001e34 <HAL_GetTick>
 80062e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	88fa      	ldrh	r2, [r7, #6]
 80062ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	88fa      	ldrh	r2, [r7, #6]
 80062f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d108      	bne.n	8006314 <HAL_UART_Transmit+0x80>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	e003      	b.n	800631c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006324:	e02d      	b.n	8006382 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2200      	movs	r2, #0
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fcb8 	bl	8006ca6 <UART_WaitOnFlagUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e039      	b.n	80063b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	881a      	ldrh	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006352:	b292      	uxth	r2, r2
 8006354:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	3302      	adds	r3, #2
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	e008      	b.n	8006370 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	b292      	uxth	r2, r2
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	3301      	adds	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1cb      	bne.n	8006326 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	2140      	movs	r1, #64	; 0x40
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 fc84 	bl	8006ca6 <UART_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e005      	b.n	80063b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
  }
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	f040 80bf 	bne.w	8006554 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_UART_Receive+0x26>
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0b7      	b.n	8006556 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_UART_Receive+0x38>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e0b0      	b.n	8006556 <HAL_UART_Receive+0x19a>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2222      	movs	r2, #34	; 0x22
 8006408:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006410:	f7fb fd10 	bl	8001e34 <HAL_GetTick>
 8006414:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	88fa      	ldrh	r2, [r7, #6]
 8006422:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642e:	d10e      	bne.n	800644e <HAL_UART_Receive+0x92>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <HAL_UART_Receive+0x88>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800643e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006442:	e02d      	b.n	80064a0 <HAL_UART_Receive+0xe4>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	22ff      	movs	r2, #255	; 0xff
 8006448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800644c:	e028      	b.n	80064a0 <HAL_UART_Receive+0xe4>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_UART_Receive+0xb6>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <HAL_UART_Receive+0xac>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	22ff      	movs	r2, #255	; 0xff
 8006462:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006466:	e01b      	b.n	80064a0 <HAL_UART_Receive+0xe4>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	227f      	movs	r2, #127	; 0x7f
 800646c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006470:	e016      	b.n	80064a0 <HAL_UART_Receive+0xe4>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800647a:	d10d      	bne.n	8006498 <HAL_UART_Receive+0xdc>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <HAL_UART_Receive+0xd2>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	227f      	movs	r2, #127	; 0x7f
 8006488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800648c:	e008      	b.n	80064a0 <HAL_UART_Receive+0xe4>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	223f      	movs	r2, #63	; 0x3f
 8006492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006496:	e003      	b.n	80064a0 <HAL_UART_Receive+0xe4>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b0:	d108      	bne.n	80064c4 <HAL_UART_Receive+0x108>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	e003      	b.n	80064cc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064d4:	e033      	b.n	800653e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	2120      	movs	r1, #32
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 fbe0 	bl	8006ca6 <UART_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e032      	b.n	8006556 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10c      	bne.n	8006510 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	8a7b      	ldrh	r3, [r7, #18]
 8006500:	4013      	ands	r3, r2
 8006502:	b29a      	uxth	r2, r3
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	3302      	adds	r3, #2
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	e00d      	b.n	800652c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006516:	b29b      	uxth	r3, r3
 8006518:	b2da      	uxtb	r2, r3
 800651a:	8a7b      	ldrh	r3, [r7, #18]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	4013      	ands	r3, r2
 8006520:	b2da      	uxtb	r2, r3
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	3301      	adds	r3, #1
 800652a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1c5      	bne.n	80064d6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e000      	b.n	8006556 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
  }
}
 8006556:	4618      	mov	r0, r3
 8006558:	3720      	adds	r7, #32
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006564:	b08a      	sub	sp, #40	; 0x28
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	431a      	orrs	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	431a      	orrs	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	4313      	orrs	r3, r2
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	4ba4      	ldr	r3, [pc, #656]	; (8006820 <UART_SetConfig+0x2c0>)
 8006590:	4013      	ands	r3, r2
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006598:	430b      	orrs	r3, r1
 800659a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a99      	ldr	r2, [pc, #612]	; (8006824 <UART_SetConfig+0x2c4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c8:	4313      	orrs	r3, r2
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	430a      	orrs	r2, r1
 80065de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a90      	ldr	r2, [pc, #576]	; (8006828 <UART_SetConfig+0x2c8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d126      	bne.n	8006638 <UART_SetConfig+0xd8>
 80065ea:	4b90      	ldr	r3, [pc, #576]	; (800682c <UART_SetConfig+0x2cc>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d81b      	bhi.n	8006630 <UART_SetConfig+0xd0>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <UART_SetConfig+0xa0>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006611 	.word	0x08006611
 8006604:	08006621 	.word	0x08006621
 8006608:	08006619 	.word	0x08006619
 800660c:	08006629 	.word	0x08006629
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006616:	e116      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006618:	2302      	movs	r3, #2
 800661a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661e:	e112      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006620:	2304      	movs	r3, #4
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006626:	e10e      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006628:	2308      	movs	r3, #8
 800662a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800662e:	e10a      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006630:	2310      	movs	r3, #16
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006636:	e106      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a7c      	ldr	r2, [pc, #496]	; (8006830 <UART_SetConfig+0x2d0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d138      	bne.n	80066b4 <UART_SetConfig+0x154>
 8006642:	4b7a      	ldr	r3, [pc, #488]	; (800682c <UART_SetConfig+0x2cc>)
 8006644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006648:	f003 030c 	and.w	r3, r3, #12
 800664c:	2b0c      	cmp	r3, #12
 800664e:	d82d      	bhi.n	80066ac <UART_SetConfig+0x14c>
 8006650:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0xf8>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	0800668d 	.word	0x0800668d
 800665c:	080066ad 	.word	0x080066ad
 8006660:	080066ad 	.word	0x080066ad
 8006664:	080066ad 	.word	0x080066ad
 8006668:	0800669d 	.word	0x0800669d
 800666c:	080066ad 	.word	0x080066ad
 8006670:	080066ad 	.word	0x080066ad
 8006674:	080066ad 	.word	0x080066ad
 8006678:	08006695 	.word	0x08006695
 800667c:	080066ad 	.word	0x080066ad
 8006680:	080066ad 	.word	0x080066ad
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066a5 	.word	0x080066a5
 800668c:	2300      	movs	r3, #0
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006692:	e0d8      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006694:	2302      	movs	r3, #2
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800669a:	e0d4      	b.n	8006846 <UART_SetConfig+0x2e6>
 800669c:	2304      	movs	r3, #4
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	e0d0      	b.n	8006846 <UART_SetConfig+0x2e6>
 80066a4:	2308      	movs	r3, #8
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066aa:	e0cc      	b.n	8006846 <UART_SetConfig+0x2e6>
 80066ac:	2310      	movs	r3, #16
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b2:	e0c8      	b.n	8006846 <UART_SetConfig+0x2e6>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a5e      	ldr	r2, [pc, #376]	; (8006834 <UART_SetConfig+0x2d4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d125      	bne.n	800670a <UART_SetConfig+0x1aa>
 80066be:	4b5b      	ldr	r3, [pc, #364]	; (800682c <UART_SetConfig+0x2cc>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066c8:	2b30      	cmp	r3, #48	; 0x30
 80066ca:	d016      	beq.n	80066fa <UART_SetConfig+0x19a>
 80066cc:	2b30      	cmp	r3, #48	; 0x30
 80066ce:	d818      	bhi.n	8006702 <UART_SetConfig+0x1a2>
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d00a      	beq.n	80066ea <UART_SetConfig+0x18a>
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d814      	bhi.n	8006702 <UART_SetConfig+0x1a2>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <UART_SetConfig+0x182>
 80066dc:	2b10      	cmp	r3, #16
 80066de:	d008      	beq.n	80066f2 <UART_SetConfig+0x192>
 80066e0:	e00f      	b.n	8006702 <UART_SetConfig+0x1a2>
 80066e2:	2300      	movs	r3, #0
 80066e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e8:	e0ad      	b.n	8006846 <UART_SetConfig+0x2e6>
 80066ea:	2302      	movs	r3, #2
 80066ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f0:	e0a9      	b.n	8006846 <UART_SetConfig+0x2e6>
 80066f2:	2304      	movs	r3, #4
 80066f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f8:	e0a5      	b.n	8006846 <UART_SetConfig+0x2e6>
 80066fa:	2308      	movs	r3, #8
 80066fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006700:	e0a1      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006702:	2310      	movs	r3, #16
 8006704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006708:	e09d      	b.n	8006846 <UART_SetConfig+0x2e6>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a4a      	ldr	r2, [pc, #296]	; (8006838 <UART_SetConfig+0x2d8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d125      	bne.n	8006760 <UART_SetConfig+0x200>
 8006714:	4b45      	ldr	r3, [pc, #276]	; (800682c <UART_SetConfig+0x2cc>)
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800671e:	2bc0      	cmp	r3, #192	; 0xc0
 8006720:	d016      	beq.n	8006750 <UART_SetConfig+0x1f0>
 8006722:	2bc0      	cmp	r3, #192	; 0xc0
 8006724:	d818      	bhi.n	8006758 <UART_SetConfig+0x1f8>
 8006726:	2b80      	cmp	r3, #128	; 0x80
 8006728:	d00a      	beq.n	8006740 <UART_SetConfig+0x1e0>
 800672a:	2b80      	cmp	r3, #128	; 0x80
 800672c:	d814      	bhi.n	8006758 <UART_SetConfig+0x1f8>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <UART_SetConfig+0x1d8>
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d008      	beq.n	8006748 <UART_SetConfig+0x1e8>
 8006736:	e00f      	b.n	8006758 <UART_SetConfig+0x1f8>
 8006738:	2300      	movs	r3, #0
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e082      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006740:	2302      	movs	r3, #2
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006746:	e07e      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674e:	e07a      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006756:	e076      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675e:	e072      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a35      	ldr	r2, [pc, #212]	; (800683c <UART_SetConfig+0x2dc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d12a      	bne.n	80067c0 <UART_SetConfig+0x260>
 800676a:	4b30      	ldr	r3, [pc, #192]	; (800682c <UART_SetConfig+0x2cc>)
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006778:	d01a      	beq.n	80067b0 <UART_SetConfig+0x250>
 800677a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800677e:	d81b      	bhi.n	80067b8 <UART_SetConfig+0x258>
 8006780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006784:	d00c      	beq.n	80067a0 <UART_SetConfig+0x240>
 8006786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800678a:	d815      	bhi.n	80067b8 <UART_SetConfig+0x258>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <UART_SetConfig+0x238>
 8006790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006794:	d008      	beq.n	80067a8 <UART_SetConfig+0x248>
 8006796:	e00f      	b.n	80067b8 <UART_SetConfig+0x258>
 8006798:	2300      	movs	r3, #0
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e052      	b.n	8006846 <UART_SetConfig+0x2e6>
 80067a0:	2302      	movs	r3, #2
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a6:	e04e      	b.n	8006846 <UART_SetConfig+0x2e6>
 80067a8:	2304      	movs	r3, #4
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ae:	e04a      	b.n	8006846 <UART_SetConfig+0x2e6>
 80067b0:	2308      	movs	r3, #8
 80067b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b6:	e046      	b.n	8006846 <UART_SetConfig+0x2e6>
 80067b8:	2310      	movs	r3, #16
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067be:	e042      	b.n	8006846 <UART_SetConfig+0x2e6>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a17      	ldr	r2, [pc, #92]	; (8006824 <UART_SetConfig+0x2c4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d13a      	bne.n	8006840 <UART_SetConfig+0x2e0>
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <UART_SetConfig+0x2cc>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067d8:	d01a      	beq.n	8006810 <UART_SetConfig+0x2b0>
 80067da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067de:	d81b      	bhi.n	8006818 <UART_SetConfig+0x2b8>
 80067e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e4:	d00c      	beq.n	8006800 <UART_SetConfig+0x2a0>
 80067e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ea:	d815      	bhi.n	8006818 <UART_SetConfig+0x2b8>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <UART_SetConfig+0x298>
 80067f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f4:	d008      	beq.n	8006808 <UART_SetConfig+0x2a8>
 80067f6:	e00f      	b.n	8006818 <UART_SetConfig+0x2b8>
 80067f8:	2300      	movs	r3, #0
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fe:	e022      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006800:	2302      	movs	r3, #2
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006806:	e01e      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006808:	2304      	movs	r3, #4
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680e:	e01a      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006810:	2308      	movs	r3, #8
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006816:	e016      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006818:	2310      	movs	r3, #16
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681e:	e012      	b.n	8006846 <UART_SetConfig+0x2e6>
 8006820:	efff69f3 	.word	0xefff69f3
 8006824:	40008000 	.word	0x40008000
 8006828:	40013800 	.word	0x40013800
 800682c:	40021000 	.word	0x40021000
 8006830:	40004400 	.word	0x40004400
 8006834:	40004800 	.word	0x40004800
 8006838:	40004c00 	.word	0x40004c00
 800683c:	40005000 	.word	0x40005000
 8006840:	2310      	movs	r3, #16
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a9f      	ldr	r2, [pc, #636]	; (8006ac8 <UART_SetConfig+0x568>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d17a      	bne.n	8006946 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006850:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006854:	2b08      	cmp	r3, #8
 8006856:	d824      	bhi.n	80068a2 <UART_SetConfig+0x342>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <UART_SetConfig+0x300>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006885 	.word	0x08006885
 8006864:	080068a3 	.word	0x080068a3
 8006868:	0800688d 	.word	0x0800688d
 800686c:	080068a3 	.word	0x080068a3
 8006870:	08006893 	.word	0x08006893
 8006874:	080068a3 	.word	0x080068a3
 8006878:	080068a3 	.word	0x080068a3
 800687c:	080068a3 	.word	0x080068a3
 8006880:	0800689b 	.word	0x0800689b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006884:	f7fd f92c 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8006888:	61f8      	str	r0, [r7, #28]
        break;
 800688a:	e010      	b.n	80068ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800688c:	4b8f      	ldr	r3, [pc, #572]	; (8006acc <UART_SetConfig+0x56c>)
 800688e:	61fb      	str	r3, [r7, #28]
        break;
 8006890:	e00d      	b.n	80068ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006892:	f7fd f88d 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8006896:	61f8      	str	r0, [r7, #28]
        break;
 8006898:	e009      	b.n	80068ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689e:	61fb      	str	r3, [r7, #28]
        break;
 80068a0:	e005      	b.n	80068ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 80fb 	beq.w	8006aac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4413      	add	r3, r2
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d305      	bcc.n	80068d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d903      	bls.n	80068da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068d8:	e0e8      	b.n	8006aac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2200      	movs	r2, #0
 80068de:	461c      	mov	r4, r3
 80068e0:	4615      	mov	r5, r2
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	022b      	lsls	r3, r5, #8
 80068ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068f0:	0222      	lsls	r2, r4, #8
 80068f2:	68f9      	ldr	r1, [r7, #12]
 80068f4:	6849      	ldr	r1, [r1, #4]
 80068f6:	0849      	lsrs	r1, r1, #1
 80068f8:	2000      	movs	r0, #0
 80068fa:	4688      	mov	r8, r1
 80068fc:	4681      	mov	r9, r0
 80068fe:	eb12 0a08 	adds.w	sl, r2, r8
 8006902:	eb43 0b09 	adc.w	fp, r3, r9
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	603b      	str	r3, [r7, #0]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006914:	4650      	mov	r0, sl
 8006916:	4659      	mov	r1, fp
 8006918:	f7f9 fcb2 	bl	8000280 <__aeabi_uldivmod>
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	4613      	mov	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800692a:	d308      	bcc.n	800693e <UART_SetConfig+0x3de>
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006932:	d204      	bcs.n	800693e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	60da      	str	r2, [r3, #12]
 800693c:	e0b6      	b.n	8006aac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006944:	e0b2      	b.n	8006aac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694e:	d15e      	bne.n	8006a0e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006954:	2b08      	cmp	r3, #8
 8006956:	d828      	bhi.n	80069aa <UART_SetConfig+0x44a>
 8006958:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <UART_SetConfig+0x400>)
 800695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695e:	bf00      	nop
 8006960:	08006985 	.word	0x08006985
 8006964:	0800698d 	.word	0x0800698d
 8006968:	08006995 	.word	0x08006995
 800696c:	080069ab 	.word	0x080069ab
 8006970:	0800699b 	.word	0x0800699b
 8006974:	080069ab 	.word	0x080069ab
 8006978:	080069ab 	.word	0x080069ab
 800697c:	080069ab 	.word	0x080069ab
 8006980:	080069a3 	.word	0x080069a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006984:	f7fd f8ac 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8006988:	61f8      	str	r0, [r7, #28]
        break;
 800698a:	e014      	b.n	80069b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800698c:	f7fd f8be 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 8006990:	61f8      	str	r0, [r7, #28]
        break;
 8006992:	e010      	b.n	80069b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006994:	4b4d      	ldr	r3, [pc, #308]	; (8006acc <UART_SetConfig+0x56c>)
 8006996:	61fb      	str	r3, [r7, #28]
        break;
 8006998:	e00d      	b.n	80069b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800699a:	f7fd f809 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 800699e:	61f8      	str	r0, [r7, #28]
        break;
 80069a0:	e009      	b.n	80069b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a6:	61fb      	str	r3, [r7, #28]
        break;
 80069a8:	e005      	b.n	80069b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d077      	beq.n	8006aac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	005a      	lsls	r2, r3, #1
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	441a      	add	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b0f      	cmp	r3, #15
 80069d6:	d916      	bls.n	8006a06 <UART_SetConfig+0x4a6>
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069de:	d212      	bcs.n	8006a06 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f023 030f 	bic.w	r3, r3, #15
 80069e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	085b      	lsrs	r3, r3, #1
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	8afb      	ldrh	r3, [r7, #22]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	8afa      	ldrh	r2, [r7, #22]
 8006a02:	60da      	str	r2, [r3, #12]
 8006a04:	e052      	b.n	8006aac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a0c:	e04e      	b.n	8006aac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d827      	bhi.n	8006a66 <UART_SetConfig+0x506>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x4bc>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a51 	.word	0x08006a51
 8006a28:	08006a67 	.word	0x08006a67
 8006a2c:	08006a57 	.word	0x08006a57
 8006a30:	08006a67 	.word	0x08006a67
 8006a34:	08006a67 	.word	0x08006a67
 8006a38:	08006a67 	.word	0x08006a67
 8006a3c:	08006a5f 	.word	0x08006a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fd f84e 	bl	8003ae0 <HAL_RCC_GetPCLK1Freq>
 8006a44:	61f8      	str	r0, [r7, #28]
        break;
 8006a46:	e014      	b.n	8006a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a48:	f7fd f860 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 8006a4c:	61f8      	str	r0, [r7, #28]
        break;
 8006a4e:	e010      	b.n	8006a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a50:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <UART_SetConfig+0x56c>)
 8006a52:	61fb      	str	r3, [r7, #28]
        break;
 8006a54:	e00d      	b.n	8006a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a56:	f7fc ffab 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8006a5a:	61f8      	str	r0, [r7, #28]
        break;
 8006a5c:	e009      	b.n	8006a72 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a62:	61fb      	str	r3, [r7, #28]
        break;
 8006a64:	e005      	b.n	8006a72 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a70:	bf00      	nop
    }

    if (pclk != 0U)
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d019      	beq.n	8006aac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	085a      	lsrs	r2, r3, #1
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	441a      	add	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	d909      	bls.n	8006aa6 <UART_SetConfig+0x546>
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a98:	d205      	bcs.n	8006aa6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	60da      	str	r2, [r3, #12]
 8006aa4:	e002      	b.n	8006aac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ab8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3728      	adds	r7, #40	; 0x28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac6:	bf00      	nop
 8006ac8:	40008000 	.word	0x40008000
 8006acc:	00f42400 	.word	0x00f42400

08006ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01a      	beq.n	8006be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bce:	d10a      	bne.n	8006be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	430a      	orrs	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	605a      	str	r2, [r3, #4]
  }
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c24:	f7fb f906 	bl	8001e34 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d10e      	bne.n	8006c56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f82d 	bl	8006ca6 <UART_WaitOnFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e023      	b.n	8006c9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d10e      	bne.n	8006c82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f817 	bl	8006ca6 <UART_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e00d      	b.n	8006c9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b09c      	sub	sp, #112	; 0x70
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb6:	e0a5      	b.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbe:	f000 80a1 	beq.w	8006e04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc2:	f7fb f8b7 	bl	8001e34 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d302      	bcc.n	8006cd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d13e      	bne.n	8006d56 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cec:	667b      	str	r3, [r7, #100]	; 0x64
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e6      	bne.n	8006cd8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	663b      	str	r3, [r7, #96]	; 0x60
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e067      	b.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d04f      	beq.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d72:	d147      	bne.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d7c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e6      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dd0:	623a      	str	r2, [r7, #32]
 8006dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	69f9      	ldr	r1, [r7, #28]
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e5      	bne.n	8006db0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e010      	b.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	69da      	ldr	r2, [r3, #28]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	bf0c      	ite	eq
 8006e14:	2301      	moveq	r3, #1
 8006e16:	2300      	movne	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	f43f af4a 	beq.w	8006cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3770      	adds	r7, #112	; 0x70
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e2e:	b084      	sub	sp, #16
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	f107 001c 	add.w	r0, r7, #28
 8006e3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fa6b 	bl	8007328 <USB_CoreReset>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
 8006e68:	e005      	b.n	8006e76 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e82:	b004      	add	sp, #16
 8006e84:	4770      	bx	lr

08006e86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f023 0201 	bic.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d115      	bne.n	8006ef6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f7fa ffb8 	bl	8001e4c <HAL_Delay>
      ms++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa12 	bl	800730c <USB_GetMode>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d01e      	beq.n	8006f2c <USB_SetCurrentMode+0x84>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b31      	cmp	r3, #49	; 0x31
 8006ef2:	d9f0      	bls.n	8006ed6 <USB_SetCurrentMode+0x2e>
 8006ef4:	e01a      	b.n	8006f2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d115      	bne.n	8006f28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f08:	2001      	movs	r0, #1
 8006f0a:	f7fa ff9f 	bl	8001e4c <HAL_Delay>
      ms++;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f9f9 	bl	800730c <USB_GetMode>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <USB_SetCurrentMode+0x84>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b31      	cmp	r3, #49	; 0x31
 8006f24:	d9f0      	bls.n	8006f08 <USB_SetCurrentMode+0x60>
 8006f26:	e001      	b.n	8006f2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e005      	b.n	8006f38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b32      	cmp	r3, #50	; 0x32
 8006f30:	d101      	bne.n	8006f36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f40:	b084      	sub	sp, #16
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	e009      	b.n	8006f74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3340      	adds	r3, #64	; 0x40
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	3301      	adds	r3, #1
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b0e      	cmp	r3, #14
 8006f78:	d9f2      	bls.n	8006f60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d11c      	bne.n	8006fba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f8e:	f043 0302 	orr.w	r3, r3, #2
 8006f92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e005      	b.n	8006fc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd8:	4619      	mov	r1, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	680b      	ldr	r3, [r1, #0]
 8006fe4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fe6:	2103      	movs	r1, #3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f955 	bl	8007298 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fee:	2110      	movs	r1, #16
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f8f1 	bl	80071d8 <USB_FlushTxFifo>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f91b 	bl	800723c <USB_FlushRxFifo>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007016:	461a      	mov	r2, r3
 8007018:	2300      	movs	r3, #0
 800701a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007022:	461a      	mov	r2, r3
 8007024:	2300      	movs	r3, #0
 8007026:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	461a      	mov	r2, r3
 8007030:	2300      	movs	r3, #0
 8007032:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	e043      	b.n	80070c2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800704c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007050:	d118      	bne.n	8007084 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	461a      	mov	r2, r3
 8007066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e013      	b.n	8007096 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	461a      	mov	r2, r3
 800707c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e008      	b.n	8007096 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	461a      	mov	r2, r3
 8007092:	2300      	movs	r3, #0
 8007094:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	461a      	mov	r2, r3
 80070a4:	2300      	movs	r3, #0
 80070a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b4:	461a      	mov	r2, r3
 80070b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	3301      	adds	r3, #1
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d3b7      	bcc.n	800703a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	e043      	b.n	8007158 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e6:	d118      	bne.n	800711a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fa:	461a      	mov	r2, r3
 80070fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e013      	b.n	800712c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	461a      	mov	r2, r3
 8007112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	e008      	b.n	800712c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007126:	461a      	mov	r2, r3
 8007128:	2300      	movs	r3, #0
 800712a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	461a      	mov	r2, r3
 800713a:	2300      	movs	r3, #0
 800713c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714a:	461a      	mov	r2, r3
 800714c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	3301      	adds	r3, #1
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	429a      	cmp	r2, r3
 800715e:	d3b7      	bcc.n	80070d0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800716e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007172:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007180:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	f043 0210 	orr.w	r2, r3, #16
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	4b10      	ldr	r3, [pc, #64]	; (80071d4 <USB_DevInit+0x294>)
 8007194:	4313      	orrs	r3, r2
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800719a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d005      	beq.n	80071ac <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	f043 0208 	orr.w	r2, r3, #8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d107      	bne.n	80071c2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ba:	f043 0304 	orr.w	r3, r3, #4
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071ce:	b004      	add	sp, #16
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	803c3800 	.word	0x803c3800

080071d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	4a12      	ldr	r2, [pc, #72]	; (8007238 <USB_FlushTxFifo+0x60>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d901      	bls.n	80071f6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e01a      	b.n	800722c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	daf3      	bge.n	80071e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	019b      	lsls	r3, r3, #6
 8007206:	f043 0220 	orr.w	r2, r3, #32
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3301      	adds	r3, #1
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	4a08      	ldr	r2, [pc, #32]	; (8007238 <USB_FlushTxFifo+0x60>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d901      	bls.n	800721e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e006      	b.n	800722c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b20      	cmp	r3, #32
 8007228:	d0f1      	beq.n	800720e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	00030d40 	.word	0x00030d40

0800723c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	4a11      	ldr	r2, [pc, #68]	; (8007294 <USB_FlushRxFifo+0x58>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e017      	b.n	8007288 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b00      	cmp	r3, #0
 800725e:	daf3      	bge.n	8007248 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2210      	movs	r2, #16
 8007268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	4a08      	ldr	r2, [pc, #32]	; (8007294 <USB_FlushRxFifo+0x58>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e006      	b.n	8007288 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b10      	cmp	r3, #16
 8007284:	d0f1      	beq.n	800726a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	00030d40 	.word	0x00030d40

08007298 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b8:	4313      	orrs	r3, r2
 80072ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	f003 0301 	and.w	r3, r3, #1
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	4a13      	ldr	r2, [pc, #76]	; (8007388 <USB_CoreReset+0x60>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e01a      	b.n	800737a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	daf3      	bge.n	8007334 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f043 0201 	orr.w	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	4a09      	ldr	r2, [pc, #36]	; (8007388 <USB_CoreReset+0x60>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d901      	bls.n	800736c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e006      	b.n	800737a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b01      	cmp	r3, #1
 8007376:	d0f1      	beq.n	800735c <USB_CoreReset+0x34>

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	00030d40 	.word	0x00030d40

0800738c <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b2f      	cmp	r3, #47	; 0x2f
 800739a:	d906      	bls.n	80073aa <Hex2Num+0x1e>
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	2b39      	cmp	r3, #57	; 0x39
 80073a0:	d803      	bhi.n	80073aa <Hex2Num+0x1e>
        return a - '0';
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	3b30      	subs	r3, #48	; 0x30
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	e014      	b.n	80073d4 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	2b60      	cmp	r3, #96	; 0x60
 80073ae:	d906      	bls.n	80073be <Hex2Num+0x32>
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	2b66      	cmp	r3, #102	; 0x66
 80073b4:	d803      	bhi.n	80073be <Hex2Num+0x32>
        return (a - 'a') + 10;
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	3b57      	subs	r3, #87	; 0x57
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	e00a      	b.n	80073d4 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	2b40      	cmp	r3, #64	; 0x40
 80073c2:	d906      	bls.n	80073d2 <Hex2Num+0x46>
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	2b46      	cmp	r3, #70	; 0x46
 80073c8:	d803      	bhi.n	80073d2 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	3b37      	subs	r3, #55	; 0x37
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	e000      	b.n	80073d4 <Hex2Num+0x48>
    }

    return 0;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80073f2:	e012      	b.n	800741a <ParseHexNumber+0x3a>
        sum <<= 4;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff ffc4 	bl	800738c <Hex2Num>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]
        ptr++;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3301      	adds	r3, #1
 8007412:	607b      	str	r3, [r7, #4]
        i++;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	3301      	adds	r3, #1
 8007418:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b2f      	cmp	r3, #47	; 0x2f
 8007420:	d903      	bls.n	800742a <ParseHexNumber+0x4a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b39      	cmp	r3, #57	; 0x39
 8007428:	d9e4      	bls.n	80073f4 <ParseHexNumber+0x14>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b60      	cmp	r3, #96	; 0x60
 8007430:	d903      	bls.n	800743a <ParseHexNumber+0x5a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b66      	cmp	r3, #102	; 0x66
 8007438:	d9dc      	bls.n	80073f4 <ParseHexNumber+0x14>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d903      	bls.n	800744a <ParseHexNumber+0x6a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b46      	cmp	r3, #70	; 0x46
 8007448:	d9d4      	bls.n	80073f4 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <ParseHexNumber+0x76>
        *cnt = i;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	7afa      	ldrb	r2, [r7, #11]
 8007454:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	2300      	movs	r3, #0
 8007470:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b2d      	cmp	r3, #45	; 0x2d
 800747c:	d119      	bne.n	80074b2 <ParseNumber+0x52>
        minus = 1;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3301      	adds	r3, #1
 8007486:	607b      	str	r3, [r7, #4]
        i++;
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	3301      	adds	r3, #1
 800748c:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800748e:	e010      	b.n	80074b2 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	3b30      	subs	r3, #48	; 0x30
 80074a2:	4413      	add	r3, r2
 80074a4:	60bb      	str	r3, [r7, #8]
        ptr++;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3301      	adds	r3, #1
 80074aa:	607b      	str	r3, [r7, #4]
        i++;
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	3301      	adds	r3, #1
 80074b0:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	2b2f      	cmp	r3, #47	; 0x2f
 80074b8:	d903      	bls.n	80074c2 <ParseNumber+0x62>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b39      	cmp	r3, #57	; 0x39
 80074c0:	d9e6      	bls.n	8007490 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <ParseNumber+0x6e>
        *cnt = i;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	7bba      	ldrb	r2, [r7, #14]
 80074cc:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <ParseNumber+0x7a>
        return 0 - sum;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	425b      	negs	r3, r3
 80074d8:	e000      	b.n	80074dc <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80074da:	68bb      	ldr	r3, [r7, #8]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80074f6:	e019      	b.n	800752c <ParseMAC+0x44>
    hexcnt = 1;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b3a      	cmp	r3, #58	; 0x3a
 8007502:	d00e      	beq.n	8007522 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007504:	f107 030e 	add.w	r3, r7, #14
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff ff68 	bl	80073e0 <ParseHexNumber>
 8007510:	4601      	mov	r1, r0
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	73fa      	strb	r2, [r7, #15]
 8007518:	461a      	mov	r2, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	4413      	add	r3, r2
 800751e:	b2ca      	uxtb	r2, r1
 8007520:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e1      	bne.n	80074f8 <ParseMAC+0x10>
  }
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800754c:	e019      	b.n	8007582 <ParseIP+0x44>
    hexcnt = 1;
 800754e:	2301      	movs	r3, #1
 8007550:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b2e      	cmp	r3, #46	; 0x2e
 8007558:	d00e      	beq.n	8007578 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800755a:	f107 030e 	add.w	r3, r7, #14
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ff7d 	bl	8007460 <ParseNumber>
 8007566:	4601      	mov	r1, r0
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	73fa      	strb	r2, [r7, #15]
 800756e:	461a      	mov	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	4413      	add	r3, r2
 8007574:	b2ca      	uxtb	r2, r1
 8007576:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	461a      	mov	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4413      	add	r3, r2
 8007580:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e1      	bne.n	800754e <ParseIP+0x10>
  }
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	3302      	adds	r3, #2
 80075a6:	4934      	ldr	r1, [pc, #208]	; (8007678 <AT_ParseInfo+0xe4>)
 80075a8:	4618      	mov	r0, r3
 80075aa:	f005 f8a1 	bl	800c6f0 <strtok>
 80075ae:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80075b0:	e05a      	b.n	8007668 <AT_ParseInfo+0xd4>
    switch (num++) {
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	72fa      	strb	r2, [r7, #11]
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	d84f      	bhi.n	800765c <AT_ParseInfo+0xc8>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <AT_ParseInfo+0x30>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075ef 	.word	0x080075ef
 80075cc:	080075ff 	.word	0x080075ff
 80075d0:	0800760f 	.word	0x0800760f
 80075d4:	0800761f 	.word	0x0800761f
 80075d8:	0800762f 	.word	0x0800762f
 80075dc:	08007643 	.word	0x08007643
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	68f9      	ldr	r1, [r7, #12]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f005 f858 	bl	800c69c <strncpy>
      break;
 80075ec:	e037      	b.n	800765e <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3320      	adds	r3, #32
 80075f2:	2218      	movs	r2, #24
 80075f4:	68f9      	ldr	r1, [r7, #12]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f005 f850 	bl	800c69c <strncpy>
      break;
 80075fc:	e02f      	b.n	800765e <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3338      	adds	r3, #56	; 0x38
 8007602:	2210      	movs	r2, #16
 8007604:	68f9      	ldr	r1, [r7, #12]
 8007606:	4618      	mov	r0, r3
 8007608:	f005 f848 	bl	800c69c <strncpy>
      break;
 800760c:	e027      	b.n	800765e <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3348      	adds	r3, #72	; 0x48
 8007612:	2210      	movs	r2, #16
 8007614:	68f9      	ldr	r1, [r7, #12]
 8007616:	4618      	mov	r0, r3
 8007618:	f005 f840 	bl	800c69c <strncpy>
      break;
 800761c:	e01f      	b.n	800765e <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3358      	adds	r3, #88	; 0x58
 8007622:	2210      	movs	r2, #16
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	4618      	mov	r0, r3
 8007628:	f005 f838 	bl	800c69c <strncpy>
      break;
 800762c:	e017      	b.n	800765e <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800762e:	2100      	movs	r1, #0
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff ff15 	bl	8007460 <ParseNumber>
 8007636:	4603      	mov	r3, r0
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8007640:	e00d      	b.n	800765e <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8007642:	490e      	ldr	r1, [pc, #56]	; (800767c <AT_ParseInfo+0xe8>)
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f005 f853 	bl	800c6f0 <strtok>
 800764a:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3368      	adds	r3, #104	; 0x68
 8007650:	2220      	movs	r2, #32
 8007652:	68f9      	ldr	r1, [r7, #12]
 8007654:	4618      	mov	r0, r3
 8007656:	f005 f821 	bl	800c69c <strncpy>
      break;
 800765a:	e000      	b.n	800765e <AT_ParseInfo+0xca>

    default: break;
 800765c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800765e:	4906      	ldr	r1, [pc, #24]	; (8007678 <AT_ParseInfo+0xe4>)
 8007660:	2000      	movs	r0, #0
 8007662:	f005 f845 	bl	800c6f0 <strtok>
 8007666:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1a1      	bne.n	80075b2 <AT_ParseInfo+0x1e>
  }
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	0800dce8 	.word	0x0800dce8
 800767c:	0800dcec 	.word	0x0800dcec

08007680 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3302      	adds	r3, #2
 8007692:	4952      	ldr	r1, [pc, #328]	; (80077dc <AT_ParseConnSettings+0x15c>)
 8007694:	4618      	mov	r0, r3
 8007696:	f005 f82b 	bl	800c6f0 <strtok>
 800769a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800769c:	e095      	b.n	80077ca <AT_ParseConnSettings+0x14a>
    switch (num++) {
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	73fa      	strb	r2, [r7, #15]
 80076a4:	2b0b      	cmp	r3, #11
 80076a6:	d87f      	bhi.n	80077a8 <AT_ParseConnSettings+0x128>
 80076a8:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <AT_ParseConnSettings+0x30>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076ef 	.word	0x080076ef
 80076b8:	080076ff 	.word	0x080076ff
 80076bc:	08007713 	.word	0x08007713
 80076c0:	08007727 	.word	0x08007727
 80076c4:	0800773b 	.word	0x0800773b
 80076c8:	08007749 	.word	0x08007749
 80076cc:	08007757 	.word	0x08007757
 80076d0:	08007765 	.word	0x08007765
 80076d4:	08007773 	.word	0x08007773
 80076d8:	08007781 	.word	0x08007781
 80076dc:	08007795 	.word	0x08007795
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2221      	movs	r2, #33	; 0x21
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f004 ffd8 	bl	800c69c <strncpy>
      break;
 80076ec:	e05d      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	3321      	adds	r3, #33	; 0x21
 80076f2:	2221      	movs	r2, #33	; 0x21
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f004 ffd0 	bl	800c69c <strncpy>
      break;
 80076fc:	e055      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80076fe:	2100      	movs	r1, #0
 8007700:	68b8      	ldr	r0, [r7, #8]
 8007702:	f7ff fead 	bl	8007460 <ParseNumber>
 8007706:	4603      	mov	r3, r0
 8007708:	b2da      	uxtb	r2, r3
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8007710:	e04b      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8007712:	2100      	movs	r1, #0
 8007714:	68b8      	ldr	r0, [r7, #8]
 8007716:	f7ff fea3 	bl	8007460 <ParseNumber>
 800771a:	4603      	mov	r3, r0
 800771c:	b2da      	uxtb	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8007724:	e041      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8007726:	2100      	movs	r1, #0
 8007728:	68b8      	ldr	r0, [r7, #8]
 800772a:	f7ff fe99 	bl	8007460 <ParseNumber>
 800772e:	4603      	mov	r3, r0
 8007730:	b2da      	uxtb	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8007738:	e037      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	3348      	adds	r3, #72	; 0x48
 800773e:	4619      	mov	r1, r3
 8007740:	68b8      	ldr	r0, [r7, #8]
 8007742:	f7ff fefc 	bl	800753e <ParseIP>
      break;
 8007746:	e030      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	334c      	adds	r3, #76	; 0x4c
 800774c:	4619      	mov	r1, r3
 800774e:	68b8      	ldr	r0, [r7, #8]
 8007750:	f7ff fef5 	bl	800753e <ParseIP>
      break;
 8007754:	e029      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	3350      	adds	r3, #80	; 0x50
 800775a:	4619      	mov	r1, r3
 800775c:	68b8      	ldr	r0, [r7, #8]
 800775e:	f7ff feee 	bl	800753e <ParseIP>
      break;
 8007762:	e022      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	3354      	adds	r3, #84	; 0x54
 8007768:	4619      	mov	r1, r3
 800776a:	68b8      	ldr	r0, [r7, #8]
 800776c:	f7ff fee7 	bl	800753e <ParseIP>
      break;
 8007770:	e01b      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	3358      	adds	r3, #88	; 0x58
 8007776:	4619      	mov	r1, r3
 8007778:	68b8      	ldr	r0, [r7, #8]
 800777a:	f7ff fee0 	bl	800753e <ParseIP>
      break;
 800777e:	e014      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8007780:	2100      	movs	r1, #0
 8007782:	68b8      	ldr	r0, [r7, #8]
 8007784:	f7ff fe6c 	bl	8007460 <ParseNumber>
 8007788:	4603      	mov	r3, r0
 800778a:	b2da      	uxtb	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8007792:	e00a      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8007794:	2100      	movs	r1, #0
 8007796:	68b8      	ldr	r0, [r7, #8]
 8007798:	f7ff fe62 	bl	8007460 <ParseNumber>
 800779c:	4603      	mov	r3, r0
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80077a6:	e000      	b.n	80077aa <AT_ParseConnSettings+0x12a>

    default:
      break;
 80077a8:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80077aa:	490c      	ldr	r1, [pc, #48]	; (80077dc <AT_ParseConnSettings+0x15c>)
 80077ac:	2000      	movs	r0, #0
 80077ae:	f004 ff9f 	bl	800c6f0 <strtok>
 80077b2:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <AT_ParseConnSettings+0x14a>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	3b01      	subs	r3, #1
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b2c      	cmp	r3, #44	; 0x2c
 80077c2:	d102      	bne.n	80077ca <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	3301      	adds	r3, #1
 80077c8:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f47f af66 	bne.w	800769e <AT_ParseConnSettings+0x1e>
    }
  }
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	0800dce8 	.word	0x0800dce8

080077e0 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3302      	adds	r3, #2
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b31      	cmp	r3, #49	; 0x31
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	461a      	mov	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	701a      	strb	r2, [r3, #0]
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007826:	68b8      	ldr	r0, [r7, #8]
 8007828:	f7f8 fcd2 	bl	80001d0 <strlen>
 800782c:	4603      	mov	r3, r0
 800782e:	b299      	uxth	r1, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007836:	461a      	mov	r2, r3
 8007838:	68b8      	ldr	r0, [r7, #8]
 800783a:	47a0      	blx	r4
 800783c:	4603      	mov	r3, r0
 800783e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd3e      	ble.n	80078c4 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007852:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
 800785a:	4603      	mov	r3, r0
 800785c:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800785e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007862:	2b00      	cmp	r3, #0
 8007864:	dd27      	ble.n	80078b6 <AT_ExecuteCommand+0xaa>
 8007866:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800786a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800786e:	dc22      	bgt.n	80078b6 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8007870:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007874:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007878:	d105      	bne.n	8007886 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 800787a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29b      	uxth	r3, r3
 8007884:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8007886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4413      	add	r3, r2
 800788e:	2200      	movs	r2, #0
 8007890:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8007892:	490f      	ldr	r1, [pc, #60]	; (80078d0 <AT_ExecuteCommand+0xc4>)
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f004 ff14 	bl	800c6c2 <strstr>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e010      	b.n	80078c6 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80078a4:	490b      	ldr	r1, [pc, #44]	; (80078d4 <AT_ExecuteCommand+0xc8>)
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f004 ff0b 	bl	800c6c2 <strstr>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80078b2:	2305      	movs	r3, #5
 80078b4:	e007      	b.n	80078c6 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80078b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80078ba:	f113 0f04 	cmn.w	r3, #4
 80078be:	d101      	bne.n	80078c4 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80078c0:	2306      	movs	r3, #6
 80078c2:	e000      	b.n	80078c6 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80078c4:	2304      	movs	r3, #4
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	0800dcfc 	.word	0x0800dcfc
 80078d4:	0800dd08 	.word	0x0800dd08

080078d8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 80078f2:	68b8      	ldr	r0, [r7, #8]
 80078f4:	f7f8 fc6c 	bl	80001d0 <strlen>
 80078f8:	4603      	mov	r3, r0
 80078fa:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80078fc:	8a7b      	ldrh	r3, [r7, #18]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <AT_RequestSendData+0x32>
 8007906:	2302      	movs	r3, #2
 8007908:	e053      	b.n	80079b2 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007916:	8a79      	ldrh	r1, [r7, #18]
 8007918:	68b8      	ldr	r0, [r7, #8]
 800791a:	4798      	blx	r3
 800791c:	4603      	mov	r3, r0
 800791e:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8007920:	8a3a      	ldrh	r2, [r7, #16]
 8007922:	8a7b      	ldrh	r3, [r7, #18]
 8007924:	429a      	cmp	r2, r3
 8007926:	d143      	bne.n	80079b0 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007934:	8879      	ldrh	r1, [r7, #2]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	4798      	blx	r3
 800793a:	4603      	mov	r3, r0
 800793c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800793e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007942:	887b      	ldrh	r3, [r7, #2]
 8007944:	429a      	cmp	r2, r3
 8007946:	d131      	bne.n	80079ac <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007954:	2100      	movs	r1, #0
 8007956:	6a38      	ldr	r0, [r7, #32]
 8007958:	4798      	blx	r3
 800795a:	4603      	mov	r3, r0
 800795c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800795e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	dd19      	ble.n	800799a <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8007966:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800796a:	6a3a      	ldr	r2, [r7, #32]
 800796c:	4413      	add	r3, r2
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8007972:	4912      	ldr	r1, [pc, #72]	; (80079bc <AT_RequestSendData+0xe4>)
 8007974:	6a38      	ldr	r0, [r7, #32]
 8007976:	f004 fea4 	bl	800c6c2 <strstr>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e016      	b.n	80079b2 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8007984:	490e      	ldr	r1, [pc, #56]	; (80079c0 <AT_RequestSendData+0xe8>)
 8007986:	6a38      	ldr	r0, [r7, #32]
 8007988:	f004 fe9b 	bl	800c6c2 <strstr>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007992:	2305      	movs	r3, #5
 8007994:	e00d      	b.n	80079b2 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8007996:	2302      	movs	r3, #2
 8007998:	e00b      	b.n	80079b2 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800799a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800799e:	f113 0f04 	cmn.w	r3, #4
 80079a2:	d101      	bne.n	80079a8 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80079a4:	2306      	movs	r3, #6
 80079a6:	e004      	b.n	80079b2 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80079a8:	2302      	movs	r3, #2
 80079aa:	e002      	b.n	80079b2 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80079ac:	2302      	movs	r3, #2
 80079ae:	e000      	b.n	80079b2 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80079b0:	2304      	movs	r3, #4
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	0800dcfc 	.word	0x0800dcfc
 80079c0:	0800dd08 	.word	0x0800dd08

080079c4 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80079c4:	b590      	push	{r4, r7, lr}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80079d8:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80079e0:	68b8      	ldr	r0, [r7, #8]
 80079e2:	f7f8 fbf5 	bl	80001d0 <strlen>
 80079e6:	4603      	mov	r3, r0
 80079e8:	b299      	uxth	r1, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80079f0:	461a      	mov	r2, r3
 80079f2:	68b8      	ldr	r0, [r7, #8]
 80079f4:	47a0      	blx	r4
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	dd6f      	ble.n	8007adc <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007a08:	2100      	movs	r1, #0
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	4798      	blx	r3
 8007a0e:	4603      	mov	r3, r0
 8007a10:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b0d      	cmp	r3, #13
 8007a18:	d104      	bne.n	8007a24 <AT_RequestReceiveData+0x60>
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b0a      	cmp	r3, #10
 8007a22:	d001      	beq.n	8007a28 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8007a24:	2304      	movs	r3, #4
 8007a26:	e05a      	b.n	8007ade <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	3b02      	subs	r3, #2
 8007a2c:	617b      	str	r3, [r7, #20]
    p+=2;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	3302      	adds	r3, #2
 8007a32:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b07      	cmp	r3, #7
 8007a38:	d94a      	bls.n	8007ad0 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8007a3a:	e002      	b.n	8007a42 <AT_RequestReceiveData+0x7e>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d006      	beq.n	8007a56 <AT_RequestReceiveData+0x92>
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b15      	cmp	r3, #21
 8007a54:	d0f2      	beq.n	8007a3c <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	3b08      	subs	r3, #8
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4413      	add	r3, r2
 8007a68:	491f      	ldr	r1, [pc, #124]	; (8007ae8 <AT_RequestReceiveData+0x124>)
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f004 fe29 	bl	800c6c2 <strstr>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b08      	subs	r3, #8
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	887a      	ldrh	r2, [r7, #2]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d202      	bcs.n	8007a92 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	887a      	ldrh	r2, [r7, #2]
 8007a90:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	6939      	ldr	r1, [r7, #16]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f004 fb7a 	bl	800c194 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	e01c      	b.n	8007ade <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	3b04      	subs	r3, #4
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4413      	add	r3, r2
 8007aac:	2204      	movs	r2, #4
 8007aae:	490f      	ldr	r1, [pc, #60]	; (8007aec <AT_RequestReceiveData+0x128>)
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f004 fb5f 	bl	800c174 <memcmp>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	2200      	movs	r2, #0
 8007ac0:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007ac2:	2305      	movs	r3, #5
 8007ac4:	e00b      	b.n	8007ade <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	2200      	movs	r2, #0
 8007aca:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007acc:	2305      	movs	r3, #5
 8007ace:	e006      	b.n	8007ade <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f113 0f04 	cmn.w	r3, #4
 8007ad6:	d101      	bne.n	8007adc <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 8007ad8:	2306      	movs	r3, #6
 8007ada:	e000      	b.n	8007ade <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8007adc:	2304      	movs	r3, #4
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd90      	pop	{r4, r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	0800dcfc 	.word	0x0800dcfc
 8007aec:	0800dd10 	.word	0x0800dd10

08007af0 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007af8:	2302      	movs	r3, #2
 8007afa:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f247 5230 	movw	r2, #30000	; 0x7530
 8007b02:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	4798      	blx	r3
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d113      	bne.n	8007b3e <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	490a      	ldr	r1, [pc, #40]	; (8007b48 <ES_WIFI_Init+0x58>)
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7ff fe73 	bl	800780c <AT_ExecuteCommand>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff fd2b 	bl	8007594 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	0800dd18 	.word	0x0800dd18

08007b4c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <ES_WIFI_RegisterBusIO+0x2c>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d008      	beq.n	8007b78 <ES_WIFI_RegisterBusIO+0x2c>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <ES_WIFI_RegisterBusIO+0x2c>
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <ES_WIFI_RegisterBusIO+0x2c>
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e014      	b.n	8007ba6 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4932      	ldr	r1, [pc, #200]	; (8007c94 <ES_WIFI_Connect+0xe0>)
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f004 fcdf 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007bde:	461a      	mov	r2, r3
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff fe13 	bl	800780c <AT_ExecuteCommand>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d14b      	bne.n	8007c88 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4927      	ldr	r1, [pc, #156]	; (8007c98 <ES_WIFI_Connect+0xe4>)
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f004 fcc8 	bl	800c590 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff fdfc 	bl	800780c <AT_ExecuteCommand>
 8007c14:	4603      	mov	r3, r0
 8007c16:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d134      	bne.n	8007c88 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	78fa      	ldrb	r2, [r7, #3]
 8007c22:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	491b      	ldr	r1, [pc, #108]	; (8007c9c <ES_WIFI_Connect+0xe8>)
 8007c30:	4618      	mov	r0, r3
 8007c32:	f004 fcad 	bl	800c590 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c42:	461a      	mov	r2, r3
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff fde1 	bl	800780c <AT_ExecuteCommand>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d119      	bne.n	8007c88 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c5a:	4911      	ldr	r1, [pc, #68]	; (8007ca0 <ES_WIFI_Connect+0xec>)
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f004 fc97 	bl	800c590 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff fdcb 	bl	800780c <AT_ExecuteCommand>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d103      	bne.n	8007c88 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	0800dd30 	.word	0x0800dd30
 8007c98:	0800dd38 	.word	0x0800dd38
 8007c9c:	0800dd40 	.word	0x0800dd40
 8007ca0:	0800dd48 	.word	0x0800dd48

08007ca4 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007cb2:	4911      	ldr	r1, [pc, #68]	; (8007cf8 <ES_WIFI_IsConnected+0x54>)
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f004 fc6b 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff fd9f 	bl	800780c <AT_ExecuteCommand>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d108      	bne.n	8007cea <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	33d2      	adds	r3, #210	; 0xd2
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7ff fd7b 	bl	80077e0 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	0800dd4c 	.word	0x0800dd4c

08007cfc <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d0a:	4910      	ldr	r1, [pc, #64]	; (8007d4c <ES_WIFI_GetNetworkSettings+0x50>)
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f004 fc3f 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fd73 	bl	800780c <AT_ExecuteCommand>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d108      	bne.n	8007d42 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	338d      	adds	r3, #141	; 0x8d
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	f7ff fc9f 	bl	8007680 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	0800dd54 	.word	0x0800dd54

08007d50 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d60:	4912      	ldr	r1, [pc, #72]	; (8007dac <ES_WIFI_GetMACAddress+0x5c>)
 8007d62:	4618      	mov	r0, r3
 8007d64:	f004 fc14 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d74:	461a      	mov	r2, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff fd48 	bl	800780c <AT_ExecuteCommand>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10c      	bne.n	8007da0 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007d8c:	3302      	adds	r3, #2
 8007d8e:	4908      	ldr	r1, [pc, #32]	; (8007db0 <ES_WIFI_GetMACAddress+0x60>)
 8007d90:	4618      	mov	r0, r3
 8007d92:	f004 fcad 	bl	800c6f0 <strtok>
 8007d96:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	68b8      	ldr	r0, [r7, #8]
 8007d9c:	f7ff fba4 	bl	80074e8 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	0800ddb0 	.word	0x0800ddb0
 8007db0:	0800ddb4 	.word	0x0800ddb4

08007db4 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4949      	ldr	r1, [pc, #292]	; (8007ef4 <ES_WIFI_StartServerSingleConn+0x140>)
 8007dd0:	f004 fbde 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007de0:	461a      	mov	r2, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff fd12 	bl	800780c <AT_ExecuteCommand>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	e079      	b.n	8007eea <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d016      	beq.n	8007e2c <ES_WIFI_StartServerSingleConn+0x78>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d012      	beq.n	8007e2c <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e0c:	493a      	ldr	r1, [pc, #232]	; (8007ef8 <ES_WIFI_StartServerSingleConn+0x144>)
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f004 fbbe 	bl	800c590 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e20:	461a      	mov	r2, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff fcf2 	bl	800780c <AT_ExecuteCommand>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d15a      	bne.n	8007ee8 <ES_WIFI_StartServerSingleConn+0x134>
  {
      sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	492f      	ldr	r1, [pc, #188]	; (8007efc <ES_WIFI_StartServerSingleConn+0x148>)
 8007e40:	f004 fba6 	bl	800c590 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e50:	461a      	mov	r2, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff fcda 	bl	800780c <AT_ExecuteCommand>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
      if(ret == ES_WIFI_STATUS_OK)
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d142      	bne.n	8007ee8 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	7c1b      	ldrb	r3, [r3, #16]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4924      	ldr	r1, [pc, #144]	; (8007f00 <ES_WIFI_StartServerSingleConn+0x14c>)
 8007e70:	f004 fb8e 	bl	800c590 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007e80:	461a      	mov	r2, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fcc2 	bl	800780c <AT_ExecuteCommand>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d12a      	bne.n	8007ee8 <ES_WIFI_StartServerSingleConn+0x134>
		    {
		      sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	889b      	ldrh	r3, [r3, #4]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	4919      	ldr	r1, [pc, #100]	; (8007f04 <ES_WIFI_StartServerSingleConn+0x150>)
 8007ea0:	f004 fb76 	bl	800c590 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7ff fcaa 	bl	800780c <AT_ExecuteCommand>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]
          if (ret == ES_WIFI_STATUS_OK)
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d112      	bne.n	8007ee8 <ES_WIFI_StartServerSingleConn+0x134>
          {
            // multi accept mode
            sprintf((char*)Obj->CmdData,"P5=11\r");
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ec8:	490f      	ldr	r1, [pc, #60]	; (8007f08 <ES_WIFI_StartServerSingleConn+0x154>)
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f004 fb60 	bl	800c590 <siprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007edc:	461a      	mov	r2, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff fc94 	bl	800780c <AT_ExecuteCommand>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]
          }
        }
      }
	}
  UNLOCK_WIFI();
  return ret;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	0800de18 	.word	0x0800de18
 8007ef8:	0800de60 	.word	0x0800de60
 8007efc:	0800de20 	.word	0x0800de20
 8007f00:	0800de6c 	.word	0x0800de6c
 8007f04:	0800de28 	.word	0x0800de28
 8007f08:	0800de74 	.word	0x0800de74

08007f0c <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj,uint32_t timeout,ES_WIFI_Conn_t *conn)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08a      	sub	sp, #40	; 0x28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart=HAL_GetTick();
 8007f1e:	f7f9 ff89 	bl	8001e34 <HAL_GetTick>
 8007f22:	6278      	str	r0, [r7, #36]	; 0x24
  tlast=tstart+timeout;
 8007f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	4413      	add	r3, r2
 8007f2a:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart )
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d201      	bcs.n	8007f38 <ES_WIFI_WaitServerConnection+0x2c>
  {
	   tstart=0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    // mandatory to flush MR async messages
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f3e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f004 f933 	bl	800c1b0 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f50:	4972      	ldr	r1, [pc, #456]	; (800811c <ES_WIFI_WaitServerConnection+0x210>)
 8007f52:	4618      	mov	r0, r3
 8007f54:	f004 fb1c 	bl	800c590 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f64:	461a      	mov	r2, r3
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7ff fc50 	bl	800780c <AT_ExecuteCommand>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8007f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d136      	bne.n	8007fe8 <ES_WIFI_WaitServerConnection+0xdc>
    {
      if((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f80:	4967      	ldr	r1, [pc, #412]	; (8008120 <ES_WIFI_WaitServerConnection+0x214>)
 8007f82:	4618      	mov	r0, r3
 8007f84:	f004 fb9d 	bl	800c6c2 <strstr>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d03b      	beq.n	8008006 <ES_WIFI_WaitServerConnection+0xfa>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007f94:	4963      	ldr	r1, [pc, #396]	; (8008124 <ES_WIFI_WaitServerConnection+0x218>)
 8007f96:	4618      	mov	r0, r3
 8007f98:	f004 fb93 	bl	800c6c2 <strstr>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d031      	beq.n	8008006 <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007fa8:	495f      	ldr	r1, [pc, #380]	; (8008128 <ES_WIFI_WaitServerConnection+0x21c>)
 8007faa:	4618      	mov	r0, r3
 8007fac:	f004 fb89 	bl	800c6c2 <strstr>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d127      	bne.n	8008006 <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007fbc:	495b      	ldr	r1, [pc, #364]	; (800812c <ES_WIFI_WaitServerConnection+0x220>)
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f004 fb7f 	bl	800c6c2 <strstr>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d11d      	bne.n	8008006 <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 8007fca:	f240 7241 	movw	r2, #1857	; 0x741
 8007fce:	4958      	ldr	r1, [pc, #352]	; (8008130 <ES_WIFI_WaitServerConnection+0x224>)
 8007fd0:	4858      	ldr	r0, [pc, #352]	; (8008134 <ES_WIFI_WaitServerConnection+0x228>)
 8007fd2:	f004 f9d5 	bl	800c380 <iprintf>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4856      	ldr	r0, [pc, #344]	; (8008138 <ES_WIFI_WaitServerConnection+0x22c>)
 8007fe0:	f004 f9ce 	bl	800c380 <iprintf>
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e095      	b.n	8008114 <ES_WIFI_WaitServerConnection+0x208>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8007fe8:	f240 7249 	movw	r2, #1865	; 0x749
 8007fec:	4950      	ldr	r1, [pc, #320]	; (8008130 <ES_WIFI_WaitServerConnection+0x224>)
 8007fee:	4851      	ldr	r0, [pc, #324]	; (8008134 <ES_WIFI_WaitServerConnection+0x228>)
 8007ff0:	f004 f9c6 	bl	800c380 <iprintf>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	484f      	ldr	r0, [pc, #316]	; (800813c <ES_WIFI_WaitServerConnection+0x230>)
 8007ffe:	f004 f9bf 	bl	800c380 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 8008002:	2302      	movs	r3, #2
 8008004:	e086      	b.n	8008114 <ES_WIFI_WaitServerConnection+0x208>
    }
#endif

    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800800c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f004 f8cc 	bl	800c1b0 <memset>
    sprintf((char*)Obj->CmdData,"P?\r");
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800801e:	4948      	ldr	r1, [pc, #288]	; (8008140 <ES_WIFI_WaitServerConnection+0x234>)
 8008020:	4618      	mov	r0, r3
 8008022:	f004 fab5 	bl	800c590 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008032:	461a      	mov	r2, r3
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff fbe9 	bl	800780c <AT_ExecuteCommand>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if(ret == ES_WIFI_STATUS_OK)
 8008040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008044:	2b00      	cmp	r3, #0
 8008046:	d13f      	bne.n	80080c8 <ES_WIFI_WaitServerConnection+0x1bc>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800804e:	220c      	movs	r2, #12
 8008050:	493c      	ldr	r1, [pc, #240]	; (8008144 <ES_WIFI_WaitServerConnection+0x238>)
 8008052:	4618      	mov	r0, r3
 8008054:	f004 fb0e 	bl	800c674 <strncmp>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d043      	beq.n	80080e6 <ES_WIFI_WaitServerConnection+0x1da>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008064:	3302      	adds	r3, #2
 8008066:	4938      	ldr	r1, [pc, #224]	; (8008148 <ES_WIFI_WaitServerConnection+0x23c>)
 8008068:	4618      	mov	r0, r3
 800806a:	f004 fb41 	bl	800c6f0 <strtok>
 800806e:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //port
 8008070:	4935      	ldr	r1, [pc, #212]	; (8008148 <ES_WIFI_WaitServerConnection+0x23c>)
 8008072:	2000      	movs	r0, #0
 8008074:	f004 fb3c 	bl	800c6f0 <strtok>
 8008078:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3306      	adds	r3, #6
 800807e:	4619      	mov	r1, r3
 8008080:	6978      	ldr	r0, [r7, #20]
 8008082:	f7ff fa5c 	bl	800753e <ParseIP>
        ptr = strtok(0, ","); //port
 8008086:	4930      	ldr	r1, [pc, #192]	; (8008148 <ES_WIFI_WaitServerConnection+0x23c>)
 8008088:	2000      	movs	r0, #0
 800808a:	f004 fb31 	bl	800c6f0 <strtok>
 800808e:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8008090:	2100      	movs	r1, #0
 8008092:	6978      	ldr	r0, [r7, #20]
 8008094:	f7ff f9e4 	bl	8007460 <ParseNumber>
 8008098:	4603      	mov	r3, r0
 800809a:	b29a      	uxth	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); //ip
 80080a0:	4929      	ldr	r1, [pc, #164]	; (8008148 <ES_WIFI_WaitServerConnection+0x23c>)
 80080a2:	2000      	movs	r0, #0
 80080a4:	f004 fb24 	bl	800c6f0 <strtok>
 80080a8:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); //remote port
 80080aa:	4927      	ldr	r1, [pc, #156]	; (8008148 <ES_WIFI_WaitServerConnection+0x23c>)
 80080ac:	2000      	movs	r0, #0
 80080ae:	f004 fb1f 	bl	800c6f0 <strtok>
 80080b2:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 80080b4:	2100      	movs	r1, #0
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f7ff f9d2 	bl	8007460 <ParseNumber>
 80080bc:	4603      	mov	r3, r0
 80080be:	b29a      	uxth	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	805a      	strh	r2, [r3, #2]
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e025      	b.n	8008114 <ES_WIFI_WaitServerConnection+0x208>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 80080c8:	f240 7264 	movw	r2, #1892	; 0x764
 80080cc:	4918      	ldr	r1, [pc, #96]	; (8008130 <ES_WIFI_WaitServerConnection+0x224>)
 80080ce:	4819      	ldr	r0, [pc, #100]	; (8008134 <ES_WIFI_WaitServerConnection+0x228>)
 80080d0:	f004 f956 	bl	800c380 <iprintf>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80080da:	4619      	mov	r1, r3
 80080dc:	481b      	ldr	r0, [pc, #108]	; (800814c <ES_WIFI_WaitServerConnection+0x240>)
 80080de:	f004 f94f 	bl	800c380 <iprintf>
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_ERROR;
 80080e2:	2302      	movs	r3, #2
 80080e4:	e016      	b.n	8008114 <ES_WIFI_WaitServerConnection+0x208>
    }

    UNLOCK_WIFI();
    Obj->fops.IO_Delay(100);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80080ec:	2064      	movs	r0, #100	; 0x64
 80080ee:	4798      	blx	r3
    LOCK_WIFI();
    t = HAL_GetTick();
 80080f0:	f7f9 fea0 	bl	8001e34 <HAL_GetTick>
 80080f4:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) ||((t < tlast) || (t < tstart)));
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f43f af1d 	beq.w	8007f38 <ES_WIFI_WaitServerConnection+0x2c>
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	429a      	cmp	r2, r3
 8008104:	f4ff af18 	bcc.w	8007f38 <ES_WIFI_WaitServerConnection+0x2c>
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	429a      	cmp	r2, r3
 800810e:	f4ff af13 	bcc.w	8007f38 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8008112:	2303      	movs	r3, #3
}
 8008114:	4618      	mov	r0, r3
 8008116:	3728      	adds	r7, #40	; 0x28
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	0800dd28 	.word	0x0800dd28
 8008120:	0800de7c 	.word	0x0800de7c
 8008124:	0800de84 	.word	0x0800de84
 8008128:	0800de8c 	.word	0x0800de8c
 800812c:	0800de98 	.word	0x0800de98
 8008130:	0800dea8 	.word	0x0800dea8
 8008134:	0800dec4 	.word	0x0800dec4
 8008138:	0800decc 	.word	0x0800decc
 800813c:	0800dee4 	.word	0x0800dee4
 8008140:	0800defc 	.word	0x0800defc
 8008144:	0800df00 	.word	0x0800df00
 8008148:	0800dce8 	.word	0x0800dce8
 800814c:	0800df10 	.word	0x0800df10

08008150 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, int socket)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	4925      	ldr	r1, [pc, #148]	; (80081f8 <ES_WIFI_CloseServerConnection+0xa8>)
 8008164:	4618      	mov	r0, r3
 8008166:	f004 fa13 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008176:	461a      	mov	r2, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff fb47 	bl	800780c <AT_ExecuteCommand>
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00e      	beq.n	80081a6 <ES_WIFI_CloseServerConnection+0x56>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8008188:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800818c:	491b      	ldr	r1, [pc, #108]	; (80081fc <ES_WIFI_CloseServerConnection+0xac>)
 800818e:	481c      	ldr	r0, [pc, #112]	; (8008200 <ES_WIFI_CloseServerConnection+0xb0>)
 8008190:	f004 f8f6 	bl	800c380 <iprintf>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800819a:	4619      	mov	r1, r3
 800819c:	4819      	ldr	r0, [pc, #100]	; (8008204 <ES_WIFI_CloseServerConnection+0xb4>)
 800819e:	f004 f8ef 	bl	800c380 <iprintf>
    UNLOCK_WIFI();
    return ret;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	e023      	b.n	80081ee <ES_WIFI_CloseServerConnection+0x9e>
  }

  sprintf((char*)Obj->CmdData,"P5=10\r");
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081ac:	4916      	ldr	r1, [pc, #88]	; (8008208 <ES_WIFI_CloseServerConnection+0xb8>)
 80081ae:	4618      	mov	r0, r3
 80081b0:	f004 f9ee 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081c0:	461a      	mov	r2, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff fb22 	bl	800780c <AT_ExecuteCommand>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00c      	beq.n	80081ec <ES_WIFI_CloseServerConnection+0x9c>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 80081d2:	f240 7289 	movw	r2, #1929	; 0x789
 80081d6:	4909      	ldr	r1, [pc, #36]	; (80081fc <ES_WIFI_CloseServerConnection+0xac>)
 80081d8:	4809      	ldr	r0, [pc, #36]	; (8008200 <ES_WIFI_CloseServerConnection+0xb0>)
 80081da:	f004 f8d1 	bl	800c380 <iprintf>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80081e4:	4619      	mov	r1, r3
 80081e6:	4809      	ldr	r0, [pc, #36]	; (800820c <ES_WIFI_CloseServerConnection+0xbc>)
 80081e8:	f004 f8ca 	bl	800c380 <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	0800de18 	.word	0x0800de18
 80081fc:	0800dea8 	.word	0x0800dea8
 8008200:	0800dec4 	.word	0x0800dec4
 8008204:	0800df28 	.word	0x0800df28
 8008208:	0800df44 	.word	0x0800df44
 800820c:	0800df4c 	.word	0x0800df4c

08008210 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, int socket)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();
  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	4926      	ldr	r1, [pc, #152]	; (80082bc <ES_WIFI_StopServerSingleConn+0xac>)
 8008224:	4618      	mov	r0, r3
 8008226:	f004 f9b3 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008236:	461a      	mov	r2, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff fae7 	bl	800780c <AT_ExecuteCommand>
 800823e:	4603      	mov	r3, r0
 8008240:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00e      	beq.n	8008266 <ES_WIFI_StopServerSingleConn+0x56>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8008248:	f240 729f 	movw	r2, #1951	; 0x79f
 800824c:	491c      	ldr	r1, [pc, #112]	; (80082c0 <ES_WIFI_StopServerSingleConn+0xb0>)
 800824e:	481d      	ldr	r0, [pc, #116]	; (80082c4 <ES_WIFI_StopServerSingleConn+0xb4>)
 8008250:	f004 f896 	bl	800c380 <iprintf>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800825a:	4619      	mov	r1, r3
 800825c:	481a      	ldr	r0, [pc, #104]	; (80082c8 <ES_WIFI_StopServerSingleConn+0xb8>)
 800825e:	f004 f88f 	bl	800c380 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	e025      	b.n	80082b2 <ES_WIFI_StopServerSingleConn+0xa2>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800826c:	4917      	ldr	r1, [pc, #92]	; (80082cc <ES_WIFI_StopServerSingleConn+0xbc>)
 800826e:	4618      	mov	r0, r3
 8008270:	f004 f98e 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008280:	461a      	mov	r2, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fac2 	bl	800780c <AT_ExecuteCommand>
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]
  if(ret != ES_WIFI_STATUS_OK)
 800828c:	7bfb      	ldrb	r3, [r7, #15]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00e      	beq.n	80082b0 <ES_WIFI_StopServerSingleConn+0xa0>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8008292:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
 8008296:	490a      	ldr	r1, [pc, #40]	; (80082c0 <ES_WIFI_StopServerSingleConn+0xb0>)
 8008298:	480a      	ldr	r0, [pc, #40]	; (80082c4 <ES_WIFI_StopServerSingleConn+0xb4>)
 800829a:	f004 f871 	bl	800c380 <iprintf>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80082a4:	4619      	mov	r1, r3
 80082a6:	480a      	ldr	r0, [pc, #40]	; (80082d0 <ES_WIFI_StopServerSingleConn+0xc0>)
 80082a8:	f004 f86a 	bl	800c380 <iprintf>
    UNLOCK_WIFI();
    return ret;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	e000      	b.n	80082b2 <ES_WIFI_StopServerSingleConn+0xa2>
  }

  UNLOCK_WIFI();
  return ret;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	0800de18 	.word	0x0800de18
 80082c0:	0800dea8 	.word	0x0800dea8
 80082c4:	0800dec4 	.word	0x0800dec4
 80082c8:	0800df64 	.word	0x0800df64
 80082cc:	0800df84 	.word	0x0800df84
 80082d0:	0800df8c 	.word	0x0800df8c

080082d4 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af02      	add	r7, sp, #8
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	461a      	mov	r2, r3
 80082e0:	460b      	mov	r3, r1
 80082e2:	72fb      	strb	r3, [r7, #11]
 80082e4:	4613      	mov	r3, r2
 80082e6:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80082e8:	2302      	movs	r3, #2
 80082ea:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80082f2:	2301      	movs	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	e001      	b.n	80082fc <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80082fc:	893b      	ldrh	r3, [r7, #8]
 80082fe:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008302:	d302      	bcc.n	800830a <ES_WIFI_SendData+0x36>
 8008304:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8008308:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	893a      	ldrh	r2, [r7, #8]
 800830e:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008316:	7afa      	ldrb	r2, [r7, #11]
 8008318:	4942      	ldr	r1, [pc, #264]	; (8008424 <ES_WIFI_SendData+0x150>)
 800831a:	4618      	mov	r0, r3
 800831c:	f004 f938 	bl	800c590 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800832c:	461a      	mov	r2, r3
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fa6c 	bl	800780c <AT_ExecuteCommand>
 8008334:	4603      	mov	r3, r0
 8008336:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8008338:	7cfb      	ldrb	r3, [r7, #19]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d15e      	bne.n	80083fc <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4938      	ldr	r1, [pc, #224]	; (8008428 <ES_WIFI_SendData+0x154>)
 8008348:	4618      	mov	r0, r3
 800834a:	f004 f921 	bl	800c590 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800835a:	461a      	mov	r2, r3
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff fa55 	bl	800780c <AT_ExecuteCommand>
 8008362:	4603      	mov	r3, r0
 8008364:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8008366:	7cfb      	ldrb	r3, [r7, #19]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d13d      	bne.n	80083e8 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008372:	893a      	ldrh	r2, [r7, #8]
 8008374:	492d      	ldr	r1, [pc, #180]	; (800842c <ES_WIFI_SendData+0x158>)
 8008376:	4618      	mov	r0, r3
 8008378:	f004 f90a 	bl	800c590 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008388:	893a      	ldrh	r2, [r7, #8]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	4613      	mov	r3, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff faa1 	bl	80078d8 <AT_RequestSendData>
 8008396:	4603      	mov	r3, r0
 8008398:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 800839a:	7cfb      	ldrb	r3, [r7, #19]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d119      	bne.n	80083d4 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083a6:	4922      	ldr	r1, [pc, #136]	; (8008430 <ES_WIFI_SendData+0x15c>)
 80083a8:	4618      	mov	r0, r3
 80083aa:	f004 f98a 	bl	800c6c2 <strstr>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d02c      	beq.n	800840e <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80083b4:	f640 025c 	movw	r2, #2140	; 0x85c
 80083b8:	491e      	ldr	r1, [pc, #120]	; (8008434 <ES_WIFI_SendData+0x160>)
 80083ba:	481f      	ldr	r0, [pc, #124]	; (8008438 <ES_WIFI_SendData+0x164>)
 80083bc:	f003 ffe0 	bl	800c380 <iprintf>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80083c6:	4619      	mov	r1, r3
 80083c8:	481c      	ldr	r0, [pc, #112]	; (800843c <ES_WIFI_SendData+0x168>)
 80083ca:	f003 ffd9 	bl	800c380 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80083ce:	2302      	movs	r3, #2
 80083d0:	74fb      	strb	r3, [r7, #19]
 80083d2:	e01c      	b.n	800840e <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80083d4:	f640 0262 	movw	r2, #2146	; 0x862
 80083d8:	4916      	ldr	r1, [pc, #88]	; (8008434 <ES_WIFI_SendData+0x160>)
 80083da:	4817      	ldr	r0, [pc, #92]	; (8008438 <ES_WIFI_SendData+0x164>)
 80083dc:	f003 ffd0 	bl	800c380 <iprintf>
 80083e0:	4817      	ldr	r0, [pc, #92]	; (8008440 <ES_WIFI_SendData+0x16c>)
 80083e2:	f004 f853 	bl	800c48c <puts>
 80083e6:	e012      	b.n	800840e <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80083e8:	f640 0267 	movw	r2, #2151	; 0x867
 80083ec:	4911      	ldr	r1, [pc, #68]	; (8008434 <ES_WIFI_SendData+0x160>)
 80083ee:	4812      	ldr	r0, [pc, #72]	; (8008438 <ES_WIFI_SendData+0x164>)
 80083f0:	f003 ffc6 	bl	800c380 <iprintf>
 80083f4:	4813      	ldr	r0, [pc, #76]	; (8008444 <ES_WIFI_SendData+0x170>)
 80083f6:	f004 f849 	bl	800c48c <puts>
 80083fa:	e008      	b.n	800840e <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80083fc:	f640 026c 	movw	r2, #2156	; 0x86c
 8008400:	490c      	ldr	r1, [pc, #48]	; (8008434 <ES_WIFI_SendData+0x160>)
 8008402:	480d      	ldr	r0, [pc, #52]	; (8008438 <ES_WIFI_SendData+0x164>)
 8008404:	f003 ffbc 	bl	800c380 <iprintf>
 8008408:	480f      	ldr	r0, [pc, #60]	; (8008448 <ES_WIFI_SendData+0x174>)
 800840a:	f004 f83f 	bl	800c48c <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 800840e:	7cfb      	ldrb	r3, [r7, #19]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d102      	bne.n	800841a <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	2200      	movs	r2, #0
 8008418:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 800841a:	7cfb      	ldrb	r3, [r7, #19]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	0800de18 	.word	0x0800de18
 8008428:	0800dfd0 	.word	0x0800dfd0
 800842c:	0800dfd8 	.word	0x0800dfd8
 8008430:	0800dfe4 	.word	0x0800dfe4
 8008434:	0800dea8 	.word	0x0800dea8
 8008438:	0800dec4 	.word	0x0800dec4
 800843c:	0800dfec 	.word	0x0800dfec
 8008440:	0800e008 	.word	0x0800e008
 8008444:	0800e024 	.word	0x0800e024
 8008448:	0800e038 	.word	0x0800e038

0800844c <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af02      	add	r7, sp, #8
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	607a      	str	r2, [r7, #4]
 8008456:	461a      	mov	r2, r3
 8008458:	460b      	mov	r3, r1
 800845a:	72fb      	strb	r3, [r7, #11]
 800845c:	4613      	mov	r3, r2
 800845e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008460:	2302      	movs	r3, #2
 8008462:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d102      	bne.n	8008470 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800846a:	2301      	movs	r3, #1
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e001      	b.n	8008474 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8008474:	893b      	ldrh	r3, [r7, #8]
 8008476:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800847a:	f200 808b 	bhi.w	8008594 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8008484:	7afa      	ldrb	r2, [r7, #11]
 8008486:	4946      	ldr	r1, [pc, #280]	; (80085a0 <ES_WIFI_ReceiveData+0x154>)
 8008488:	4618      	mov	r0, r3
 800848a:	f004 f881 	bl	800c590 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800849a:	461a      	mov	r2, r3
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff f9b5 	bl	800780c <AT_ExecuteCommand>
 80084a2:	4603      	mov	r3, r0
 80084a4:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 80084a6:	7cfb      	ldrb	r3, [r7, #19]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d165      	bne.n	8008578 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084b2:	893a      	ldrh	r2, [r7, #8]
 80084b4:	493b      	ldr	r1, [pc, #236]	; (80085a4 <ES_WIFI_ReceiveData+0x158>)
 80084b6:	4618      	mov	r0, r3
 80084b8:	f004 f86a 	bl	800c590 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084c8:	461a      	mov	r2, r3
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff f99e 	bl	800780c <AT_ExecuteCommand>
 80084d0:	4603      	mov	r3, r0
 80084d2:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 80084d4:	7cfb      	ldrb	r3, [r7, #19]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d141      	bne.n	800855e <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4931      	ldr	r1, [pc, #196]	; (80085a8 <ES_WIFI_ReceiveData+0x15c>)
 80084e4:	4618      	mov	r0, r3
 80084e6:	f004 f853 	bl	800c590 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80084f6:	461a      	mov	r2, r3
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f7ff f987 	bl	800780c <AT_ExecuteCommand>
 80084fe:	4603      	mov	r3, r0
 8008500:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8008502:	7cfb      	ldrb	r3, [r7, #19]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d120      	bne.n	800854a <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800850e:	4927      	ldr	r1, [pc, #156]	; (80085ac <ES_WIFI_ReceiveData+0x160>)
 8008510:	4618      	mov	r0, r3
 8008512:	f004 f83d 	bl	800c590 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800851c:	893a      	ldrh	r2, [r7, #8]
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	4613      	mov	r3, r2
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7ff fa4c 	bl	80079c4 <AT_RequestReceiveData>
 800852c:	4603      	mov	r3, r0
 800852e:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8008530:	7cfb      	ldrb	r3, [r7, #19]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d02e      	beq.n	8008594 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 8008536:	f640 02fd 	movw	r2, #2301	; 0x8fd
 800853a:	491d      	ldr	r1, [pc, #116]	; (80085b0 <ES_WIFI_ReceiveData+0x164>)
 800853c:	481d      	ldr	r0, [pc, #116]	; (80085b4 <ES_WIFI_ReceiveData+0x168>)
 800853e:	f003 ff1f 	bl	800c380 <iprintf>
 8008542:	481d      	ldr	r0, [pc, #116]	; (80085b8 <ES_WIFI_ReceiveData+0x16c>)
 8008544:	f003 ffa2 	bl	800c48c <puts>
 8008548:	e024      	b.n	8008594 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 800854a:	f640 1202 	movw	r2, #2306	; 0x902
 800854e:	4918      	ldr	r1, [pc, #96]	; (80085b0 <ES_WIFI_ReceiveData+0x164>)
 8008550:	4818      	ldr	r0, [pc, #96]	; (80085b4 <ES_WIFI_ReceiveData+0x168>)
 8008552:	f003 ff15 	bl	800c380 <iprintf>
 8008556:	4819      	ldr	r0, [pc, #100]	; (80085bc <ES_WIFI_ReceiveData+0x170>)
 8008558:	f003 ff98 	bl	800c48c <puts>
 800855c:	e01a      	b.n	8008594 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 800855e:	f640 1207 	movw	r2, #2311	; 0x907
 8008562:	4913      	ldr	r1, [pc, #76]	; (80085b0 <ES_WIFI_ReceiveData+0x164>)
 8008564:	4813      	ldr	r0, [pc, #76]	; (80085b4 <ES_WIFI_ReceiveData+0x168>)
 8008566:	f003 ff0b 	bl	800c380 <iprintf>
 800856a:	4815      	ldr	r0, [pc, #84]	; (80085c0 <ES_WIFI_ReceiveData+0x174>)
 800856c:	f003 ff8e 	bl	800c48c <puts>
        *Receivedlen = 0;
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	2200      	movs	r2, #0
 8008574:	801a      	strh	r2, [r3, #0]
 8008576:	e00d      	b.n	8008594 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 8008578:	f640 120d 	movw	r2, #2317	; 0x90d
 800857c:	490c      	ldr	r1, [pc, #48]	; (80085b0 <ES_WIFI_ReceiveData+0x164>)
 800857e:	480d      	ldr	r0, [pc, #52]	; (80085b4 <ES_WIFI_ReceiveData+0x168>)
 8008580:	f003 fefe 	bl	800c380 <iprintf>
 8008584:	480f      	ldr	r0, [pc, #60]	; (80085c4 <ES_WIFI_ReceiveData+0x178>)
 8008586:	f003 ff81 	bl	800c48c <puts>
      issue15++;
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <ES_WIFI_ReceiveData+0x17c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3301      	adds	r3, #1
 8008590:	4a0d      	ldr	r2, [pc, #52]	; (80085c8 <ES_WIFI_ReceiveData+0x17c>)
 8008592:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8008594:	7cfb      	ldrb	r3, [r7, #19]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	0800de18 	.word	0x0800de18
 80085a4:	0800e05c 	.word	0x0800e05c
 80085a8:	0800e064 	.word	0x0800e064
 80085ac:	0800e06c 	.word	0x0800e06c
 80085b0:	0800dea8 	.word	0x0800dea8
 80085b4:	0800dec4 	.word	0x0800dec4
 80085b8:	0800e070 	.word	0x0800e070
 80085bc:	0800e090 	.word	0x0800e090
 80085c0:	0800e0a8 	.word	0x0800e0a8
 80085c4:	0800e0c8 	.word	0x0800e0c8
 80085c8:	20000f58 	.word	0x20000f58

080085cc <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08c      	sub	sp, #48	; 0x30
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80085d4:	4b57      	ldr	r3, [pc, #348]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 80085d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d8:	4a56      	ldr	r2, [pc, #344]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 80085da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085de:	6593      	str	r3, [r2, #88]	; 0x58
 80085e0:	4b54      	ldr	r3, [pc, #336]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 80085e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085ec:	4b51      	ldr	r3, [pc, #324]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 80085ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f0:	4a50      	ldr	r2, [pc, #320]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 80085f2:	f043 0302 	orr.w	r3, r3, #2
 80085f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085f8:	4b4e      	ldr	r3, [pc, #312]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 80085fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008604:	4b4b      	ldr	r3, [pc, #300]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 8008606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008608:	4a4a      	ldr	r2, [pc, #296]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 800860a:	f043 0304 	orr.w	r3, r3, #4
 800860e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008610:	4b48      	ldr	r3, [pc, #288]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 8008612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	613b      	str	r3, [r7, #16]
 800861a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800861c:	4b45      	ldr	r3, [pc, #276]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 800861e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008620:	4a44      	ldr	r2, [pc, #272]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 8008622:	f043 0310 	orr.w	r3, r3, #16
 8008626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008628:	4b42      	ldr	r3, [pc, #264]	; (8008734 <SPI_WIFI_MspInit+0x168>)
 800862a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862c:	f003 0310 	and.w	r3, r3, #16
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8008634:	2200      	movs	r2, #0
 8008636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800863a:	483f      	ldr	r0, [pc, #252]	; (8008738 <SPI_WIFI_MspInit+0x16c>)
 800863c:	f7fa f910 	bl	8002860 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8008640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008644:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008646:	2301      	movs	r3, #1
 8008648:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800864a:	2300      	movs	r3, #0
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800864e:	2300      	movs	r3, #0
 8008650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8008652:	f107 031c 	add.w	r3, r7, #28
 8008656:	4619      	mov	r1, r3
 8008658:	4837      	ldr	r0, [pc, #220]	; (8008738 <SPI_WIFI_MspInit+0x16c>)
 800865a:	f7f9 fe4b 	bl	80022f4 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800865e:	2302      	movs	r3, #2
 8008660:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8008662:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008666:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008668:	2300      	movs	r3, #0
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800866c:	2300      	movs	r3, #0
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008670:	f107 031c 	add.w	r3, r7, #28
 8008674:	4619      	mov	r1, r3
 8008676:	4831      	ldr	r0, [pc, #196]	; (800873c <SPI_WIFI_MspInit+0x170>)
 8008678:	f7f9 fe3c 	bl	80022f4 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800867c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008680:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8008682:	2301      	movs	r3, #1
 8008684:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8008686:	2300      	movs	r3, #0
 8008688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800868a:	2300      	movs	r3, #0
 800868c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8008692:	f107 031c 	add.w	r3, r7, #28
 8008696:	4619      	mov	r1, r3
 8008698:	4828      	ldr	r0, [pc, #160]	; (800873c <SPI_WIFI_MspInit+0x170>)
 800869a:	f7f9 fe2b 	bl	80022f4 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800869e:	2201      	movs	r2, #1
 80086a0:	2101      	movs	r1, #1
 80086a2:	4826      	ldr	r0, [pc, #152]	; (800873c <SPI_WIFI_MspInit+0x170>)
 80086a4:	f7fa f8dc 	bl	8002860 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80086a8:	2301      	movs	r3, #1
 80086aa:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80086ac:	2301      	movs	r3, #1
 80086ae:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80086b4:	2301      	movs	r3, #1
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80086b8:	f107 031c 	add.w	r3, r7, #28
 80086bc:	4619      	mov	r1, r3
 80086be:	481f      	ldr	r0, [pc, #124]	; (800873c <SPI_WIFI_MspInit+0x170>)
 80086c0:	f7f9 fe18 	bl	80022f4 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80086c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80086ca:	2302      	movs	r3, #2
 80086cc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80086d2:	2301      	movs	r3, #1
 80086d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80086d6:	2306      	movs	r3, #6
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80086da:	f107 031c 	add.w	r3, r7, #28
 80086de:	4619      	mov	r1, r3
 80086e0:	4817      	ldr	r0, [pc, #92]	; (8008740 <SPI_WIFI_MspInit+0x174>)
 80086e2:	f7f9 fe07 	bl	80022f4 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80086e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086ea:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80086ec:	2302      	movs	r3, #2
 80086ee:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80086f4:	2301      	movs	r3, #1
 80086f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80086f8:	2306      	movs	r3, #6
 80086fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80086fc:	f107 031c 	add.w	r3, r7, #28
 8008700:	4619      	mov	r1, r3
 8008702:	480f      	ldr	r0, [pc, #60]	; (8008740 <SPI_WIFI_MspInit+0x174>)
 8008704:	f7f9 fdf6 	bl	80022f4 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8008708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800870c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800870e:	2302      	movs	r3, #2
 8008710:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8008712:	2301      	movs	r3, #1
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8008716:	2301      	movs	r3, #1
 8008718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800871a:	2306      	movs	r3, #6
 800871c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800871e:	f107 031c 	add.w	r3, r7, #28
 8008722:	4619      	mov	r1, r3
 8008724:	4806      	ldr	r0, [pc, #24]	; (8008740 <SPI_WIFI_MspInit+0x174>)
 8008726:	f7f9 fde5 	bl	80022f4 <HAL_GPIO_Init>
}
 800872a:	bf00      	nop
 800872c:	3730      	adds	r7, #48	; 0x30
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40021000 	.word	0x40021000
 8008738:	48000400 	.word	0x48000400
 800873c:	48001000 	.word	0x48001000
 8008740:	48000800 	.word	0x48000800

08008744 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8008752:	88fb      	ldrh	r3, [r7, #6]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d145      	bne.n	80087e4 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8008758:	4b27      	ldr	r3, [pc, #156]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 800875a:	4a28      	ldr	r2, [pc, #160]	; (80087fc <SPI_WIFI_Init+0xb8>)
 800875c:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800875e:	4826      	ldr	r0, [pc, #152]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 8008760:	f7ff ff34 	bl	80085cc <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8008764:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 8008766:	f44f 7282 	mov.w	r2, #260	; 0x104
 800876a:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800876c:	4b22      	ldr	r3, [pc, #136]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 800876e:	2200      	movs	r2, #0
 8008770:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8008772:	4b21      	ldr	r3, [pc, #132]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 8008774:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008778:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800877a:	4b1f      	ldr	r3, [pc, #124]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 800877c:	2200      	movs	r2, #0
 800877e:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8008780:	4b1d      	ldr	r3, [pc, #116]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 8008782:	2200      	movs	r2, #0
 8008784:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8008786:	4b1c      	ldr	r3, [pc, #112]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 8008788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800878c:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800878e:	4b1a      	ldr	r3, [pc, #104]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 8008790:	2210      	movs	r2, #16
 8008792:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8008794:	4b18      	ldr	r3, [pc, #96]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 8008796:	2200      	movs	r2, #0
 8008798:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800879a:	4b17      	ldr	r3, [pc, #92]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 800879c:	2200      	movs	r2, #0
 800879e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80087a0:	4b15      	ldr	r3, [pc, #84]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80087a6:	4b14      	ldr	r3, [pc, #80]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80087ac:	4812      	ldr	r0, [pc, #72]	; (80087f8 <SPI_WIFI_Init+0xb4>)
 80087ae:	f7fb ff21 	bl	80045f4 <HAL_SPI_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80087b8:	f04f 33ff 	mov.w	r3, #4294967295
 80087bc:	e018      	b.n	80087f0 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	2007      	movs	r0, #7
 80087c4:	f7f9 fc1e 	bl	8002004 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80087c8:	2007      	movs	r0, #7
 80087ca:	f7f9 fc37 	bl	800203c <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	2033      	movs	r0, #51	; 0x33
 80087d4:	f7f9 fc16 	bl	8002004 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80087d8:	2033      	movs	r0, #51	; 0x33
 80087da:	f7f9 fc2f 	bl	800203c <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80087de:	200a      	movs	r0, #10
 80087e0:	f000 f9fe 	bl	8008be0 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 80087e4:	f000 f80c 	bl	8008800 <SPI_WIFI_ResetModule>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73fb      	strb	r3, [r7, #15]

  return rc;
 80087ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	20000f5c 	.word	0x20000f5c
 80087fc:	40003c00 	.word	0x40003c00

08008800 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8008806:	f7f9 fb15 	bl	8001e34 <HAL_GetTick>
 800880a:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8008810:	2200      	movs	r2, #0
 8008812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008816:	4830      	ldr	r0, [pc, #192]	; (80088d8 <SPI_WIFI_ResetModule+0xd8>)
 8008818:	f7fa f822 	bl	8002860 <HAL_GPIO_WritePin>
 800881c:	200a      	movs	r0, #10
 800881e:	f7f9 fb15 	bl	8001e4c <HAL_Delay>
 8008822:	2201      	movs	r2, #1
 8008824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008828:	482b      	ldr	r0, [pc, #172]	; (80088d8 <SPI_WIFI_ResetModule+0xd8>)
 800882a:	f7fa f819 	bl	8002860 <HAL_GPIO_WritePin>
 800882e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008832:	f7f9 fb0b 	bl	8001e4c <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8008836:	2200      	movs	r2, #0
 8008838:	2101      	movs	r1, #1
 800883a:	4827      	ldr	r0, [pc, #156]	; (80088d8 <SPI_WIFI_ResetModule+0xd8>)
 800883c:	f7fa f810 	bl	8002860 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008840:	200f      	movs	r0, #15
 8008842:	f000 f9cd 	bl	8008be0 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8008846:	e020      	b.n	800888a <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	463a      	mov	r2, r7
 800884c:	18d1      	adds	r1, r2, r3
 800884e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008852:	2201      	movs	r2, #1
 8008854:	4821      	ldr	r0, [pc, #132]	; (80088dc <SPI_WIFI_ResetModule+0xdc>)
 8008856:	f7fb ff98 	bl	800478a <HAL_SPI_Receive>
 800885a:	4603      	mov	r3, r0
 800885c:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	3302      	adds	r3, #2
 8008862:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8008864:	f7f9 fae6 	bl	8001e34 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008872:	d202      	bcs.n	800887a <SPI_WIFI_ResetModule+0x7a>
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800887a:	2201      	movs	r2, #1
 800887c:	2101      	movs	r1, #1
 800887e:	4816      	ldr	r0, [pc, #88]	; (80088d8 <SPI_WIFI_ResetModule+0xd8>)
 8008880:	f7f9 ffee 	bl	8002860 <HAL_GPIO_WritePin>
      return -1;
 8008884:	f04f 33ff 	mov.w	r3, #4294967295
 8008888:	e021      	b.n	80088ce <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800888a:	2102      	movs	r1, #2
 800888c:	4812      	ldr	r0, [pc, #72]	; (80088d8 <SPI_WIFI_ResetModule+0xd8>)
 800888e:	f7f9 ffcf 	bl	8002830 <HAL_GPIO_ReadPin>
 8008892:	4603      	mov	r3, r0
 8008894:	2b01      	cmp	r3, #1
 8008896:	d0d7      	beq.n	8008848 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 8008898:	2201      	movs	r2, #1
 800889a:	2101      	movs	r1, #1
 800889c:	480e      	ldr	r0, [pc, #56]	; (80088d8 <SPI_WIFI_ResetModule+0xd8>)
 800889e:	f7f9 ffdf 	bl	8002860 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80088a2:	783b      	ldrb	r3, [r7, #0]
 80088a4:	2b15      	cmp	r3, #21
 80088a6:	d10e      	bne.n	80088c6 <SPI_WIFI_ResetModule+0xc6>
 80088a8:	787b      	ldrb	r3, [r7, #1]
 80088aa:	2b15      	cmp	r3, #21
 80088ac:	d10b      	bne.n	80088c6 <SPI_WIFI_ResetModule+0xc6>
 80088ae:	78bb      	ldrb	r3, [r7, #2]
 80088b0:	2b0d      	cmp	r3, #13
 80088b2:	d108      	bne.n	80088c6 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80088b4:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80088b6:	2b0a      	cmp	r3, #10
 80088b8:	d105      	bne.n	80088c6 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80088ba:	793b      	ldrb	r3, [r7, #4]
 80088bc:	2b3e      	cmp	r3, #62	; 0x3e
 80088be:	d102      	bne.n	80088c6 <SPI_WIFI_ResetModule+0xc6>
 80088c0:	797b      	ldrb	r3, [r7, #5]
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	d002      	beq.n	80088cc <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80088c6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ca:	e000      	b.n	80088ce <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	48001000 	.word	0x48001000
 80088dc:	20000f5c 	.word	0x20000f5c

080088e0 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80088e4:	4802      	ldr	r0, [pc, #8]	; (80088f0 <SPI_WIFI_DeInit+0x10>)
 80088e6:	f7fb ff28 	bl	800473a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000f5c 	.word	0x20000f5c

080088f4 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80088fc:	f7f9 fa9a 	bl	8001e34 <HAL_GetTick>
 8008900:	4603      	mov	r3, r0
 8008902:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8008904:	e00a      	b.n	800891c <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8008906:	f7f9 fa95 	bl	8001e34 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	1ad2      	subs	r2, r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	429a      	cmp	r2, r3
 8008914:	d902      	bls.n	800891c <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8008916:	f04f 33ff 	mov.w	r3, #4294967295
 800891a:	e007      	b.n	800892c <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800891c:	2102      	movs	r1, #2
 800891e:	4805      	ldr	r0, [pc, #20]	; (8008934 <wait_cmddata_rdy_high+0x40>)
 8008920:	f7f9 ff86 	bl	8002830 <HAL_GPIO_ReadPin>
 8008924:	4603      	mov	r3, r0
 8008926:	2b01      	cmp	r3, #1
 8008928:	d1ed      	bne.n	8008906 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	48001000 	.word	0x48001000

08008938 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008940:	f7f9 fa78 	bl	8001e34 <HAL_GetTick>
 8008944:	4603      	mov	r3, r0
 8008946:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8008948:	e00a      	b.n	8008960 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800894a:	f7f9 fa73 	bl	8001e34 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	1ad2      	subs	r2, r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d902      	bls.n	8008960 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800895a:	f04f 33ff 	mov.w	r3, #4294967295
 800895e:	e004      	b.n	800896a <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8008960:	4b04      	ldr	r3, [pc, #16]	; (8008974 <wait_cmddata_rdy_rising_event+0x3c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d0f0      	beq.n	800894a <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8008968:	2300      	movs	r3, #0
#endif
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000fc8 	.word	0x20000fc8

08008978 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8008980:	f7f9 fa58 	bl	8001e34 <HAL_GetTick>
 8008984:	4603      	mov	r3, r0
 8008986:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8008988:	e00a      	b.n	80089a0 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800898a:	f7f9 fa53 	bl	8001e34 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	1ad2      	subs	r2, r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	429a      	cmp	r2, r3
 8008998:	d902      	bls.n	80089a0 <wait_spi_rx_event+0x28>
    {
      return -1;
 800899a:	f04f 33ff 	mov.w	r3, #4294967295
 800899e:	e004      	b.n	80089aa <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80089a0:	4b04      	ldr	r3, [pc, #16]	; (80089b4 <wait_spi_rx_event+0x3c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d0f0      	beq.n	800898a <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80089a8:	2300      	movs	r3, #0
#endif
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20000fc0 	.word	0x20000fc0

080089b8 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80089c0:	f7f9 fa38 	bl	8001e34 <HAL_GetTick>
 80089c4:	4603      	mov	r3, r0
 80089c6:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 80089c8:	e00a      	b.n	80089e0 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80089ca:	f7f9 fa33 	bl	8001e34 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d902      	bls.n	80089e0 <wait_spi_tx_event+0x28>
    {
      return -1;
 80089da:	f04f 33ff 	mov.w	r3, #4294967295
 80089de:	e004      	b.n	80089ea <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 80089e0:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <wait_spi_tx_event+0x3c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d0f0      	beq.n	80089ca <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80089e8:	2300      	movs	r3, #0
#endif
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000fc4 	.word	0x20000fc4

080089f8 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	460b      	mov	r3, r1
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	4834      	ldr	r0, [pc, #208]	; (8008ae0 <SPI_WIFI_ReceiveData+0xe8>)
 8008a10:	f7f9 ff26 	bl	8002860 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8008a14:	2003      	movs	r0, #3
 8008a16:	f000 f8e3 	bl	8008be0 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff ff8b 	bl	8008938 <wait_cmddata_rdy_rising_event>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	da02      	bge.n	8008a2e <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8008a28:	f06f 0302 	mvn.w	r3, #2
 8008a2c:	e054      	b.n	8008ad8 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2101      	movs	r1, #1
 8008a32:	482b      	ldr	r0, [pc, #172]	; (8008ae0 <SPI_WIFI_ReceiveData+0xe8>)
 8008a34:	f7f9 ff14 	bl	8002860 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008a38:	200f      	movs	r0, #15
 8008a3a:	f000 f8d1 	bl	8008be0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8008a3e:	e03d      	b.n	8008abc <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8008a40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a44:	897b      	ldrh	r3, [r7, #10]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	db02      	blt.n	8008a50 <SPI_WIFI_ReceiveData+0x58>
 8008a4a:	897b      	ldrh	r3, [r7, #10]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d13c      	bne.n	8008aca <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8008a50:	4b24      	ldr	r3, [pc, #144]	; (8008ae4 <SPI_WIFI_ReceiveData+0xec>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8008a56:	f107 0314 	add.w	r3, r7, #20
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4822      	ldr	r0, [pc, #136]	; (8008ae8 <SPI_WIFI_ReceiveData+0xf0>)
 8008a60:	f7fc fa64 	bl	8004f2c <HAL_SPI_Receive_IT>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	481c      	ldr	r0, [pc, #112]	; (8008ae0 <SPI_WIFI_ReceiveData+0xe8>)
 8008a70:	f7f9 fef6 	bl	8002860 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8008a74:	f04f 33ff 	mov.w	r3, #4294967295
 8008a78:	e02e      	b.n	8008ad8 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff ff7b 	bl	8008978 <wait_spi_rx_event>

      pData[0] = tmp[0];
 8008a82:	7d3a      	ldrb	r2, [r7, #20]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	7d7a      	ldrb	r2, [r7, #21]
 8008a8e:	701a      	strb	r2, [r3, #0]
      length += 2;
 8008a90:	8afb      	ldrh	r3, [r7, #22]
 8008a92:	3302      	adds	r3, #2
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8008a9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008aa2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008aa6:	db09      	blt.n	8008abc <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	2101      	movs	r1, #1
 8008aac:	480c      	ldr	r0, [pc, #48]	; (8008ae0 <SPI_WIFI_ReceiveData+0xe8>)
 8008aae:	f7f9 fed7 	bl	8002860 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8008ab2:	f7ff fea5 	bl	8008800 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8008ab6:	f06f 0303 	mvn.w	r3, #3
 8008aba:	e00d      	b.n	8008ad8 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8008abc:	2102      	movs	r1, #2
 8008abe:	4808      	ldr	r0, [pc, #32]	; (8008ae0 <SPI_WIFI_ReceiveData+0xe8>)
 8008ac0:	f7f9 feb6 	bl	8002830 <HAL_GPIO_ReadPin>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d0ba      	beq.n	8008a40 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8008aca:	2201      	movs	r2, #1
 8008acc:	2101      	movs	r1, #1
 8008ace:	4804      	ldr	r0, [pc, #16]	; (8008ae0 <SPI_WIFI_ReceiveData+0xe8>)
 8008ad0:	f7f9 fec6 	bl	8002860 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8008ad4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	48001000 	.word	0x48001000
 8008ae4:	20000fc0 	.word	0x20000fc0
 8008ae8:	20000f5c 	.word	0x20000f5c

08008aec <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	460b      	mov	r3, r1
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fef9 	bl	80088f4 <wait_cmddata_rdy_high>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	da02      	bge.n	8008b0e <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8008b08:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0c:	e04f      	b.n	8008bae <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8008b0e:	4b2a      	ldr	r3, [pc, #168]	; (8008bb8 <SPI_WIFI_SendData+0xcc>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8008b14:	2200      	movs	r2, #0
 8008b16:	2101      	movs	r1, #1
 8008b18:	4828      	ldr	r0, [pc, #160]	; (8008bbc <SPI_WIFI_SendData+0xd0>)
 8008b1a:	f7f9 fea1 	bl	8002860 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8008b1e:	200f      	movs	r0, #15
 8008b20:	f000 f85e 	bl	8008be0 <SPI_WIFI_DelayUs>
  if (len > 1)
 8008b24:	897b      	ldrh	r3, [r7, #10]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d919      	bls.n	8008b5e <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8008b2a:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <SPI_WIFI_SendData+0xd4>)
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8008b30:	897b      	ldrh	r3, [r7, #10]
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	461a      	mov	r2, r3
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	4822      	ldr	r0, [pc, #136]	; (8008bc4 <SPI_WIFI_SendData+0xd8>)
 8008b3c:	f7fc f968 	bl	8004e10 <HAL_SPI_Transmit_IT>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8008b46:	2201      	movs	r2, #1
 8008b48:	2101      	movs	r1, #1
 8008b4a:	481c      	ldr	r0, [pc, #112]	; (8008bbc <SPI_WIFI_SendData+0xd0>)
 8008b4c:	f7f9 fe88 	bl	8002860 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295
 8008b54:	e02b      	b.n	8008bae <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff ff2d 	bl	80089b8 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8008b5e:	897b      	ldrh	r3, [r7, #10]
 8008b60:	f003 0301 	and.w	r3, r3, #1
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d020      	beq.n	8008baa <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8008b68:	897b      	ldrh	r3, [r7, #10]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	4413      	add	r3, r2
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8008b74:	230a      	movs	r3, #10
 8008b76:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8008b78:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <SPI_WIFI_SendData+0xd4>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8008b7e:	f107 0314 	add.w	r3, r7, #20
 8008b82:	2201      	movs	r2, #1
 8008b84:	4619      	mov	r1, r3
 8008b86:	480f      	ldr	r0, [pc, #60]	; (8008bc4 <SPI_WIFI_SendData+0xd8>)
 8008b88:	f7fc f942 	bl	8004e10 <HAL_SPI_Transmit_IT>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d007      	beq.n	8008ba2 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8008b92:	2201      	movs	r2, #1
 8008b94:	2101      	movs	r1, #1
 8008b96:	4809      	ldr	r0, [pc, #36]	; (8008bbc <SPI_WIFI_SendData+0xd0>)
 8008b98:	f7f9 fe62 	bl	8002860 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8008b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba0:	e005      	b.n	8008bae <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff ff07 	bl	80089b8 <wait_spi_tx_event>
    
  }
  return len;
 8008baa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3718      	adds	r7, #24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000fc8 	.word	0x20000fc8
 8008bbc:	48001000 	.word	0x48001000
 8008bc0:	20000fc4 	.word	0x20000fc4
 8008bc4:	20000f5c 	.word	0x20000f5c

08008bc8 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7f9 f93b 	bl	8001e4c <HAL_Delay>
}
 8008bd6:	bf00      	nop
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8008bf0:	4b20      	ldr	r3, [pc, #128]	; (8008c74 <SPI_WIFI_DelayUs+0x94>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d122      	bne.n	8008c3e <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8008bf8:	4b1f      	ldr	r3, [pc, #124]	; (8008c78 <SPI_WIFI_DelayUs+0x98>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1f      	ldr	r2, [pc, #124]	; (8008c7c <SPI_WIFI_DelayUs+0x9c>)
 8008bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008c02:	099b      	lsrs	r3, r3, #6
 8008c04:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8008c0e:	f7f9 f911 	bl	8001e34 <HAL_GetTick>
 8008c12:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8008c14:	e002      	b.n	8008c1c <SPI_WIFI_DelayUs+0x3c>
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	60bb      	str	r3, [r7, #8]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f9      	bne.n	8008c16 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8008c22:	f7f9 f907 	bl	8001e34 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	4a11      	ldr	r2, [pc, #68]	; (8008c74 <SPI_WIFI_DelayUs+0x94>)
 8008c2e:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8008c30:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <SPI_WIFI_DelayUs+0x94>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <SPI_WIFI_DelayUs+0x5e>
 8008c38:	4b0e      	ldr	r3, [pc, #56]	; (8008c74 <SPI_WIFI_DelayUs+0x94>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8008c3e:	4b0e      	ldr	r3, [pc, #56]	; (8008c78 <SPI_WIFI_DelayUs+0x98>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a0f      	ldr	r2, [pc, #60]	; (8008c80 <SPI_WIFI_DelayUs+0xa0>)
 8008c44:	fba2 2303 	umull	r2, r3, r2, r3
 8008c48:	0c9a      	lsrs	r2, r3, #18
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <SPI_WIFI_DelayUs+0x94>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c52:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	fb02 f303 	mul.w	r3, r2, r3
 8008c5c:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8008c5e:	e002      	b.n	8008c66 <SPI_WIFI_DelayUs+0x86>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	60bb      	str	r3, [r7, #8]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1f9      	bne.n	8008c60 <SPI_WIFI_DelayUs+0x80>
  return;
 8008c6c:	bf00      	nop
}
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20000fcc 	.word	0x20000fcc
 8008c78:	20000000 	.word	0x20000000
 8008c7c:	10624dd3 	.word	0x10624dd3
 8008c80:	431bde83 	.word	0x431bde83

08008c84 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8008c8c:	4b06      	ldr	r3, [pc, #24]	; (8008ca8 <HAL_SPI_RxCpltCallback+0x24>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <HAL_SPI_RxCpltCallback+0x24>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
  }
}
 8008c9a:	bf00      	nop
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20000fc0 	.word	0x20000fc0

08008cac <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8008cb4:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <HAL_SPI_TxCpltCallback+0x24>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8008cbc:	4b04      	ldr	r3, [pc, #16]	; (8008cd0 <HAL_SPI_TxCpltCallback+0x24>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
  }
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20000fc4 	.word	0x20000fc4

08008cd4 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8008cd8:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <SPI_WIFI_ISR+0x1c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d102      	bne.n	8008ce6 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8008ce0:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <SPI_WIFI_ISR+0x1c>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
   }
}
 8008ce6:	bf00      	nop
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20000fc8 	.word	0x20000fc8

08008cf4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8008cfe:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <WIFI_Init+0x40>)
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <WIFI_Init+0x44>)
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	4b0d      	ldr	r3, [pc, #52]	; (8008d3c <WIFI_Init+0x48>)
 8008d08:	4a0d      	ldr	r2, [pc, #52]	; (8008d40 <WIFI_Init+0x4c>)
 8008d0a:	490e      	ldr	r1, [pc, #56]	; (8008d44 <WIFI_Init+0x50>)
 8008d0c:	480e      	ldr	r0, [pc, #56]	; (8008d48 <WIFI_Init+0x54>)
 8008d0e:	f7fe ff1d 	bl	8007b4c <ES_WIFI_RegisterBusIO>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d107      	bne.n	8008d28 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008d18:	480b      	ldr	r0, [pc, #44]	; (8008d48 <WIFI_Init+0x54>)
 8008d1a:	f7fe fee9 	bl	8007af0 <ES_WIFI_Init>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8008d28:	79fb      	ldrb	r3, [r7, #7]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	080089f9 	.word	0x080089f9
 8008d38:	08008aed 	.word	0x08008aed
 8008d3c:	08008bc9 	.word	0x08008bc9
 8008d40:	080088e1 	.word	0x080088e1
 8008d44:	08008745 	.word	0x08008745
 8008d48:	20000fd0 	.word	0x20000fd0

08008d4c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	4613      	mov	r3, r2
 8008d58:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	4809      	ldr	r0, [pc, #36]	; (8008d8c <WIFI_Connect+0x40>)
 8008d66:	f7fe ff25 	bl	8007bb4 <ES_WIFI_Connect>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d107      	bne.n	8008d80 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8008d70:	4806      	ldr	r0, [pc, #24]	; (8008d8c <WIFI_Connect+0x40>)
 8008d72:	f7fe ffc3 	bl	8007cfc <ES_WIFI_GetNetworkSettings>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000fd0 	.word	0x20000fd0

08008d90 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	4806      	ldr	r0, [pc, #24]	; (8008db8 <WIFI_GetMAC_Address+0x28>)
 8008da0:	f7fe ffd6 	bl	8007d50 <ES_WIFI_GetMACAddress>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20000fd0 	.word	0x20000fd0

08008dbc <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8008dc8:	4809      	ldr	r0, [pc, #36]	; (8008df0 <WIFI_GetIP_Address+0x34>)
 8008dca:	f7fe ff6b 	bl	8007ca4 <ES_WIFI_IsConnected>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d107      	bne.n	8008de4 <WIFI_GetIP_Address+0x28>
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <WIFI_GetIP_Address+0x34>)
 8008dd6:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8008dda:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20000fd0 	.word	0x20000fd0

08008df4 <WIFI_StartServer>:
  * @param  name : name of the connection
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name, uint16_t port)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08a      	sub	sp, #40	; 0x28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	607b      	str	r3, [r7, #4]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	72fb      	strb	r3, [r7, #11]
 8008e02:	4613      	mov	r3, r2
 8008e04:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8008e12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e14:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8008e16:	7afb      	ldrb	r3, [r7, #11]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bf14      	ite	ne
 8008e1c:	2301      	movne	r3, #1
 8008e1e:	2300      	moveq	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8008e24:	893b      	ldrh	r3, [r7, #8]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f887 3020 	strb.w	r3, [r7, #32]
  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8008e2c:	f107 0310 	add.w	r3, r7, #16
 8008e30:	4619      	mov	r1, r3
 8008e32:	4807      	ldr	r0, [pc, #28]	; (8008e50 <WIFI_StartServer+0x5c>)
 8008e34:	f7fe ffbe 	bl	8007db4 <ES_WIFI_StartServerSingleConn>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d102      	bne.n	8008e44 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3728      	adds	r7, #40	; 0x28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000fd0 	.word	0x20000fd0

08008e54 <WIFI_WaitServerConnection>:
  * @brief  Wait for a client connection to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(int socket,uint32_t Timeout,uint8_t *RemoteIp,uint16_t *RemotePort)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;
  
  conn.Number = socket;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8008e68:	f107 0310 	add.w	r3, r7, #16
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	68b9      	ldr	r1, [r7, #8]
 8008e70:	4819      	ldr	r0, [pc, #100]	; (8008ed8 <WIFI_WaitServerConnection+0x84>)
 8008e72:	f7ff f84b 	bl	8007f0c <ES_WIFI_WaitServerConnection>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8008e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10f      	bne.n	8008ea4 <WIFI_WaitServerConnection+0x50>
  {
    if (RemotePort) *RemotePort=conn.RemotePort;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <WIFI_WaitServerConnection+0x3c>
 8008e8a:	8a7a      	ldrh	r2, [r7, #18]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d004      	beq.n	8008ea0 <WIFI_WaitServerConnection+0x4c>
 8008e96:	f8d7 3016 	ldr.w	r3, [r7, #22]
 8008e9a:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp,conn.RemoteIP,sizeof(conn.RemoteIP));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e014      	b.n	8008ece <WIFI_WaitServerConnection+0x7a>
  }
  
  if (ES_WIFI_STATUS_TIMEOUT ==ret)
 8008ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d10f      	bne.n	8008ecc <WIFI_WaitServerConnection+0x78>
  {
    if (RemotePort) *RemotePort=0;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <WIFI_WaitServerConnection+0x64>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	801a      	strh	r2, [r3, #0]
    if (RemoteIp)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <WIFI_WaitServerConnection+0x74>
    {
      memset(RemoteIp,0,sizeof(conn.RemoteIP));
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f003 f974 	bl	800c1b0 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8008ec8:	2305      	movs	r3, #5
 8008eca:	e000      	b.n	8008ece <WIFI_WaitServerConnection+0x7a>
  }

  return WIFI_STATUS_ERROR;
 8008ecc:	2301      	movs	r3, #1
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3728      	adds	r7, #40	; 0x28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	20000fd0 	.word	0x20000fd0

08008edc <WIFI_CloseServerConnection>:
/**
  * @brief  Close current connection from a client  to the server
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(int socket)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj,socket))
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	4806      	ldr	r0, [pc, #24]	; (8008f04 <WIFI_CloseServerConnection+0x28>)
 8008eec:	f7ff f930 	bl	8008150 <ES_WIFI_CloseServerConnection>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <WIFI_CloseServerConnection+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20000fd0 	.word	0x20000fd0

08008f08 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_StopServerSingleConn(&EsWifiObj,socket)== ES_WIFI_STATUS_OK)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4619      	mov	r1, r3
 8008f18:	4806      	ldr	r0, [pc, #24]	; (8008f34 <WIFI_StopServer+0x2c>)
 8008f1a:	f7ff f979 	bl	8008210 <ES_WIFI_StopServerSingleConn>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <WIFI_StopServer+0x20>
  {
    ret = WIFI_STATUS_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000fd0 	.word	0x20000fd0

08008f38 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	607b      	str	r3, [r7, #4]
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
 8008f46:	4613      	mov	r3, r2
 8008f48:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008f4e:	89ba      	ldrh	r2, [r7, #12]
 8008f50:	7bf9      	ldrb	r1, [r7, #15]
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	4806      	ldr	r0, [pc, #24]	; (8008f78 <WIFI_SendData+0x40>)
 8008f60:	f7ff f9b8 	bl	80082d4 <ES_WIFI_SendData>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20000fd0 	.word	0x20000fd0

08008f7c <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8008f92:	89ba      	ldrh	r2, [r7, #12]
 8008f94:	7bf9      	ldrb	r1, [r7, #15]
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	4806      	ldr	r0, [pc, #24]	; (8008fbc <WIFI_ReceiveData+0x40>)
 8008fa4:	f7ff fa52 	bl	800844c <ES_WIFI_ReceiveData>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8008fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000fd0 	.word	0x20000fd0

08008fc0 <__NVIC_SetPriority>:
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	db0a      	blt.n	8008fea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	490c      	ldr	r1, [pc, #48]	; (800900c <__NVIC_SetPriority+0x4c>)
 8008fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fde:	0112      	lsls	r2, r2, #4
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008fe8:	e00a      	b.n	8009000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	4908      	ldr	r1, [pc, #32]	; (8009010 <__NVIC_SetPriority+0x50>)
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	3b04      	subs	r3, #4
 8008ff8:	0112      	lsls	r2, r2, #4
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	440b      	add	r3, r1
 8008ffe:	761a      	strb	r2, [r3, #24]
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	e000e100 	.word	0xe000e100
 8009010:	e000ed00 	.word	0xe000ed00

08009014 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009014:	b580      	push	{r7, lr}
 8009016:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009018:	4b05      	ldr	r3, [pc, #20]	; (8009030 <SysTick_Handler+0x1c>)
 800901a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800901c:	f001 ff16 	bl	800ae4c <xTaskGetSchedulerState>
 8009020:	4603      	mov	r3, r0
 8009022:	2b01      	cmp	r3, #1
 8009024:	d001      	beq.n	800902a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009026:	f002 fcff 	bl	800ba28 <xPortSysTickHandler>
  }
}
 800902a:	bf00      	nop
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	e000e010 	.word	0xe000e010

08009034 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009038:	2100      	movs	r1, #0
 800903a:	f06f 0004 	mvn.w	r0, #4
 800903e:	f7ff ffbf 	bl	8008fc0 <__NVIC_SetPriority>
#endif
}
 8009042:	bf00      	nop
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800904e:	f3ef 8305 	mrs	r3, IPSR
 8009052:	603b      	str	r3, [r7, #0]
  return(result);
 8009054:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800905a:	f06f 0305 	mvn.w	r3, #5
 800905e:	607b      	str	r3, [r7, #4]
 8009060:	e00c      	b.n	800907c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009062:	4b0a      	ldr	r3, [pc, #40]	; (800908c <osKernelInitialize+0x44>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d105      	bne.n	8009076 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800906a:	4b08      	ldr	r3, [pc, #32]	; (800908c <osKernelInitialize+0x44>)
 800906c:	2201      	movs	r2, #1
 800906e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009070:	2300      	movs	r3, #0
 8009072:	607b      	str	r3, [r7, #4]
 8009074:	e002      	b.n	800907c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009076:	f04f 33ff 	mov.w	r3, #4294967295
 800907a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800907c:	687b      	ldr	r3, [r7, #4]
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	200018d0 	.word	0x200018d0

08009090 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009096:	f3ef 8305 	mrs	r3, IPSR
 800909a:	603b      	str	r3, [r7, #0]
  return(result);
 800909c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80090a2:	f06f 0305 	mvn.w	r3, #5
 80090a6:	607b      	str	r3, [r7, #4]
 80090a8:	e010      	b.n	80090cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80090aa:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <osKernelStart+0x48>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d109      	bne.n	80090c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80090b2:	f7ff ffbf 	bl	8009034 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80090b6:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <osKernelStart+0x48>)
 80090b8:	2202      	movs	r2, #2
 80090ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80090bc:	f001 fa6a 	bl	800a594 <vTaskStartScheduler>
      stat = osOK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	607b      	str	r3, [r7, #4]
 80090c4:	e002      	b.n	80090cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80090c6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090cc:	687b      	ldr	r3, [r7, #4]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	200018d0 	.word	0x200018d0

080090dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08e      	sub	sp, #56	; 0x38
 80090e0:	af04      	add	r7, sp, #16
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80090e8:	2300      	movs	r3, #0
 80090ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ec:	f3ef 8305 	mrs	r3, IPSR
 80090f0:	617b      	str	r3, [r7, #20]
  return(result);
 80090f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d17e      	bne.n	80091f6 <osThreadNew+0x11a>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d07b      	beq.n	80091f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80090fe:	2380      	movs	r3, #128	; 0x80
 8009100:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009102:	2318      	movs	r3, #24
 8009104:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009106:	2300      	movs	r3, #0
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800910a:	f04f 33ff 	mov.w	r3, #4294967295
 800910e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d045      	beq.n	80091a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <osThreadNew+0x48>
        name = attr->name;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <osThreadNew+0x6e>
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	2b38      	cmp	r3, #56	; 0x38
 800913c:	d805      	bhi.n	800914a <osThreadNew+0x6e>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <osThreadNew+0x72>
        return (NULL);
 800914a:	2300      	movs	r3, #0
 800914c:	e054      	b.n	80091f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	089b      	lsrs	r3, r3, #2
 800915c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00e      	beq.n	8009184 <osThreadNew+0xa8>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	2bbb      	cmp	r3, #187	; 0xbb
 800916c:	d90a      	bls.n	8009184 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009172:	2b00      	cmp	r3, #0
 8009174:	d006      	beq.n	8009184 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	695b      	ldr	r3, [r3, #20]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <osThreadNew+0xa8>
        mem = 1;
 800917e:	2301      	movs	r3, #1
 8009180:	61bb      	str	r3, [r7, #24]
 8009182:	e010      	b.n	80091a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10c      	bne.n	80091a6 <osThreadNew+0xca>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d108      	bne.n	80091a6 <osThreadNew+0xca>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <osThreadNew+0xca>
          mem = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	61bb      	str	r3, [r7, #24]
 80091a0:	e001      	b.n	80091a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d110      	bne.n	80091ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80091b4:	9202      	str	r2, [sp, #8]
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6a3a      	ldr	r2, [r7, #32]
 80091c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 fffa 	bl	800a1bc <xTaskCreateStatic>
 80091c8:	4603      	mov	r3, r0
 80091ca:	613b      	str	r3, [r7, #16]
 80091cc:	e013      	b.n	80091f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d110      	bne.n	80091f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	f107 0310 	add.w	r3, r7, #16
 80091dc:	9301      	str	r3, [sp, #4]
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f001 f845 	bl	800a276 <xTaskCreate>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d001      	beq.n	80091f6 <osThreadNew+0x11a>
            hTask = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80091f6:	693b      	ldr	r3, [r7, #16]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3728      	adds	r7, #40	; 0x28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009208:	f3ef 8305 	mrs	r3, IPSR
 800920c:	60bb      	str	r3, [r7, #8]
  return(result);
 800920e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <osDelay+0x1c>
    stat = osErrorISR;
 8009214:	f06f 0305 	mvn.w	r3, #5
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	e007      	b.n	800922c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800921c:	2300      	movs	r3, #0
 800921e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 f980 	bl	800a52c <vTaskDelay>
    }
  }

  return (stat);
 800922c:	68fb      	ldr	r3, [r7, #12]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009236:	b580      	push	{r7, lr}
 8009238:	b08a      	sub	sp, #40	; 0x28
 800923a:	af02      	add	r7, sp, #8
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009246:	f3ef 8305 	mrs	r3, IPSR
 800924a:	613b      	str	r3, [r7, #16]
  return(result);
 800924c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800924e:	2b00      	cmp	r3, #0
 8009250:	d175      	bne.n	800933e <osSemaphoreNew+0x108>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d072      	beq.n	800933e <osSemaphoreNew+0x108>
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	429a      	cmp	r2, r3
 800925e:	d86e      	bhi.n	800933e <osSemaphoreNew+0x108>
    mem = -1;
 8009260:	f04f 33ff 	mov.w	r3, #4294967295
 8009264:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d015      	beq.n	8009298 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d006      	beq.n	8009282 <osSemaphoreNew+0x4c>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	2b4f      	cmp	r3, #79	; 0x4f
 800927a:	d902      	bls.n	8009282 <osSemaphoreNew+0x4c>
        mem = 1;
 800927c:	2301      	movs	r3, #1
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	e00c      	b.n	800929c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d108      	bne.n	800929c <osSemaphoreNew+0x66>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d104      	bne.n	800929c <osSemaphoreNew+0x66>
          mem = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	e001      	b.n	800929c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d04c      	beq.n	800933e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d128      	bne.n	80092fc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d10a      	bne.n	80092c6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	2203      	movs	r2, #3
 80092b6:	9200      	str	r2, [sp, #0]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2100      	movs	r1, #0
 80092bc:	2001      	movs	r0, #1
 80092be:	f000 fa07 	bl	80096d0 <xQueueGenericCreateStatic>
 80092c2:	61f8      	str	r0, [r7, #28]
 80092c4:	e005      	b.n	80092d2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80092c6:	2203      	movs	r2, #3
 80092c8:	2100      	movs	r1, #0
 80092ca:	2001      	movs	r0, #1
 80092cc:	f000 fa78 	bl	80097c0 <xQueueGenericCreate>
 80092d0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d022      	beq.n	800931e <osSemaphoreNew+0xe8>
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d01f      	beq.n	800931e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80092de:	2300      	movs	r3, #0
 80092e0:	2200      	movs	r2, #0
 80092e2:	2100      	movs	r1, #0
 80092e4:	69f8      	ldr	r0, [r7, #28]
 80092e6:	f000 fb33 	bl	8009950 <xQueueGenericSend>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d016      	beq.n	800931e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80092f0:	69f8      	ldr	r0, [r7, #28]
 80092f2:	f000 fda7 	bl	8009e44 <vQueueDelete>
            hSemaphore = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	61fb      	str	r3, [r7, #28]
 80092fa:	e010      	b.n	800931e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d108      	bne.n	8009314 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	461a      	mov	r2, r3
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fab5 	bl	800987a <xQueueCreateCountingSemaphoreStatic>
 8009310:	61f8      	str	r0, [r7, #28]
 8009312:	e004      	b.n	800931e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fae6 	bl	80098e8 <xQueueCreateCountingSemaphore>
 800931c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00c      	beq.n	800933e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <osSemaphoreNew+0xfc>
          name = attr->name;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	e001      	b.n	8009336 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009336:	6979      	ldr	r1, [r7, #20]
 8009338:	69f8      	ldr	r0, [r7, #28]
 800933a:	f000 feb7 	bl	800a0ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800933e:	69fb      	ldr	r3, [r7, #28]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009348:	b580      	push	{r7, lr}
 800934a:	b08a      	sub	sp, #40	; 0x28
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009354:	2300      	movs	r3, #0
 8009356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009358:	f3ef 8305 	mrs	r3, IPSR
 800935c:	613b      	str	r3, [r7, #16]
  return(result);
 800935e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009360:	2b00      	cmp	r3, #0
 8009362:	d15f      	bne.n	8009424 <osMessageQueueNew+0xdc>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d05c      	beq.n	8009424 <osMessageQueueNew+0xdc>
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d059      	beq.n	8009424 <osMessageQueueNew+0xdc>
    mem = -1;
 8009370:	f04f 33ff 	mov.w	r3, #4294967295
 8009374:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d029      	beq.n	80093d0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d012      	beq.n	80093aa <osMessageQueueNew+0x62>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	2b4f      	cmp	r3, #79	; 0x4f
 800938a:	d90e      	bls.n	80093aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	695a      	ldr	r2, [r3, #20]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	68b9      	ldr	r1, [r7, #8]
 800939c:	fb01 f303 	mul.w	r3, r1, r3
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d302      	bcc.n	80093aa <osMessageQueueNew+0x62>
        mem = 1;
 80093a4:	2301      	movs	r3, #1
 80093a6:	61bb      	str	r3, [r7, #24]
 80093a8:	e014      	b.n	80093d4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d110      	bne.n	80093d4 <osMessageQueueNew+0x8c>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10c      	bne.n	80093d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d108      	bne.n	80093d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d104      	bne.n	80093d4 <osMessageQueueNew+0x8c>
          mem = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	e001      	b.n	80093d4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d10b      	bne.n	80093f2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2100      	movs	r1, #0
 80093e4:	9100      	str	r1, [sp, #0]
 80093e6:	68b9      	ldr	r1, [r7, #8]
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f971 	bl	80096d0 <xQueueGenericCreateStatic>
 80093ee:	61f8      	str	r0, [r7, #28]
 80093f0:	e008      	b.n	8009404 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d105      	bne.n	8009404 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80093f8:	2200      	movs	r2, #0
 80093fa:	68b9      	ldr	r1, [r7, #8]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f9df 	bl	80097c0 <xQueueGenericCreate>
 8009402:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00c      	beq.n	8009424 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e001      	b.n	800941c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800941c:	6979      	ldr	r1, [r7, #20]
 800941e:	69f8      	ldr	r0, [r7, #28]
 8009420:	f000 fe44 	bl	800a0ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009424:	69fb      	ldr	r3, [r7, #28]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
	...

08009430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	4a07      	ldr	r2, [pc, #28]	; (800945c <vApplicationGetIdleTaskMemory+0x2c>)
 8009440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4a06      	ldr	r2, [pc, #24]	; (8009460 <vApplicationGetIdleTaskMemory+0x30>)
 8009446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2280      	movs	r2, #128	; 0x80
 800944c:	601a      	str	r2, [r3, #0]
}
 800944e:	bf00      	nop
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	200018d4 	.word	0x200018d4
 8009460:	20001990 	.word	0x20001990

08009464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a07      	ldr	r2, [pc, #28]	; (8009490 <vApplicationGetTimerTaskMemory+0x2c>)
 8009474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	4a06      	ldr	r2, [pc, #24]	; (8009494 <vApplicationGetTimerTaskMemory+0x30>)
 800947a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009482:	601a      	str	r2, [r3, #0]
}
 8009484:	bf00      	nop
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	20001b90 	.word	0x20001b90
 8009494:	20001c4c 	.word	0x20001c4c

08009498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f103 0208 	add.w	r2, r3, #8
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f04f 32ff 	mov.w	r2, #4294967295
 80094b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f103 0208 	add.w	r2, r3, #8
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f103 0208 	add.w	r2, r3, #8
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094f2:	b480      	push	{r7}
 80094f4:	b085      	sub	sp, #20
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	683a      	ldr	r2, [r7, #0]
 800951c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	601a      	str	r2, [r3, #0]
}
 800952e:	bf00      	nop
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800953a:	b480      	push	{r7}
 800953c:	b085      	sub	sp, #20
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009550:	d103      	bne.n	800955a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e00c      	b.n	8009574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3308      	adds	r3, #8
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	e002      	b.n	8009568 <vListInsert+0x2e>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	429a      	cmp	r2, r3
 8009572:	d2f6      	bcs.n	8009562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	601a      	str	r2, [r3, #0]
}
 80095a0:	bf00      	nop
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6892      	ldr	r2, [r2, #8]
 80095c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6852      	ldr	r2, [r2, #4]
 80095cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d103      	bne.n	80095e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689a      	ldr	r2, [r3, #8]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	1e5a      	subs	r2, r3, #1
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800962a:	f002 f96b 	bl	800b904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800963a:	fb01 f303 	mul.w	r3, r1, r3
 800963e:	441a      	add	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965a:	3b01      	subs	r3, #1
 800965c:	68f9      	ldr	r1, [r7, #12]
 800965e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	441a      	add	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	22ff      	movs	r2, #255	; 0xff
 800966e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	22ff      	movs	r2, #255	; 0xff
 8009676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d114      	bne.n	80096aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01a      	beq.n	80096be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3310      	adds	r3, #16
 800968c:	4618      	mov	r0, r3
 800968e:	f001 fa1b 	bl	800aac8 <xTaskRemoveFromEventList>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d012      	beq.n	80096be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009698:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <xQueueGenericReset+0xcc>)
 800969a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	e009      	b.n	80096be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3310      	adds	r3, #16
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fef2 	bl	8009498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	3324      	adds	r3, #36	; 0x24
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff feed 	bl	8009498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096be:	f002 f951 	bl	800b964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096c2:	2301      	movs	r3, #1
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	e000ed04 	.word	0xe000ed04

080096d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08e      	sub	sp, #56	; 0x38
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <xQueueGenericCreateStatic+0x52>
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <xQueueGenericCreateStatic+0x56>
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <xQueueGenericCreateStatic+0x58>
 8009726:	2300      	movs	r3, #0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	623b      	str	r3, [r7, #32]
}
 800973e:	bf00      	nop
 8009740:	e7fe      	b.n	8009740 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <xQueueGenericCreateStatic+0x7e>
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <xQueueGenericCreateStatic+0x82>
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <xQueueGenericCreateStatic+0x84>
 8009752:	2300      	movs	r3, #0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61fb      	str	r3, [r7, #28]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800976e:	2350      	movs	r3, #80	; 0x50
 8009770:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2b50      	cmp	r3, #80	; 0x50
 8009776:	d00a      	beq.n	800978e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	61bb      	str	r3, [r7, #24]
}
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800978e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00d      	beq.n	80097b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80097a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	4613      	mov	r3, r2
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f83f 	bl	8009834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3730      	adds	r7, #48	; 0x30
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08a      	sub	sp, #40	; 0x28
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	4613      	mov	r3, r2
 80097cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	613b      	str	r3, [r7, #16]
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
 80097f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	3350      	adds	r3, #80	; 0x50
 80097f8:	4618      	mov	r0, r3
 80097fa:	f002 f9a5 	bl	800bb48 <pvPortMalloc>
 80097fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d011      	beq.n	800982a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	3350      	adds	r3, #80	; 0x50
 800980e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009818:	79fa      	ldrb	r2, [r7, #7]
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	4613      	mov	r3, r2
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	68b9      	ldr	r1, [r7, #8]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f805 	bl	8009834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800982a:	69bb      	ldr	r3, [r7, #24]
	}
 800982c:	4618      	mov	r0, r3
 800982e:	3720      	adds	r7, #32
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d103      	bne.n	8009850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	e002      	b.n	8009856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009862:	2101      	movs	r1, #1
 8009864:	69b8      	ldr	r0, [r7, #24]
 8009866:	f7ff fecb 	bl	8009600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800987a:	b580      	push	{r7, lr}
 800987c:	b08a      	sub	sp, #40	; 0x28
 800987e:	af02      	add	r7, sp, #8
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	61bb      	str	r3, [r7, #24]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d90a      	bls.n	80098c0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	617b      	str	r3, [r7, #20]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80098c0:	2302      	movs	r3, #2
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	2100      	movs	r1, #0
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff ff00 	bl	80096d0 <xQueueGenericCreateStatic>
 80098d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80098de:	69fb      	ldr	r3, [r7, #28]
	}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3720      	adds	r7, #32
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	613b      	str	r3, [r7, #16]
}
 800990a:	bf00      	nop
 800990c:	e7fe      	b.n	800990c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d90a      	bls.n	800992c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60fb      	str	r3, [r7, #12]
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800992c:	2202      	movs	r2, #2
 800992e:	2100      	movs	r1, #0
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff ff45 	bl	80097c0 <xQueueGenericCreate>
 8009936:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009944:	697b      	ldr	r3, [r7, #20]
	}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08e      	sub	sp, #56	; 0x38
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800995e:	2300      	movs	r3, #0
 8009960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <xQueueGenericSend+0x32>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d103      	bne.n	8009990 <xQueueGenericSend+0x40>
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <xQueueGenericSend+0x44>
 8009990:	2301      	movs	r3, #1
 8009992:	e000      	b.n	8009996 <xQueueGenericSend+0x46>
 8009994:	2300      	movs	r3, #0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10a      	bne.n	80099b0 <xQueueGenericSend+0x60>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d103      	bne.n	80099be <xQueueGenericSend+0x6e>
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <xQueueGenericSend+0x72>
 80099be:	2301      	movs	r3, #1
 80099c0:	e000      	b.n	80099c4 <xQueueGenericSend+0x74>
 80099c2:	2300      	movs	r3, #0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xQueueGenericSend+0x8e>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	623b      	str	r3, [r7, #32]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099de:	f001 fa35 	bl	800ae4c <xTaskGetSchedulerState>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d102      	bne.n	80099ee <xQueueGenericSend+0x9e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <xQueueGenericSend+0xa2>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <xQueueGenericSend+0xa4>
 80099f2:	2300      	movs	r3, #0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xQueueGenericSend+0xbe>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	61fb      	str	r3, [r7, #28]
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a0e:	f001 ff79 	bl	800b904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d302      	bcc.n	8009a24 <xQueueGenericSend+0xd4>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d129      	bne.n	8009a78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a2a:	f000 fa2e 	bl	8009e8a <prvCopyDataToQueue>
 8009a2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d010      	beq.n	8009a5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	3324      	adds	r3, #36	; 0x24
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 f843 	bl	800aac8 <xTaskRemoveFromEventList>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d013      	beq.n	8009a70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a48:	4b3f      	ldr	r3, [pc, #252]	; (8009b48 <xQueueGenericSend+0x1f8>)
 8009a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	e00a      	b.n	8009a70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d007      	beq.n	8009a70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a60:	4b39      	ldr	r3, [pc, #228]	; (8009b48 <xQueueGenericSend+0x1f8>)
 8009a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a70:	f001 ff78 	bl	800b964 <vPortExitCritical>
				return pdPASS;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e063      	b.n	8009b40 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a7e:	f001 ff71 	bl	800b964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e05c      	b.n	8009b40 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a8c:	f107 0314 	add.w	r3, r7, #20
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 f87d 	bl	800ab90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a96:	2301      	movs	r3, #1
 8009a98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a9a:	f001 ff63 	bl	800b964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a9e:	f000 fde9 	bl	800a674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aa2:	f001 ff2f 	bl	800b904 <vPortEnterCritical>
 8009aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aac:	b25b      	sxtb	r3, r3
 8009aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab2:	d103      	bne.n	8009abc <xQueueGenericSend+0x16c>
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ac2:	b25b      	sxtb	r3, r3
 8009ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac8:	d103      	bne.n	8009ad2 <xQueueGenericSend+0x182>
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad2:	f001 ff47 	bl	800b964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ad6:	1d3a      	adds	r2, r7, #4
 8009ad8:	f107 0314 	add.w	r3, r7, #20
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f001 f86c 	bl	800abbc <xTaskCheckForTimeOut>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d124      	bne.n	8009b34 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aec:	f000 fac5 	bl	800a07a <prvIsQueueFull>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d018      	beq.n	8009b28 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	3310      	adds	r3, #16
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4611      	mov	r1, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f000 ff92 	bl	800aa28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b06:	f000 fa50 	bl	8009faa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b0a:	f000 fdc1 	bl	800a690 <xTaskResumeAll>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f47f af7c 	bne.w	8009a0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009b16:	4b0c      	ldr	r3, [pc, #48]	; (8009b48 <xQueueGenericSend+0x1f8>)
 8009b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	e772      	b.n	8009a0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b2a:	f000 fa3e 	bl	8009faa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b2e:	f000 fdaf 	bl	800a690 <xTaskResumeAll>
 8009b32:	e76c      	b.n	8009a0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b36:	f000 fa38 	bl	8009faa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b3a:	f000 fda9 	bl	800a690 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3738      	adds	r7, #56	; 0x38
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b090      	sub	sp, #64	; 0x40
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10a      	bne.n	8009b7a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b76:	bf00      	nop
 8009b78:	e7fe      	b.n	8009b78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d103      	bne.n	8009b88 <xQueueGenericSendFromISR+0x3c>
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <xQueueGenericSendFromISR+0x40>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e000      	b.n	8009b8e <xQueueGenericSendFromISR+0x42>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ba4:	bf00      	nop
 8009ba6:	e7fe      	b.n	8009ba6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d103      	bne.n	8009bb6 <xQueueGenericSendFromISR+0x6a>
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <xQueueGenericSendFromISR+0x6e>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <xQueueGenericSendFromISR+0x70>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	623b      	str	r3, [r7, #32]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bd6:	f001 ff77 	bl	800bac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009bda:	f3ef 8211 	mrs	r2, BASEPRI
 8009bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	61fa      	str	r2, [r7, #28]
 8009bf0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009bf2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bf4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d302      	bcc.n	8009c08 <xQueueGenericSendFromISR+0xbc>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d12f      	bne.n	8009c68 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	68b9      	ldr	r1, [r7, #8]
 8009c1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c1e:	f000 f934 	bl	8009e8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2a:	d112      	bne.n	8009c52 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d016      	beq.n	8009c62 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	3324      	adds	r3, #36	; 0x24
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 ff45 	bl	800aac8 <xTaskRemoveFromEventList>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00e      	beq.n	8009c62 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00b      	beq.n	8009c62 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	e007      	b.n	8009c62 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c56:	3301      	adds	r3, #1
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	b25a      	sxtb	r2, r3
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009c62:	2301      	movs	r3, #1
 8009c64:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009c66:	e001      	b.n	8009c6c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c76:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3740      	adds	r7, #64	; 0x40
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08c      	sub	sp, #48	; 0x30
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <xQueueReceive+0x30>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	623b      	str	r3, [r7, #32]
}
 8009cb0:	bf00      	nop
 8009cb2:	e7fe      	b.n	8009cb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <xQueueReceive+0x3e>
 8009cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <xQueueReceive+0x42>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <xQueueReceive+0x44>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xQueueReceive+0x5e>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	61fb      	str	r3, [r7, #28]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ce2:	f001 f8b3 	bl	800ae4c <xTaskGetSchedulerState>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <xQueueReceive+0x6e>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <xQueueReceive+0x72>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e000      	b.n	8009cf8 <xQueueReceive+0x74>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <xQueueReceive+0x8e>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	61bb      	str	r3, [r7, #24]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d12:	f001 fdf7 	bl	800b904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d01f      	beq.n	8009d62 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d22:	68b9      	ldr	r1, [r7, #8]
 8009d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d26:	f000 f91a 	bl	8009f5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2c:	1e5a      	subs	r2, r3, #1
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00f      	beq.n	8009d5a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	3310      	adds	r3, #16
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fec2 	bl	800aac8 <xTaskRemoveFromEventList>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d4a:	4b3d      	ldr	r3, [pc, #244]	; (8009e40 <xQueueReceive+0x1bc>)
 8009d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d5a:	f001 fe03 	bl	800b964 <vPortExitCritical>
				return pdPASS;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e069      	b.n	8009e36 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d103      	bne.n	8009d70 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d68:	f001 fdfc 	bl	800b964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	e062      	b.n	8009e36 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d106      	bne.n	8009d84 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d76:	f107 0310 	add.w	r3, r7, #16
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 ff08 	bl	800ab90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d80:	2301      	movs	r3, #1
 8009d82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d84:	f001 fdee 	bl	800b964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d88:	f000 fc74 	bl	800a674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d8c:	f001 fdba 	bl	800b904 <vPortEnterCritical>
 8009d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d96:	b25b      	sxtb	r3, r3
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d103      	bne.n	8009da6 <xQueueReceive+0x122>
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dac:	b25b      	sxtb	r3, r3
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d103      	bne.n	8009dbc <xQueueReceive+0x138>
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dbc:	f001 fdd2 	bl	800b964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dc0:	1d3a      	adds	r2, r7, #4
 8009dc2:	f107 0310 	add.w	r3, r7, #16
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 fef7 	bl	800abbc <xTaskCheckForTimeOut>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d123      	bne.n	8009e1c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dd6:	f000 f93a 	bl	800a04e <prvIsQueueEmpty>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d017      	beq.n	8009e10 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	3324      	adds	r3, #36	; 0x24
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	4611      	mov	r1, r2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fe1d 	bl	800aa28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009df0:	f000 f8db 	bl	8009faa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009df4:	f000 fc4c 	bl	800a690 <xTaskResumeAll>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d189      	bne.n	8009d12 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009dfe:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <xQueueReceive+0x1bc>)
 8009e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	e780      	b.n	8009d12 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e12:	f000 f8ca 	bl	8009faa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e16:	f000 fc3b 	bl	800a690 <xTaskResumeAll>
 8009e1a:	e77a      	b.n	8009d12 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e1e:	f000 f8c4 	bl	8009faa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e22:	f000 fc35 	bl	800a690 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e28:	f000 f911 	bl	800a04e <prvIsQueueEmpty>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f43f af6f 	beq.w	8009d12 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3730      	adds	r7, #48	; 0x30
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	e000ed04 	.word	0xe000ed04

08009e44 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10a      	bne.n	8009e6c <vQueueDelete+0x28>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	60bb      	str	r3, [r7, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	e7fe      	b.n	8009e6a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 f947 	bl	800a100 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f001 ff2f 	bl	800bce0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b086      	sub	sp, #24
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	60f8      	str	r0, [r7, #12]
 8009e92:	60b9      	str	r1, [r7, #8]
 8009e94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10d      	bne.n	8009ec4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d14d      	bne.n	8009f4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 ffe7 	bl	800ae88 <xTaskPriorityDisinherit>
 8009eba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	609a      	str	r2, [r3, #8]
 8009ec2:	e043      	b.n	8009f4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d119      	bne.n	8009efe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6858      	ldr	r0, [r3, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	68b9      	ldr	r1, [r7, #8]
 8009ed6:	f002 f95d 	bl	800c194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	441a      	add	r2, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d32b      	bcc.n	8009f4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	605a      	str	r2, [r3, #4]
 8009efc:	e026      	b.n	8009f4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68d8      	ldr	r0, [r3, #12]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f06:	461a      	mov	r2, r3
 8009f08:	68b9      	ldr	r1, [r7, #8]
 8009f0a:	f002 f943 	bl	800c194 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	425b      	negs	r3, r3
 8009f18:	441a      	add	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d207      	bcs.n	8009f3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	689a      	ldr	r2, [r3, #8]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	425b      	negs	r3, r3
 8009f34:	441a      	add	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d105      	bne.n	8009f4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009f54:	697b      	ldr	r3, [r7, #20]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d018      	beq.n	8009fa2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f78:	441a      	add	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d303      	bcc.n	8009f92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68d9      	ldr	r1, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6838      	ldr	r0, [r7, #0]
 8009f9e:	f002 f8f9 	bl	800c194 <memcpy>
	}
}
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fb2:	f001 fca7 	bl	800b904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fbe:	e011      	b.n	8009fe4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d012      	beq.n	8009fee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3324      	adds	r3, #36	; 0x24
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 fd7b 	bl	800aac8 <xTaskRemoveFromEventList>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fd8:	f000 fe52 	bl	800ac80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dce9      	bgt.n	8009fc0 <prvUnlockQueue+0x16>
 8009fec:	e000      	b.n	8009ff0 <prvUnlockQueue+0x46>
					break;
 8009fee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	22ff      	movs	r2, #255	; 0xff
 8009ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ff8:	f001 fcb4 	bl	800b964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ffc:	f001 fc82 	bl	800b904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a006:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a008:	e011      	b.n	800a02e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d012      	beq.n	800a038 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3310      	adds	r3, #16
 800a016:	4618      	mov	r0, r3
 800a018:	f000 fd56 	bl	800aac8 <xTaskRemoveFromEventList>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a022:	f000 fe2d 	bl	800ac80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	3b01      	subs	r3, #1
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a02e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a032:	2b00      	cmp	r3, #0
 800a034:	dce9      	bgt.n	800a00a <prvUnlockQueue+0x60>
 800a036:	e000      	b.n	800a03a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a038:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	22ff      	movs	r2, #255	; 0xff
 800a03e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a042:	f001 fc8f 	bl	800b964 <vPortExitCritical>
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a056:	f001 fc55 	bl	800b904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a062:	2301      	movs	r3, #1
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e001      	b.n	800a06c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a06c:	f001 fc7a 	bl	800b964 <vPortExitCritical>

	return xReturn;
 800a070:	68fb      	ldr	r3, [r7, #12]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a082:	f001 fc3f 	bl	800b904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08e:	429a      	cmp	r2, r3
 800a090:	d102      	bne.n	800a098 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a092:	2301      	movs	r3, #1
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	e001      	b.n	800a09c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a098:	2300      	movs	r3, #0
 800a09a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a09c:	f001 fc62 	bl	800b964 <vPortExitCritical>

	return xReturn;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
	...

0800a0ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	e014      	b.n	800a0e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0bc:	4a0f      	ldr	r2, [pc, #60]	; (800a0fc <vQueueAddToRegistry+0x50>)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10b      	bne.n	800a0e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0c8:	490c      	ldr	r1, [pc, #48]	; (800a0fc <vQueueAddToRegistry+0x50>)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0d2:	4a0a      	ldr	r2, [pc, #40]	; (800a0fc <vQueueAddToRegistry+0x50>)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	4413      	add	r3, r2
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0de:	e006      	b.n	800a0ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60fb      	str	r3, [r7, #12]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b07      	cmp	r3, #7
 800a0ea:	d9e7      	bls.n	800a0bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	2000204c 	.word	0x2000204c

0800a100 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a108:	2300      	movs	r3, #0
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	e016      	b.n	800a13c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a10e:	4a10      	ldr	r2, [pc, #64]	; (800a150 <vQueueUnregisterQueue+0x50>)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	4413      	add	r3, r2
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d10b      	bne.n	800a136 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a11e:	4a0c      	ldr	r2, [pc, #48]	; (800a150 <vQueueUnregisterQueue+0x50>)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2100      	movs	r1, #0
 800a124:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a128:	4a09      	ldr	r2, [pc, #36]	; (800a150 <vQueueUnregisterQueue+0x50>)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	4413      	add	r3, r2
 800a130:	2200      	movs	r2, #0
 800a132:	605a      	str	r2, [r3, #4]
				break;
 800a134:	e006      	b.n	800a144 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3301      	adds	r3, #1
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b07      	cmp	r3, #7
 800a140:	d9e5      	bls.n	800a10e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a142:	bf00      	nop
 800a144:	bf00      	nop
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	2000204c 	.word	0x2000204c

0800a154 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a164:	f001 fbce 	bl	800b904 <vPortEnterCritical>
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a16e:	b25b      	sxtb	r3, r3
 800a170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a174:	d103      	bne.n	800a17e <vQueueWaitForMessageRestricted+0x2a>
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a184:	b25b      	sxtb	r3, r3
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18a:	d103      	bne.n	800a194 <vQueueWaitForMessageRestricted+0x40>
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a194:	f001 fbe6 	bl	800b964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d106      	bne.n	800a1ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	3324      	adds	r3, #36	; 0x24
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 fc61 	bl	800aa70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a1ae:	6978      	ldr	r0, [r7, #20]
 800a1b0:	f7ff fefb 	bl	8009faa <prvUnlockQueue>
	}
 800a1b4:	bf00      	nop
 800a1b6:	3718      	adds	r7, #24
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08e      	sub	sp, #56	; 0x38
 800a1c0:	af04      	add	r7, sp, #16
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
 800a1c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	623b      	str	r3, [r7, #32]
}
 800a1e2:	bf00      	nop
 800a1e4:	e7fe      	b.n	800a1e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <xTaskCreateStatic+0x46>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	61fb      	str	r3, [r7, #28]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a202:	23bc      	movs	r3, #188	; 0xbc
 800a204:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2bbc      	cmp	r3, #188	; 0xbc
 800a20a:	d00a      	beq.n	800a222 <xTaskCreateStatic+0x66>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	61bb      	str	r3, [r7, #24]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a222:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	2b00      	cmp	r3, #0
 800a228:	d01e      	beq.n	800a268 <xTaskCreateStatic+0xac>
 800a22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01b      	beq.n	800a268 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a238:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	2202      	movs	r2, #2
 800a23e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a242:	2300      	movs	r3, #0
 800a244:	9303      	str	r3, [sp, #12]
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	9302      	str	r3, [sp, #8]
 800a24a:	f107 0314 	add.w	r3, r7, #20
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	68b9      	ldr	r1, [r7, #8]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 f850 	bl	800a300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a262:	f000 f8f3 	bl	800a44c <prvAddNewTaskToReadyList>
 800a266:	e001      	b.n	800a26c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a26c:	697b      	ldr	r3, [r7, #20]
	}
 800a26e:	4618      	mov	r0, r3
 800a270:	3728      	adds	r7, #40	; 0x28
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a276:	b580      	push	{r7, lr}
 800a278:	b08c      	sub	sp, #48	; 0x30
 800a27a:	af04      	add	r7, sp, #16
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	603b      	str	r3, [r7, #0]
 800a282:	4613      	mov	r3, r2
 800a284:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a286:	88fb      	ldrh	r3, [r7, #6]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f001 fc5c 	bl	800bb48 <pvPortMalloc>
 800a290:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00e      	beq.n	800a2b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a298:	20bc      	movs	r0, #188	; 0xbc
 800a29a:	f001 fc55 	bl	800bb48 <pvPortMalloc>
 800a29e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30
 800a2ac:	e005      	b.n	800a2ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2ae:	6978      	ldr	r0, [r7, #20]
 800a2b0:	f001 fd16 	bl	800bce0 <vPortFree>
 800a2b4:	e001      	b.n	800a2ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d017      	beq.n	800a2f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2c8:	88fa      	ldrh	r2, [r7, #6]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9303      	str	r3, [sp, #12]
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	9302      	str	r3, [sp, #8]
 800a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 f80e 	bl	800a300 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2e4:	69f8      	ldr	r0, [r7, #28]
 800a2e6:	f000 f8b1 	bl	800a44c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	e002      	b.n	800a2f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2f6:	69bb      	ldr	r3, [r7, #24]
	}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3720      	adds	r7, #32
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	461a      	mov	r2, r3
 800a318:	21a5      	movs	r1, #165	; 0xa5
 800a31a:	f001 ff49 	bl	800c1b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a328:	3b01      	subs	r3, #1
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	f023 0307 	bic.w	r3, r3, #7
 800a336:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00a      	beq.n	800a358 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	617b      	str	r3, [r7, #20]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d01f      	beq.n	800a39e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a35e:	2300      	movs	r3, #0
 800a360:	61fb      	str	r3, [r7, #28]
 800a362:	e012      	b.n	800a38a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	7819      	ldrb	r1, [r3, #0]
 800a36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	4413      	add	r3, r2
 800a372:	3334      	adds	r3, #52	; 0x34
 800a374:	460a      	mov	r2, r1
 800a376:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	4413      	add	r3, r2
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d006      	beq.n	800a392 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	3301      	adds	r3, #1
 800a388:	61fb      	str	r3, [r7, #28]
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	2b0f      	cmp	r3, #15
 800a38e:	d9e9      	bls.n	800a364 <prvInitialiseNewTask+0x64>
 800a390:	e000      	b.n	800a394 <prvInitialiseNewTask+0x94>
			{
				break;
 800a392:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	2200      	movs	r2, #0
 800a398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a39c:	e003      	b.n	800a3a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a8:	2b37      	cmp	r3, #55	; 0x37
 800a3aa:	d901      	bls.n	800a3b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3ac:	2337      	movs	r3, #55	; 0x37
 800a3ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	2200      	movs	r2, #0
 800a3c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff f886 	bl	80094d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	3318      	adds	r3, #24
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7ff f881 	bl	80094d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fe:	3354      	adds	r3, #84	; 0x54
 800a400:	2260      	movs	r2, #96	; 0x60
 800a402:	2100      	movs	r1, #0
 800a404:	4618      	mov	r0, r3
 800a406:	f001 fed3 	bl	800c1b0 <memset>
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	4a0c      	ldr	r2, [pc, #48]	; (800a440 <prvInitialiseNewTask+0x140>)
 800a40e:	659a      	str	r2, [r3, #88]	; 0x58
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	4a0c      	ldr	r2, [pc, #48]	; (800a444 <prvInitialiseNewTask+0x144>)
 800a414:	65da      	str	r2, [r3, #92]	; 0x5c
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	4a0b      	ldr	r2, [pc, #44]	; (800a448 <prvInitialiseNewTask+0x148>)
 800a41a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a41c:	683a      	ldr	r2, [r7, #0]
 800a41e:	68f9      	ldr	r1, [r7, #12]
 800a420:	69b8      	ldr	r0, [r7, #24]
 800a422:	f001 f941 	bl	800b6a8 <pxPortInitialiseStack>
 800a426:	4602      	mov	r2, r0
 800a428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a436:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a438:	bf00      	nop
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	0800e248 	.word	0x0800e248
 800a444:	0800e268 	.word	0x0800e268
 800a448:	0800e228 	.word	0x0800e228

0800a44c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a454:	f001 fa56 	bl	800b904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a458:	4b2d      	ldr	r3, [pc, #180]	; (800a510 <prvAddNewTaskToReadyList+0xc4>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3301      	adds	r3, #1
 800a45e:	4a2c      	ldr	r2, [pc, #176]	; (800a510 <prvAddNewTaskToReadyList+0xc4>)
 800a460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a462:	4b2c      	ldr	r3, [pc, #176]	; (800a514 <prvAddNewTaskToReadyList+0xc8>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d109      	bne.n	800a47e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a46a:	4a2a      	ldr	r2, [pc, #168]	; (800a514 <prvAddNewTaskToReadyList+0xc8>)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a470:	4b27      	ldr	r3, [pc, #156]	; (800a510 <prvAddNewTaskToReadyList+0xc4>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d110      	bne.n	800a49a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a478:	f000 fc26 	bl	800acc8 <prvInitialiseTaskLists>
 800a47c:	e00d      	b.n	800a49a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a47e:	4b26      	ldr	r3, [pc, #152]	; (800a518 <prvAddNewTaskToReadyList+0xcc>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d109      	bne.n	800a49a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a486:	4b23      	ldr	r3, [pc, #140]	; (800a514 <prvAddNewTaskToReadyList+0xc8>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a490:	429a      	cmp	r2, r3
 800a492:	d802      	bhi.n	800a49a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a494:	4a1f      	ldr	r2, [pc, #124]	; (800a514 <prvAddNewTaskToReadyList+0xc8>)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a49a:	4b20      	ldr	r3, [pc, #128]	; (800a51c <prvAddNewTaskToReadyList+0xd0>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	4a1e      	ldr	r2, [pc, #120]	; (800a51c <prvAddNewTaskToReadyList+0xd0>)
 800a4a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a4a4:	4b1d      	ldr	r3, [pc, #116]	; (800a51c <prvAddNewTaskToReadyList+0xd0>)
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4b1b      	ldr	r3, [pc, #108]	; (800a520 <prvAddNewTaskToReadyList+0xd4>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d903      	bls.n	800a4c0 <prvAddNewTaskToReadyList+0x74>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4bc:	4a18      	ldr	r2, [pc, #96]	; (800a520 <prvAddNewTaskToReadyList+0xd4>)
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4a15      	ldr	r2, [pc, #84]	; (800a524 <prvAddNewTaskToReadyList+0xd8>)
 800a4ce:	441a      	add	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	3304      	adds	r3, #4
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	f7ff f80b 	bl	80094f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4dc:	f001 fa42 	bl	800b964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4e0:	4b0d      	ldr	r3, [pc, #52]	; (800a518 <prvAddNewTaskToReadyList+0xcc>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00e      	beq.n	800a506 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4e8:	4b0a      	ldr	r3, [pc, #40]	; (800a514 <prvAddNewTaskToReadyList+0xc8>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d207      	bcs.n	800a506 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <prvAddNewTaskToReadyList+0xdc>)
 800a4f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	f3bf 8f4f 	dsb	sy
 800a502:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20002560 	.word	0x20002560
 800a514:	2000208c 	.word	0x2000208c
 800a518:	2000256c 	.word	0x2000256c
 800a51c:	2000257c 	.word	0x2000257c
 800a520:	20002568 	.word	0x20002568
 800a524:	20002090 	.word	0x20002090
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d017      	beq.n	800a56e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <vTaskDelay+0x60>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <vTaskDelay+0x30>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60bb      	str	r3, [r7, #8]
}
 800a558:	bf00      	nop
 800a55a:	e7fe      	b.n	800a55a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a55c:	f000 f88a 	bl	800a674 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a560:	2100      	movs	r1, #0
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fcfe 	bl	800af64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a568:	f000 f892 	bl	800a690 <xTaskResumeAll>
 800a56c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d107      	bne.n	800a584 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a574:	4b06      	ldr	r3, [pc, #24]	; (800a590 <vTaskDelay+0x64>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a584:	bf00      	nop
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	20002588 	.word	0x20002588
 800a590:	e000ed04 	.word	0xe000ed04

0800a594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08a      	sub	sp, #40	; 0x28
 800a598:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a59a:	2300      	movs	r3, #0
 800a59c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5a2:	463a      	mov	r2, r7
 800a5a4:	1d39      	adds	r1, r7, #4
 800a5a6:	f107 0308 	add.w	r3, r7, #8
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe ff40 	bl	8009430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	9202      	str	r2, [sp, #8]
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	460a      	mov	r2, r1
 800a5c2:	4924      	ldr	r1, [pc, #144]	; (800a654 <vTaskStartScheduler+0xc0>)
 800a5c4:	4824      	ldr	r0, [pc, #144]	; (800a658 <vTaskStartScheduler+0xc4>)
 800a5c6:	f7ff fdf9 	bl	800a1bc <xTaskCreateStatic>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	4a23      	ldr	r2, [pc, #140]	; (800a65c <vTaskStartScheduler+0xc8>)
 800a5ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5d0:	4b22      	ldr	r3, [pc, #136]	; (800a65c <vTaskStartScheduler+0xc8>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	617b      	str	r3, [r7, #20]
 800a5dc:	e001      	b.n	800a5e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d102      	bne.n	800a5ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a5e8:	f000 fd10 	bl	800b00c <xTimerCreateTimerTask>
 800a5ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d11b      	bne.n	800a62c <vTaskStartScheduler+0x98>
	__asm volatile
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	613b      	str	r3, [r7, #16]
}
 800a606:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a608:	4b15      	ldr	r3, [pc, #84]	; (800a660 <vTaskStartScheduler+0xcc>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3354      	adds	r3, #84	; 0x54
 800a60e:	4a15      	ldr	r2, [pc, #84]	; (800a664 <vTaskStartScheduler+0xd0>)
 800a610:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a612:	4b15      	ldr	r3, [pc, #84]	; (800a668 <vTaskStartScheduler+0xd4>)
 800a614:	f04f 32ff 	mov.w	r2, #4294967295
 800a618:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a61a:	4b14      	ldr	r3, [pc, #80]	; (800a66c <vTaskStartScheduler+0xd8>)
 800a61c:	2201      	movs	r2, #1
 800a61e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a620:	4b13      	ldr	r3, [pc, #76]	; (800a670 <vTaskStartScheduler+0xdc>)
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a626:	f001 f8cb 	bl	800b7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a62a:	e00e      	b.n	800a64a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d10a      	bne.n	800a64a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	60fb      	str	r3, [r7, #12]
}
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <vTaskStartScheduler+0xb4>
}
 800a64a:	bf00      	nop
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	0800e17c 	.word	0x0800e17c
 800a658:	0800ac99 	.word	0x0800ac99
 800a65c:	20002584 	.word	0x20002584
 800a660:	2000208c 	.word	0x2000208c
 800a664:	20000010 	.word	0x20000010
 800a668:	20002580 	.word	0x20002580
 800a66c:	2000256c 	.word	0x2000256c
 800a670:	20002564 	.word	0x20002564

0800a674 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a674:	b480      	push	{r7}
 800a676:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a678:	4b04      	ldr	r3, [pc, #16]	; (800a68c <vTaskSuspendAll+0x18>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3301      	adds	r3, #1
 800a67e:	4a03      	ldr	r2, [pc, #12]	; (800a68c <vTaskSuspendAll+0x18>)
 800a680:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a682:	bf00      	nop
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	20002588 	.word	0x20002588

0800a690 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a69e:	4b42      	ldr	r3, [pc, #264]	; (800a7a8 <xTaskResumeAll+0x118>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10a      	bne.n	800a6bc <xTaskResumeAll+0x2c>
	__asm volatile
 800a6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6aa:	f383 8811 	msr	BASEPRI, r3
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	f3bf 8f4f 	dsb	sy
 800a6b6:	603b      	str	r3, [r7, #0]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6bc:	f001 f922 	bl	800b904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6c0:	4b39      	ldr	r3, [pc, #228]	; (800a7a8 <xTaskResumeAll+0x118>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	4a38      	ldr	r2, [pc, #224]	; (800a7a8 <xTaskResumeAll+0x118>)
 800a6c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ca:	4b37      	ldr	r3, [pc, #220]	; (800a7a8 <xTaskResumeAll+0x118>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d162      	bne.n	800a798 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6d2:	4b36      	ldr	r3, [pc, #216]	; (800a7ac <xTaskResumeAll+0x11c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d05e      	beq.n	800a798 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6da:	e02f      	b.n	800a73c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6dc:	4b34      	ldr	r3, [pc, #208]	; (800a7b0 <xTaskResumeAll+0x120>)
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	3318      	adds	r3, #24
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe ff5f 	bl	80095ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe ff5a 	bl	80095ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fc:	4b2d      	ldr	r3, [pc, #180]	; (800a7b4 <xTaskResumeAll+0x124>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	429a      	cmp	r2, r3
 800a702:	d903      	bls.n	800a70c <xTaskResumeAll+0x7c>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	4a2a      	ldr	r2, [pc, #168]	; (800a7b4 <xTaskResumeAll+0x124>)
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a710:	4613      	mov	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4a27      	ldr	r2, [pc, #156]	; (800a7b8 <xTaskResumeAll+0x128>)
 800a71a:	441a      	add	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3304      	adds	r3, #4
 800a720:	4619      	mov	r1, r3
 800a722:	4610      	mov	r0, r2
 800a724:	f7fe fee5 	bl	80094f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a72c:	4b23      	ldr	r3, [pc, #140]	; (800a7bc <xTaskResumeAll+0x12c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a732:	429a      	cmp	r2, r3
 800a734:	d302      	bcc.n	800a73c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a736:	4b22      	ldr	r3, [pc, #136]	; (800a7c0 <xTaskResumeAll+0x130>)
 800a738:	2201      	movs	r2, #1
 800a73a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a73c:	4b1c      	ldr	r3, [pc, #112]	; (800a7b0 <xTaskResumeAll+0x120>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1cb      	bne.n	800a6dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a74a:	f000 fb5f 	bl	800ae0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a74e:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <xTaskResumeAll+0x134>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d010      	beq.n	800a77c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a75a:	f000 f847 	bl	800a7ec <xTaskIncrementTick>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a764:	4b16      	ldr	r3, [pc, #88]	; (800a7c0 <xTaskResumeAll+0x130>)
 800a766:	2201      	movs	r2, #1
 800a768:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1f1      	bne.n	800a75a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a776:	4b13      	ldr	r3, [pc, #76]	; (800a7c4 <xTaskResumeAll+0x134>)
 800a778:	2200      	movs	r2, #0
 800a77a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a77c:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <xTaskResumeAll+0x130>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d009      	beq.n	800a798 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a784:	2301      	movs	r3, #1
 800a786:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a788:	4b0f      	ldr	r3, [pc, #60]	; (800a7c8 <xTaskResumeAll+0x138>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a798:	f001 f8e4 	bl	800b964 <vPortExitCritical>

	return xAlreadyYielded;
 800a79c:	68bb      	ldr	r3, [r7, #8]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20002588 	.word	0x20002588
 800a7ac:	20002560 	.word	0x20002560
 800a7b0:	20002520 	.word	0x20002520
 800a7b4:	20002568 	.word	0x20002568
 800a7b8:	20002090 	.word	0x20002090
 800a7bc:	2000208c 	.word	0x2000208c
 800a7c0:	20002574 	.word	0x20002574
 800a7c4:	20002570 	.word	0x20002570
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7d2:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <xTaskGetTickCount+0x1c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7d8:	687b      	ldr	r3, [r7, #4]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20002564 	.word	0x20002564

0800a7ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7f6:	4b4f      	ldr	r3, [pc, #316]	; (800a934 <xTaskIncrementTick+0x148>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f040 808f 	bne.w	800a91e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a800:	4b4d      	ldr	r3, [pc, #308]	; (800a938 <xTaskIncrementTick+0x14c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3301      	adds	r3, #1
 800a806:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a808:	4a4b      	ldr	r2, [pc, #300]	; (800a938 <xTaskIncrementTick+0x14c>)
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d120      	bne.n	800a856 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a814:	4b49      	ldr	r3, [pc, #292]	; (800a93c <xTaskIncrementTick+0x150>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00a      	beq.n	800a834 <xTaskIncrementTick+0x48>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	603b      	str	r3, [r7, #0]
}
 800a830:	bf00      	nop
 800a832:	e7fe      	b.n	800a832 <xTaskIncrementTick+0x46>
 800a834:	4b41      	ldr	r3, [pc, #260]	; (800a93c <xTaskIncrementTick+0x150>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	4b41      	ldr	r3, [pc, #260]	; (800a940 <xTaskIncrementTick+0x154>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a3f      	ldr	r2, [pc, #252]	; (800a93c <xTaskIncrementTick+0x150>)
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	4a3f      	ldr	r2, [pc, #252]	; (800a940 <xTaskIncrementTick+0x154>)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	4b3e      	ldr	r3, [pc, #248]	; (800a944 <xTaskIncrementTick+0x158>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3301      	adds	r3, #1
 800a84e:	4a3d      	ldr	r2, [pc, #244]	; (800a944 <xTaskIncrementTick+0x158>)
 800a850:	6013      	str	r3, [r2, #0]
 800a852:	f000 fadb 	bl	800ae0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a856:	4b3c      	ldr	r3, [pc, #240]	; (800a948 <xTaskIncrementTick+0x15c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d349      	bcc.n	800a8f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a860:	4b36      	ldr	r3, [pc, #216]	; (800a93c <xTaskIncrementTick+0x150>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d104      	bne.n	800a874 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a86a:	4b37      	ldr	r3, [pc, #220]	; (800a948 <xTaskIncrementTick+0x15c>)
 800a86c:	f04f 32ff 	mov.w	r2, #4294967295
 800a870:	601a      	str	r2, [r3, #0]
					break;
 800a872:	e03f      	b.n	800a8f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a874:	4b31      	ldr	r3, [pc, #196]	; (800a93c <xTaskIncrementTick+0x150>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d203      	bcs.n	800a894 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a88c:	4a2e      	ldr	r2, [pc, #184]	; (800a948 <xTaskIncrementTick+0x15c>)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a892:	e02f      	b.n	800a8f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	3304      	adds	r3, #4
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe fe87 	bl	80095ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d004      	beq.n	800a8b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	3318      	adds	r3, #24
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe fe7e 	bl	80095ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b4:	4b25      	ldr	r3, [pc, #148]	; (800a94c <xTaskIncrementTick+0x160>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d903      	bls.n	800a8c4 <xTaskIncrementTick+0xd8>
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	4a22      	ldr	r2, [pc, #136]	; (800a94c <xTaskIncrementTick+0x160>)
 800a8c2:	6013      	str	r3, [r2, #0]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4a1f      	ldr	r2, [pc, #124]	; (800a950 <xTaskIncrementTick+0x164>)
 800a8d2:	441a      	add	r2, r3
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	3304      	adds	r3, #4
 800a8d8:	4619      	mov	r1, r3
 800a8da:	4610      	mov	r0, r2
 800a8dc:	f7fe fe09 	bl	80094f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e4:	4b1b      	ldr	r3, [pc, #108]	; (800a954 <xTaskIncrementTick+0x168>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d3b8      	bcc.n	800a860 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8f2:	e7b5      	b.n	800a860 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8f4:	4b17      	ldr	r3, [pc, #92]	; (800a954 <xTaskIncrementTick+0x168>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fa:	4915      	ldr	r1, [pc, #84]	; (800a950 <xTaskIncrementTick+0x164>)
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	440b      	add	r3, r1
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d901      	bls.n	800a910 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a90c:	2301      	movs	r3, #1
 800a90e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a910:	4b11      	ldr	r3, [pc, #68]	; (800a958 <xTaskIncrementTick+0x16c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a918:	2301      	movs	r3, #1
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	e004      	b.n	800a928 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a91e:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <xTaskIncrementTick+0x170>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a0d      	ldr	r2, [pc, #52]	; (800a95c <xTaskIncrementTick+0x170>)
 800a926:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a928:	697b      	ldr	r3, [r7, #20]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	20002588 	.word	0x20002588
 800a938:	20002564 	.word	0x20002564
 800a93c:	20002518 	.word	0x20002518
 800a940:	2000251c 	.word	0x2000251c
 800a944:	20002578 	.word	0x20002578
 800a948:	20002580 	.word	0x20002580
 800a94c:	20002568 	.word	0x20002568
 800a950:	20002090 	.word	0x20002090
 800a954:	2000208c 	.word	0x2000208c
 800a958:	20002574 	.word	0x20002574
 800a95c:	20002570 	.word	0x20002570

0800a960 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a966:	4b2a      	ldr	r3, [pc, #168]	; (800aa10 <vTaskSwitchContext+0xb0>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a96e:	4b29      	ldr	r3, [pc, #164]	; (800aa14 <vTaskSwitchContext+0xb4>)
 800a970:	2201      	movs	r2, #1
 800a972:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a974:	e046      	b.n	800aa04 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a976:	4b27      	ldr	r3, [pc, #156]	; (800aa14 <vTaskSwitchContext+0xb4>)
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a97c:	4b26      	ldr	r3, [pc, #152]	; (800aa18 <vTaskSwitchContext+0xb8>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	e010      	b.n	800a9a6 <vTaskSwitchContext+0x46>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10a      	bne.n	800a9a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	f383 8811 	msr	BASEPRI, r3
 800a992:	f3bf 8f6f 	isb	sy
 800a996:	f3bf 8f4f 	dsb	sy
 800a99a:	607b      	str	r3, [r7, #4]
}
 800a99c:	bf00      	nop
 800a99e:	e7fe      	b.n	800a99e <vTaskSwitchContext+0x3e>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	60fb      	str	r3, [r7, #12]
 800a9a6:	491d      	ldr	r1, [pc, #116]	; (800aa1c <vTaskSwitchContext+0xbc>)
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	440b      	add	r3, r1
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0e4      	beq.n	800a984 <vTaskSwitchContext+0x24>
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4a15      	ldr	r2, [pc, #84]	; (800aa1c <vTaskSwitchContext+0xbc>)
 800a9c6:	4413      	add	r3, r2
 800a9c8:	60bb      	str	r3, [r7, #8]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	605a      	str	r2, [r3, #4]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d104      	bne.n	800a9ea <vTaskSwitchContext+0x8a>
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	605a      	str	r2, [r3, #4]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	4a0b      	ldr	r2, [pc, #44]	; (800aa20 <vTaskSwitchContext+0xc0>)
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	4a08      	ldr	r2, [pc, #32]	; (800aa18 <vTaskSwitchContext+0xb8>)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9fa:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <vTaskSwitchContext+0xc0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3354      	adds	r3, #84	; 0x54
 800aa00:	4a08      	ldr	r2, [pc, #32]	; (800aa24 <vTaskSwitchContext+0xc4>)
 800aa02:	6013      	str	r3, [r2, #0]
}
 800aa04:	bf00      	nop
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	20002588 	.word	0x20002588
 800aa14:	20002574 	.word	0x20002574
 800aa18:	20002568 	.word	0x20002568
 800aa1c:	20002090 	.word	0x20002090
 800aa20:	2000208c 	.word	0x2000208c
 800aa24:	20000010 	.word	0x20000010

0800aa28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10a      	bne.n	800aa4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	60fb      	str	r3, [r7, #12]
}
 800aa4a:	bf00      	nop
 800aa4c:	e7fe      	b.n	800aa4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa4e:	4b07      	ldr	r3, [pc, #28]	; (800aa6c <vTaskPlaceOnEventList+0x44>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3318      	adds	r3, #24
 800aa54:	4619      	mov	r1, r3
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7fe fd6f 	bl	800953a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	6838      	ldr	r0, [r7, #0]
 800aa60:	f000 fa80 	bl	800af64 <prvAddCurrentTaskToDelayedList>
}
 800aa64:	bf00      	nop
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	2000208c 	.word	0x2000208c

0800aa70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	617b      	str	r3, [r7, #20]
}
 800aa94:	bf00      	nop
 800aa96:	e7fe      	b.n	800aa96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3318      	adds	r3, #24
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7fe fd26 	bl	80094f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aaac:	f04f 33ff 	mov.w	r3, #4294967295
 800aab0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	68b8      	ldr	r0, [r7, #8]
 800aab6:	f000 fa55 	bl	800af64 <prvAddCurrentTaskToDelayedList>
	}
 800aaba:	bf00      	nop
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	2000208c 	.word	0x2000208c

0800aac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60fb      	str	r3, [r7, #12]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	3318      	adds	r3, #24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fd57 	bl	80095ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aafe:	4b1e      	ldr	r3, [pc, #120]	; (800ab78 <xTaskRemoveFromEventList+0xb0>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d11d      	bne.n	800ab42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fd4e 	bl	80095ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab14:	4b19      	ldr	r3, [pc, #100]	; (800ab7c <xTaskRemoveFromEventList+0xb4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d903      	bls.n	800ab24 <xTaskRemoveFromEventList+0x5c>
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	4a16      	ldr	r2, [pc, #88]	; (800ab7c <xTaskRemoveFromEventList+0xb4>)
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab28:	4613      	mov	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4a13      	ldr	r2, [pc, #76]	; (800ab80 <xTaskRemoveFromEventList+0xb8>)
 800ab32:	441a      	add	r2, r3
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	3304      	adds	r3, #4
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	f7fe fcd9 	bl	80094f2 <vListInsertEnd>
 800ab40:	e005      	b.n	800ab4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	3318      	adds	r3, #24
 800ab46:	4619      	mov	r1, r3
 800ab48:	480e      	ldr	r0, [pc, #56]	; (800ab84 <xTaskRemoveFromEventList+0xbc>)
 800ab4a:	f7fe fcd2 	bl	80094f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab52:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <xTaskRemoveFromEventList+0xc0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d905      	bls.n	800ab68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <xTaskRemoveFromEventList+0xc4>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	e001      	b.n	800ab6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab6c:	697b      	ldr	r3, [r7, #20]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	20002588 	.word	0x20002588
 800ab7c:	20002568 	.word	0x20002568
 800ab80:	20002090 	.word	0x20002090
 800ab84:	20002520 	.word	0x20002520
 800ab88:	2000208c 	.word	0x2000208c
 800ab8c:	20002574 	.word	0x20002574

0800ab90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab98:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <vTaskInternalSetTimeOutState+0x24>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aba0:	4b05      	ldr	r3, [pc, #20]	; (800abb8 <vTaskInternalSetTimeOutState+0x28>)
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	605a      	str	r2, [r3, #4]
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	20002578 	.word	0x20002578
 800abb8:	20002564 	.word	0x20002564

0800abbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	613b      	str	r3, [r7, #16]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	60fb      	str	r3, [r7, #12]
}
 800abfa:	bf00      	nop
 800abfc:	e7fe      	b.n	800abfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800abfe:	f000 fe81 	bl	800b904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ac02:	4b1d      	ldr	r3, [pc, #116]	; (800ac78 <xTaskCheckForTimeOut+0xbc>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	69ba      	ldr	r2, [r7, #24]
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1a:	d102      	bne.n	800ac22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	61fb      	str	r3, [r7, #28]
 800ac20:	e023      	b.n	800ac6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	4b15      	ldr	r3, [pc, #84]	; (800ac7c <xTaskCheckForTimeOut+0xc0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d007      	beq.n	800ac3e <xTaskCheckForTimeOut+0x82>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	69ba      	ldr	r2, [r7, #24]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d302      	bcc.n	800ac3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	61fb      	str	r3, [r7, #28]
 800ac3c:	e015      	b.n	800ac6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d20b      	bcs.n	800ac60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7ff ff9b 	bl	800ab90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	61fb      	str	r3, [r7, #28]
 800ac5e:	e004      	b.n	800ac6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac66:	2301      	movs	r3, #1
 800ac68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac6a:	f000 fe7b 	bl	800b964 <vPortExitCritical>

	return xReturn;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3720      	adds	r7, #32
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20002564 	.word	0x20002564
 800ac7c:	20002578 	.word	0x20002578

0800ac80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac80:	b480      	push	{r7}
 800ac82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac84:	4b03      	ldr	r3, [pc, #12]	; (800ac94 <vTaskMissedYield+0x14>)
 800ac86:	2201      	movs	r2, #1
 800ac88:	601a      	str	r2, [r3, #0]
}
 800ac8a:	bf00      	nop
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	20002574 	.word	0x20002574

0800ac98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aca0:	f000 f852 	bl	800ad48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aca4:	4b06      	ldr	r3, [pc, #24]	; (800acc0 <prvIdleTask+0x28>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d9f9      	bls.n	800aca0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800acac:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <prvIdleTask+0x2c>)
 800acae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800acbc:	e7f0      	b.n	800aca0 <prvIdleTask+0x8>
 800acbe:	bf00      	nop
 800acc0:	20002090 	.word	0x20002090
 800acc4:	e000ed04 	.word	0xe000ed04

0800acc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acce:	2300      	movs	r3, #0
 800acd0:	607b      	str	r3, [r7, #4]
 800acd2:	e00c      	b.n	800acee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4a12      	ldr	r2, [pc, #72]	; (800ad28 <prvInitialiseTaskLists+0x60>)
 800ace0:	4413      	add	r3, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fbd8 	bl	8009498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3301      	adds	r3, #1
 800acec:	607b      	str	r3, [r7, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b37      	cmp	r3, #55	; 0x37
 800acf2:	d9ef      	bls.n	800acd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acf4:	480d      	ldr	r0, [pc, #52]	; (800ad2c <prvInitialiseTaskLists+0x64>)
 800acf6:	f7fe fbcf 	bl	8009498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acfa:	480d      	ldr	r0, [pc, #52]	; (800ad30 <prvInitialiseTaskLists+0x68>)
 800acfc:	f7fe fbcc 	bl	8009498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ad00:	480c      	ldr	r0, [pc, #48]	; (800ad34 <prvInitialiseTaskLists+0x6c>)
 800ad02:	f7fe fbc9 	bl	8009498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ad06:	480c      	ldr	r0, [pc, #48]	; (800ad38 <prvInitialiseTaskLists+0x70>)
 800ad08:	f7fe fbc6 	bl	8009498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ad0c:	480b      	ldr	r0, [pc, #44]	; (800ad3c <prvInitialiseTaskLists+0x74>)
 800ad0e:	f7fe fbc3 	bl	8009498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ad12:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <prvInitialiseTaskLists+0x78>)
 800ad14:	4a05      	ldr	r2, [pc, #20]	; (800ad2c <prvInitialiseTaskLists+0x64>)
 800ad16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad18:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <prvInitialiseTaskLists+0x7c>)
 800ad1a:	4a05      	ldr	r2, [pc, #20]	; (800ad30 <prvInitialiseTaskLists+0x68>)
 800ad1c:	601a      	str	r2, [r3, #0]
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20002090 	.word	0x20002090
 800ad2c:	200024f0 	.word	0x200024f0
 800ad30:	20002504 	.word	0x20002504
 800ad34:	20002520 	.word	0x20002520
 800ad38:	20002534 	.word	0x20002534
 800ad3c:	2000254c 	.word	0x2000254c
 800ad40:	20002518 	.word	0x20002518
 800ad44:	2000251c 	.word	0x2000251c

0800ad48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad4e:	e019      	b.n	800ad84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad50:	f000 fdd8 	bl	800b904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad54:	4b10      	ldr	r3, [pc, #64]	; (800ad98 <prvCheckTasksWaitingTermination+0x50>)
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fe fc23 	bl	80095ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad66:	4b0d      	ldr	r3, [pc, #52]	; (800ad9c <prvCheckTasksWaitingTermination+0x54>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	4a0b      	ldr	r2, [pc, #44]	; (800ad9c <prvCheckTasksWaitingTermination+0x54>)
 800ad6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad70:	4b0b      	ldr	r3, [pc, #44]	; (800ada0 <prvCheckTasksWaitingTermination+0x58>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3b01      	subs	r3, #1
 800ad76:	4a0a      	ldr	r2, [pc, #40]	; (800ada0 <prvCheckTasksWaitingTermination+0x58>)
 800ad78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad7a:	f000 fdf3 	bl	800b964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f810 	bl	800ada4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad84:	4b06      	ldr	r3, [pc, #24]	; (800ada0 <prvCheckTasksWaitingTermination+0x58>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e1      	bne.n	800ad50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad8c:	bf00      	nop
 800ad8e:	bf00      	nop
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20002534 	.word	0x20002534
 800ad9c:	20002560 	.word	0x20002560
 800ada0:	20002548 	.word	0x20002548

0800ada4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3354      	adds	r3, #84	; 0x54
 800adb0:	4618      	mov	r0, r3
 800adb2:	f001 fb81 	bl	800c4b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d108      	bne.n	800add2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 ff8b 	bl	800bce0 <vPortFree>
				vPortFree( pxTCB );
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 ff88 	bl	800bce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800add0:	e018      	b.n	800ae04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800add8:	2b01      	cmp	r3, #1
 800adda:	d103      	bne.n	800ade4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 ff7f 	bl	800bce0 <vPortFree>
	}
 800ade2:	e00f      	b.n	800ae04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800adea:	2b02      	cmp	r3, #2
 800adec:	d00a      	beq.n	800ae04 <prvDeleteTCB+0x60>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	60fb      	str	r3, [r7, #12]
}
 800ae00:	bf00      	nop
 800ae02:	e7fe      	b.n	800ae02 <prvDeleteTCB+0x5e>
	}
 800ae04:	bf00      	nop
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae12:	4b0c      	ldr	r3, [pc, #48]	; (800ae44 <prvResetNextTaskUnblockTime+0x38>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d104      	bne.n	800ae26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <prvResetNextTaskUnblockTime+0x3c>)
 800ae1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae24:	e008      	b.n	800ae38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae26:	4b07      	ldr	r3, [pc, #28]	; (800ae44 <prvResetNextTaskUnblockTime+0x38>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	4a04      	ldr	r2, [pc, #16]	; (800ae48 <prvResetNextTaskUnblockTime+0x3c>)
 800ae36:	6013      	str	r3, [r2, #0]
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	20002518 	.word	0x20002518
 800ae48:	20002580 	.word	0x20002580

0800ae4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae52:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <xTaskGetSchedulerState+0x34>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	607b      	str	r3, [r7, #4]
 800ae5e:	e008      	b.n	800ae72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae60:	4b08      	ldr	r3, [pc, #32]	; (800ae84 <xTaskGetSchedulerState+0x38>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d102      	bne.n	800ae6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae68:	2302      	movs	r3, #2
 800ae6a:	607b      	str	r3, [r7, #4]
 800ae6c:	e001      	b.n	800ae72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae72:	687b      	ldr	r3, [r7, #4]
	}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	2000256c 	.word	0x2000256c
 800ae84:	20002588 	.word	0x20002588

0800ae88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae94:	2300      	movs	r3, #0
 800ae96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d056      	beq.n	800af4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae9e:	4b2e      	ldr	r3, [pc, #184]	; (800af58 <xTaskPriorityDisinherit+0xd0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d00a      	beq.n	800aebe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	60fb      	str	r3, [r7, #12]
}
 800aeba:	bf00      	nop
 800aebc:	e7fe      	b.n	800aebc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	60bb      	str	r3, [r7, #8]
}
 800aed8:	bf00      	nop
 800aeda:	e7fe      	b.n	800aeda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee0:	1e5a      	subs	r2, r3, #1
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d02c      	beq.n	800af4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d128      	bne.n	800af4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	3304      	adds	r3, #4
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fe fb54 	bl	80095ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1c:	4b0f      	ldr	r3, [pc, #60]	; (800af5c <xTaskPriorityDisinherit+0xd4>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d903      	bls.n	800af2c <xTaskPriorityDisinherit+0xa4>
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a0c      	ldr	r2, [pc, #48]	; (800af5c <xTaskPriorityDisinherit+0xd4>)
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4a09      	ldr	r2, [pc, #36]	; (800af60 <xTaskPriorityDisinherit+0xd8>)
 800af3a:	441a      	add	r2, r3
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	3304      	adds	r3, #4
 800af40:	4619      	mov	r1, r3
 800af42:	4610      	mov	r0, r2
 800af44:	f7fe fad5 	bl	80094f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af48:	2301      	movs	r3, #1
 800af4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af4c:	697b      	ldr	r3, [r7, #20]
	}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	2000208c 	.word	0x2000208c
 800af5c:	20002568 	.word	0x20002568
 800af60:	20002090 	.word	0x20002090

0800af64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af6e:	4b21      	ldr	r3, [pc, #132]	; (800aff4 <prvAddCurrentTaskToDelayedList+0x90>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af74:	4b20      	ldr	r3, [pc, #128]	; (800aff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3304      	adds	r3, #4
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fb16 	bl	80095ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af86:	d10a      	bne.n	800af9e <prvAddCurrentTaskToDelayedList+0x3a>
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d007      	beq.n	800af9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af8e:	4b1a      	ldr	r3, [pc, #104]	; (800aff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3304      	adds	r3, #4
 800af94:	4619      	mov	r1, r3
 800af96:	4819      	ldr	r0, [pc, #100]	; (800affc <prvAddCurrentTaskToDelayedList+0x98>)
 800af98:	f7fe faab 	bl	80094f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af9c:	e026      	b.n	800afec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4413      	add	r3, r2
 800afa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800afa6:	4b14      	ldr	r3, [pc, #80]	; (800aff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d209      	bcs.n	800afca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afb6:	4b12      	ldr	r3, [pc, #72]	; (800b000 <prvAddCurrentTaskToDelayedList+0x9c>)
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	4b0f      	ldr	r3, [pc, #60]	; (800aff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3304      	adds	r3, #4
 800afc0:	4619      	mov	r1, r3
 800afc2:	4610      	mov	r0, r2
 800afc4:	f7fe fab9 	bl	800953a <vListInsert>
}
 800afc8:	e010      	b.n	800afec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afca:	4b0e      	ldr	r3, [pc, #56]	; (800b004 <prvAddCurrentTaskToDelayedList+0xa0>)
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	4b0a      	ldr	r3, [pc, #40]	; (800aff8 <prvAddCurrentTaskToDelayedList+0x94>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	3304      	adds	r3, #4
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f7fe faaf 	bl	800953a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800afdc:	4b0a      	ldr	r3, [pc, #40]	; (800b008 <prvAddCurrentTaskToDelayedList+0xa4>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d202      	bcs.n	800afec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800afe6:	4a08      	ldr	r2, [pc, #32]	; (800b008 <prvAddCurrentTaskToDelayedList+0xa4>)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	6013      	str	r3, [r2, #0]
}
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20002564 	.word	0x20002564
 800aff8:	2000208c 	.word	0x2000208c
 800affc:	2000254c 	.word	0x2000254c
 800b000:	2000251c 	.word	0x2000251c
 800b004:	20002518 	.word	0x20002518
 800b008:	20002580 	.word	0x20002580

0800b00c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b08a      	sub	sp, #40	; 0x28
 800b010:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b012:	2300      	movs	r3, #0
 800b014:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b016:	f000 fb07 	bl	800b628 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b01a:	4b1c      	ldr	r3, [pc, #112]	; (800b08c <xTimerCreateTimerTask+0x80>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d021      	beq.n	800b066 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b02a:	1d3a      	adds	r2, r7, #4
 800b02c:	f107 0108 	add.w	r1, r7, #8
 800b030:	f107 030c 	add.w	r3, r7, #12
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe fa15 	bl	8009464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	9202      	str	r2, [sp, #8]
 800b042:	9301      	str	r3, [sp, #4]
 800b044:	2302      	movs	r3, #2
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	2300      	movs	r3, #0
 800b04a:	460a      	mov	r2, r1
 800b04c:	4910      	ldr	r1, [pc, #64]	; (800b090 <xTimerCreateTimerTask+0x84>)
 800b04e:	4811      	ldr	r0, [pc, #68]	; (800b094 <xTimerCreateTimerTask+0x88>)
 800b050:	f7ff f8b4 	bl	800a1bc <xTaskCreateStatic>
 800b054:	4603      	mov	r3, r0
 800b056:	4a10      	ldr	r2, [pc, #64]	; (800b098 <xTimerCreateTimerTask+0x8c>)
 800b058:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b05a:	4b0f      	ldr	r3, [pc, #60]	; (800b098 <xTimerCreateTimerTask+0x8c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b062:	2301      	movs	r3, #1
 800b064:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10a      	bne.n	800b082 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	613b      	str	r3, [r7, #16]
}
 800b07e:	bf00      	nop
 800b080:	e7fe      	b.n	800b080 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b082:	697b      	ldr	r3, [r7, #20]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	200025bc 	.word	0x200025bc
 800b090:	0800e184 	.word	0x0800e184
 800b094:	0800b1d1 	.word	0x0800b1d1
 800b098:	200025c0 	.word	0x200025c0

0800b09c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08a      	sub	sp, #40	; 0x28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10a      	bne.n	800b0ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	623b      	str	r3, [r7, #32]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b0ca:	4b1a      	ldr	r3, [pc, #104]	; (800b134 <xTimerGenericCommand+0x98>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d02a      	beq.n	800b128 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b05      	cmp	r3, #5
 800b0e2:	dc18      	bgt.n	800b116 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b0e4:	f7ff feb2 	bl	800ae4c <xTaskGetSchedulerState>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d109      	bne.n	800b102 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0ee:	4b11      	ldr	r3, [pc, #68]	; (800b134 <xTimerGenericCommand+0x98>)
 800b0f0:	6818      	ldr	r0, [r3, #0]
 800b0f2:	f107 0110 	add.w	r1, r7, #16
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fa:	f7fe fc29 	bl	8009950 <xQueueGenericSend>
 800b0fe:	6278      	str	r0, [r7, #36]	; 0x24
 800b100:	e012      	b.n	800b128 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b102:	4b0c      	ldr	r3, [pc, #48]	; (800b134 <xTimerGenericCommand+0x98>)
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f107 0110 	add.w	r1, r7, #16
 800b10a:	2300      	movs	r3, #0
 800b10c:	2200      	movs	r2, #0
 800b10e:	f7fe fc1f 	bl	8009950 <xQueueGenericSend>
 800b112:	6278      	str	r0, [r7, #36]	; 0x24
 800b114:	e008      	b.n	800b128 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b116:	4b07      	ldr	r3, [pc, #28]	; (800b134 <xTimerGenericCommand+0x98>)
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	f107 0110 	add.w	r1, r7, #16
 800b11e:	2300      	movs	r3, #0
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	f7fe fd13 	bl	8009b4c <xQueueGenericSendFromISR>
 800b126:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3728      	adds	r7, #40	; 0x28
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	200025bc 	.word	0x200025bc

0800b138 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b088      	sub	sp, #32
 800b13c:	af02      	add	r7, sp, #8
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b142:	4b22      	ldr	r3, [pc, #136]	; (800b1cc <prvProcessExpiredTimer+0x94>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	3304      	adds	r3, #4
 800b150:	4618      	mov	r0, r3
 800b152:	f7fe fa2b 	bl	80095ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b00      	cmp	r3, #0
 800b162:	d022      	beq.n	800b1aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	699a      	ldr	r2, [r3, #24]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	18d1      	adds	r1, r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	6978      	ldr	r0, [r7, #20]
 800b172:	f000 f8d1 	bl	800b318 <prvInsertTimerInActiveList>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d01f      	beq.n	800b1bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b17c:	2300      	movs	r3, #0
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	2300      	movs	r3, #0
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	2100      	movs	r1, #0
 800b186:	6978      	ldr	r0, [r7, #20]
 800b188:	f7ff ff88 	bl	800b09c <xTimerGenericCommand>
 800b18c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d113      	bne.n	800b1bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	60fb      	str	r3, [r7, #12]
}
 800b1a6:	bf00      	nop
 800b1a8:	e7fe      	b.n	800b1a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1b0:	f023 0301 	bic.w	r3, r3, #1
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	6978      	ldr	r0, [r7, #20]
 800b1c2:	4798      	blx	r3
}
 800b1c4:	bf00      	nop
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	200025b4 	.word	0x200025b4

0800b1d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1d8:	f107 0308 	add.w	r3, r7, #8
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 f857 	bl	800b290 <prvGetNextExpireTime>
 800b1e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 f803 	bl	800b1f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b1ee:	f000 f8d5 	bl	800b39c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1f2:	e7f1      	b.n	800b1d8 <prvTimerTask+0x8>

0800b1f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b1fe:	f7ff fa39 	bl	800a674 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b202:	f107 0308 	add.w	r3, r7, #8
 800b206:	4618      	mov	r0, r3
 800b208:	f000 f866 	bl	800b2d8 <prvSampleTimeNow>
 800b20c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d130      	bne.n	800b276 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d10a      	bne.n	800b230 <prvProcessTimerOrBlockTask+0x3c>
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d806      	bhi.n	800b230 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b222:	f7ff fa35 	bl	800a690 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b226:	68f9      	ldr	r1, [r7, #12]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7ff ff85 	bl	800b138 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b22e:	e024      	b.n	800b27a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d008      	beq.n	800b248 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b236:	4b13      	ldr	r3, [pc, #76]	; (800b284 <prvProcessTimerOrBlockTask+0x90>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <prvProcessTimerOrBlockTask+0x50>
 800b240:	2301      	movs	r3, #1
 800b242:	e000      	b.n	800b246 <prvProcessTimerOrBlockTask+0x52>
 800b244:	2300      	movs	r3, #0
 800b246:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b248:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <prvProcessTimerOrBlockTask+0x94>)
 800b24a:	6818      	ldr	r0, [r3, #0]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	4619      	mov	r1, r3
 800b256:	f7fe ff7d 	bl	800a154 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b25a:	f7ff fa19 	bl	800a690 <xTaskResumeAll>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b264:	4b09      	ldr	r3, [pc, #36]	; (800b28c <prvProcessTimerOrBlockTask+0x98>)
 800b266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	f3bf 8f6f 	isb	sy
}
 800b274:	e001      	b.n	800b27a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b276:	f7ff fa0b 	bl	800a690 <xTaskResumeAll>
}
 800b27a:	bf00      	nop
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	200025b8 	.word	0x200025b8
 800b288:	200025bc 	.word	0x200025bc
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b298:	4b0e      	ldr	r3, [pc, #56]	; (800b2d4 <prvGetNextExpireTime+0x44>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <prvGetNextExpireTime+0x16>
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	e000      	b.n	800b2a8 <prvGetNextExpireTime+0x18>
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d105      	bne.n	800b2c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2b4:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <prvGetNextExpireTime+0x44>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	60fb      	str	r3, [r7, #12]
 800b2be:	e001      	b.n	800b2c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	200025b4 	.word	0x200025b4

0800b2d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b2e0:	f7ff fa74 	bl	800a7cc <xTaskGetTickCount>
 800b2e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b2e6:	4b0b      	ldr	r3, [pc, #44]	; (800b314 <prvSampleTimeNow+0x3c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d205      	bcs.n	800b2fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b2f0:	f000 f936 	bl	800b560 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b302:	4a04      	ldr	r2, [pc, #16]	; (800b314 <prvSampleTimeNow+0x3c>)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b308:	68fb      	ldr	r3, [r7, #12]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	200025c4 	.word	0x200025c4

0800b318 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
 800b324:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d812      	bhi.n	800b364 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	1ad2      	subs	r2, r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	699b      	ldr	r3, [r3, #24]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d302      	bcc.n	800b352 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b34c:	2301      	movs	r3, #1
 800b34e:	617b      	str	r3, [r7, #20]
 800b350:	e01b      	b.n	800b38a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b352:	4b10      	ldr	r3, [pc, #64]	; (800b394 <prvInsertTimerInActiveList+0x7c>)
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3304      	adds	r3, #4
 800b35a:	4619      	mov	r1, r3
 800b35c:	4610      	mov	r0, r2
 800b35e:	f7fe f8ec 	bl	800953a <vListInsert>
 800b362:	e012      	b.n	800b38a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d206      	bcs.n	800b37a <prvInsertTimerInActiveList+0x62>
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	429a      	cmp	r2, r3
 800b372:	d302      	bcc.n	800b37a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b374:	2301      	movs	r3, #1
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	e007      	b.n	800b38a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b37a:	4b07      	ldr	r3, [pc, #28]	; (800b398 <prvInsertTimerInActiveList+0x80>)
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3304      	adds	r3, #4
 800b382:	4619      	mov	r1, r3
 800b384:	4610      	mov	r0, r2
 800b386:	f7fe f8d8 	bl	800953a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b38a:	697b      	ldr	r3, [r7, #20]
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	200025b8 	.word	0x200025b8
 800b398:	200025b4 	.word	0x200025b4

0800b39c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08e      	sub	sp, #56	; 0x38
 800b3a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b3a2:	e0ca      	b.n	800b53a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	da18      	bge.n	800b3dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b3aa:	1d3b      	adds	r3, r7, #4
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10a      	bne.n	800b3cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	61fb      	str	r3, [r7, #28]
}
 800b3c8:	bf00      	nop
 800b3ca:	e7fe      	b.n	800b3ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d2:	6850      	ldr	r0, [r2, #4]
 800b3d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d6:	6892      	ldr	r2, [r2, #8]
 800b3d8:	4611      	mov	r1, r2
 800b3da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f2c0 80aa 	blt.w	800b538 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	695b      	ldr	r3, [r3, #20]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d004      	beq.n	800b3fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fe f8d9 	bl	80095ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3fa:	463b      	mov	r3, r7
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7ff ff6b 	bl	800b2d8 <prvSampleTimeNow>
 800b402:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b09      	cmp	r3, #9
 800b408:	f200 8097 	bhi.w	800b53a <prvProcessReceivedCommands+0x19e>
 800b40c:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <prvProcessReceivedCommands+0x78>)
 800b40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b412:	bf00      	nop
 800b414:	0800b43d 	.word	0x0800b43d
 800b418:	0800b43d 	.word	0x0800b43d
 800b41c:	0800b43d 	.word	0x0800b43d
 800b420:	0800b4b1 	.word	0x0800b4b1
 800b424:	0800b4c5 	.word	0x0800b4c5
 800b428:	0800b50f 	.word	0x0800b50f
 800b42c:	0800b43d 	.word	0x0800b43d
 800b430:	0800b43d 	.word	0x0800b43d
 800b434:	0800b4b1 	.word	0x0800b4b1
 800b438:	0800b4c5 	.word	0x0800b4c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b442:	f043 0301 	orr.w	r3, r3, #1
 800b446:	b2da      	uxtb	r2, r3
 800b448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	18d1      	adds	r1, r2, r3
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b45c:	f7ff ff5c 	bl	800b318 <prvInsertTimerInActiveList>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d069      	beq.n	800b53a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b468:	6a1b      	ldr	r3, [r3, #32]
 800b46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b46c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d05e      	beq.n	800b53a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	441a      	add	r2, r3
 800b484:	2300      	movs	r3, #0
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	2300      	movs	r3, #0
 800b48a:	2100      	movs	r1, #0
 800b48c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b48e:	f7ff fe05 	bl	800b09c <xTimerGenericCommand>
 800b492:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b494:	6a3b      	ldr	r3, [r7, #32]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d14f      	bne.n	800b53a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	61bb      	str	r3, [r7, #24]
}
 800b4ac:	bf00      	nop
 800b4ae:	e7fe      	b.n	800b4ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4b6:	f023 0301 	bic.w	r3, r3, #1
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b4c2:	e03a      	b.n	800b53a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4ca:	f043 0301 	orr.w	r3, r3, #1
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10a      	bne.n	800b4fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	617b      	str	r3, [r7, #20]
}
 800b4f6:	bf00      	nop
 800b4f8:	e7fe      	b.n	800b4f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	699a      	ldr	r2, [r3, #24]
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	18d1      	adds	r1, r2, r3
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b508:	f7ff ff06 	bl	800b318 <prvInsertTimerInActiveList>
					break;
 800b50c:	e015      	b.n	800b53a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b514:	f003 0302 	and.w	r3, r3, #2
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d103      	bne.n	800b524 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b51e:	f000 fbdf 	bl	800bce0 <vPortFree>
 800b522:	e00a      	b.n	800b53a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b52a:	f023 0301 	bic.w	r3, r3, #1
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b536:	e000      	b.n	800b53a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b538:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b53a:	4b08      	ldr	r3, [pc, #32]	; (800b55c <prvProcessReceivedCommands+0x1c0>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	1d39      	adds	r1, r7, #4
 800b540:	2200      	movs	r2, #0
 800b542:	4618      	mov	r0, r3
 800b544:	f7fe fb9e 	bl	8009c84 <xQueueReceive>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f47f af2a 	bne.w	800b3a4 <prvProcessReceivedCommands+0x8>
	}
}
 800b550:	bf00      	nop
 800b552:	bf00      	nop
 800b554:	3730      	adds	r7, #48	; 0x30
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	200025bc 	.word	0x200025bc

0800b560 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b566:	e048      	b.n	800b5fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b568:	4b2d      	ldr	r3, [pc, #180]	; (800b620 <prvSwitchTimerLists+0xc0>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b572:	4b2b      	ldr	r3, [pc, #172]	; (800b620 <prvSwitchTimerLists+0xc0>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	3304      	adds	r3, #4
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe f813 	bl	80095ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d02e      	beq.n	800b5fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	693a      	ldr	r2, [r7, #16]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d90e      	bls.n	800b5cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5ba:	4b19      	ldr	r3, [pc, #100]	; (800b620 <prvSwitchTimerLists+0xc0>)
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	f7fd ffb8 	bl	800953a <vListInsert>
 800b5ca:	e016      	b.n	800b5fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	693a      	ldr	r2, [r7, #16]
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7ff fd60 	bl	800b09c <xTimerGenericCommand>
 800b5dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d10a      	bne.n	800b5fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	603b      	str	r3, [r7, #0]
}
 800b5f6:	bf00      	nop
 800b5f8:	e7fe      	b.n	800b5f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5fa:	4b09      	ldr	r3, [pc, #36]	; (800b620 <prvSwitchTimerLists+0xc0>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1b1      	bne.n	800b568 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b604:	4b06      	ldr	r3, [pc, #24]	; (800b620 <prvSwitchTimerLists+0xc0>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b60a:	4b06      	ldr	r3, [pc, #24]	; (800b624 <prvSwitchTimerLists+0xc4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a04      	ldr	r2, [pc, #16]	; (800b620 <prvSwitchTimerLists+0xc0>)
 800b610:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b612:	4a04      	ldr	r2, [pc, #16]	; (800b624 <prvSwitchTimerLists+0xc4>)
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	6013      	str	r3, [r2, #0]
}
 800b618:	bf00      	nop
 800b61a:	3718      	adds	r7, #24
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	200025b4 	.word	0x200025b4
 800b624:	200025b8 	.word	0x200025b8

0800b628 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b62e:	f000 f969 	bl	800b904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b632:	4b15      	ldr	r3, [pc, #84]	; (800b688 <prvCheckForValidListAndQueue+0x60>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d120      	bne.n	800b67c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b63a:	4814      	ldr	r0, [pc, #80]	; (800b68c <prvCheckForValidListAndQueue+0x64>)
 800b63c:	f7fd ff2c 	bl	8009498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b640:	4813      	ldr	r0, [pc, #76]	; (800b690 <prvCheckForValidListAndQueue+0x68>)
 800b642:	f7fd ff29 	bl	8009498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b646:	4b13      	ldr	r3, [pc, #76]	; (800b694 <prvCheckForValidListAndQueue+0x6c>)
 800b648:	4a10      	ldr	r2, [pc, #64]	; (800b68c <prvCheckForValidListAndQueue+0x64>)
 800b64a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b64c:	4b12      	ldr	r3, [pc, #72]	; (800b698 <prvCheckForValidListAndQueue+0x70>)
 800b64e:	4a10      	ldr	r2, [pc, #64]	; (800b690 <prvCheckForValidListAndQueue+0x68>)
 800b650:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b652:	2300      	movs	r3, #0
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	4b11      	ldr	r3, [pc, #68]	; (800b69c <prvCheckForValidListAndQueue+0x74>)
 800b658:	4a11      	ldr	r2, [pc, #68]	; (800b6a0 <prvCheckForValidListAndQueue+0x78>)
 800b65a:	2110      	movs	r1, #16
 800b65c:	200a      	movs	r0, #10
 800b65e:	f7fe f837 	bl	80096d0 <xQueueGenericCreateStatic>
 800b662:	4603      	mov	r3, r0
 800b664:	4a08      	ldr	r2, [pc, #32]	; (800b688 <prvCheckForValidListAndQueue+0x60>)
 800b666:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b668:	4b07      	ldr	r3, [pc, #28]	; (800b688 <prvCheckForValidListAndQueue+0x60>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d005      	beq.n	800b67c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b670:	4b05      	ldr	r3, [pc, #20]	; (800b688 <prvCheckForValidListAndQueue+0x60>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	490b      	ldr	r1, [pc, #44]	; (800b6a4 <prvCheckForValidListAndQueue+0x7c>)
 800b676:	4618      	mov	r0, r3
 800b678:	f7fe fd18 	bl	800a0ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b67c:	f000 f972 	bl	800b964 <vPortExitCritical>
}
 800b680:	bf00      	nop
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
 800b686:	bf00      	nop
 800b688:	200025bc 	.word	0x200025bc
 800b68c:	2000258c 	.word	0x2000258c
 800b690:	200025a0 	.word	0x200025a0
 800b694:	200025b4 	.word	0x200025b4
 800b698:	200025b8 	.word	0x200025b8
 800b69c:	20002668 	.word	0x20002668
 800b6a0:	200025c8 	.word	0x200025c8
 800b6a4:	0800e18c 	.word	0x0800e18c

0800b6a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3b04      	subs	r3, #4
 800b6b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3b04      	subs	r3, #4
 800b6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f023 0201 	bic.w	r2, r3, #1
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	3b04      	subs	r3, #4
 800b6d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6d8:	4a0c      	ldr	r2, [pc, #48]	; (800b70c <pxPortInitialiseStack+0x64>)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	3b14      	subs	r3, #20
 800b6e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	3b04      	subs	r3, #4
 800b6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f06f 0202 	mvn.w	r2, #2
 800b6f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	3b20      	subs	r3, #32
 800b6fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	0800b711 	.word	0x0800b711

0800b710 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b71a:	4b12      	ldr	r3, [pc, #72]	; (800b764 <prvTaskExitError+0x54>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b722:	d00a      	beq.n	800b73a <prvTaskExitError+0x2a>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	60fb      	str	r3, [r7, #12]
}
 800b736:	bf00      	nop
 800b738:	e7fe      	b.n	800b738 <prvTaskExitError+0x28>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	60bb      	str	r3, [r7, #8]
}
 800b74c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b74e:	bf00      	nop
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d0fc      	beq.n	800b750 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b756:	bf00      	nop
 800b758:	bf00      	nop
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	2000000c 	.word	0x2000000c
	...

0800b770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b770:	4b07      	ldr	r3, [pc, #28]	; (800b790 <pxCurrentTCBConst2>)
 800b772:	6819      	ldr	r1, [r3, #0]
 800b774:	6808      	ldr	r0, [r1, #0]
 800b776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77a:	f380 8809 	msr	PSP, r0
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f04f 0000 	mov.w	r0, #0
 800b786:	f380 8811 	msr	BASEPRI, r0
 800b78a:	4770      	bx	lr
 800b78c:	f3af 8000 	nop.w

0800b790 <pxCurrentTCBConst2>:
 800b790:	2000208c 	.word	0x2000208c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop

0800b798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b798:	4808      	ldr	r0, [pc, #32]	; (800b7bc <prvPortStartFirstTask+0x24>)
 800b79a:	6800      	ldr	r0, [r0, #0]
 800b79c:	6800      	ldr	r0, [r0, #0]
 800b79e:	f380 8808 	msr	MSP, r0
 800b7a2:	f04f 0000 	mov.w	r0, #0
 800b7a6:	f380 8814 	msr	CONTROL, r0
 800b7aa:	b662      	cpsie	i
 800b7ac:	b661      	cpsie	f
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	df00      	svc	0
 800b7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b7ba:	bf00      	nop
 800b7bc:	e000ed08 	.word	0xe000ed08

0800b7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7c6:	4b46      	ldr	r3, [pc, #280]	; (800b8e0 <xPortStartScheduler+0x120>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a46      	ldr	r2, [pc, #280]	; (800b8e4 <xPortStartScheduler+0x124>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d10a      	bne.n	800b7e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	613b      	str	r3, [r7, #16]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7e6:	4b3e      	ldr	r3, [pc, #248]	; (800b8e0 <xPortStartScheduler+0x120>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a3f      	ldr	r2, [pc, #252]	; (800b8e8 <xPortStartScheduler+0x128>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d10a      	bne.n	800b806 <xPortStartScheduler+0x46>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	60fb      	str	r3, [r7, #12]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b806:	4b39      	ldr	r3, [pc, #228]	; (800b8ec <xPortStartScheduler+0x12c>)
 800b808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	22ff      	movs	r2, #255	; 0xff
 800b816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b820:	78fb      	ldrb	r3, [r7, #3]
 800b822:	b2db      	uxtb	r3, r3
 800b824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	4b31      	ldr	r3, [pc, #196]	; (800b8f0 <xPortStartScheduler+0x130>)
 800b82c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b82e:	4b31      	ldr	r3, [pc, #196]	; (800b8f4 <xPortStartScheduler+0x134>)
 800b830:	2207      	movs	r2, #7
 800b832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b834:	e009      	b.n	800b84a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b836:	4b2f      	ldr	r3, [pc, #188]	; (800b8f4 <xPortStartScheduler+0x134>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	4a2d      	ldr	r2, [pc, #180]	; (800b8f4 <xPortStartScheduler+0x134>)
 800b83e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b840:	78fb      	ldrb	r3, [r7, #3]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	005b      	lsls	r3, r3, #1
 800b846:	b2db      	uxtb	r3, r3
 800b848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b84a:	78fb      	ldrb	r3, [r7, #3]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b852:	2b80      	cmp	r3, #128	; 0x80
 800b854:	d0ef      	beq.n	800b836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b856:	4b27      	ldr	r3, [pc, #156]	; (800b8f4 <xPortStartScheduler+0x134>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f1c3 0307 	rsb	r3, r3, #7
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d00a      	beq.n	800b878 <xPortStartScheduler+0xb8>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	60bb      	str	r3, [r7, #8]
}
 800b874:	bf00      	nop
 800b876:	e7fe      	b.n	800b876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b878:	4b1e      	ldr	r3, [pc, #120]	; (800b8f4 <xPortStartScheduler+0x134>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	021b      	lsls	r3, r3, #8
 800b87e:	4a1d      	ldr	r2, [pc, #116]	; (800b8f4 <xPortStartScheduler+0x134>)
 800b880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b882:	4b1c      	ldr	r3, [pc, #112]	; (800b8f4 <xPortStartScheduler+0x134>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b88a:	4a1a      	ldr	r2, [pc, #104]	; (800b8f4 <xPortStartScheduler+0x134>)
 800b88c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	b2da      	uxtb	r2, r3
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b896:	4b18      	ldr	r3, [pc, #96]	; (800b8f8 <xPortStartScheduler+0x138>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a17      	ldr	r2, [pc, #92]	; (800b8f8 <xPortStartScheduler+0x138>)
 800b89c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b8a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b8a2:	4b15      	ldr	r3, [pc, #84]	; (800b8f8 <xPortStartScheduler+0x138>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a14      	ldr	r2, [pc, #80]	; (800b8f8 <xPortStartScheduler+0x138>)
 800b8a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b8ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b8ae:	f000 f8dd 	bl	800ba6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b8b2:	4b12      	ldr	r3, [pc, #72]	; (800b8fc <xPortStartScheduler+0x13c>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b8b8:	f000 f8fc 	bl	800bab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b8bc:	4b10      	ldr	r3, [pc, #64]	; (800b900 <xPortStartScheduler+0x140>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a0f      	ldr	r2, [pc, #60]	; (800b900 <xPortStartScheduler+0x140>)
 800b8c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b8c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b8c8:	f7ff ff66 	bl	800b798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b8cc:	f7ff f848 	bl	800a960 <vTaskSwitchContext>
	prvTaskExitError();
 800b8d0:	f7ff ff1e 	bl	800b710 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3718      	adds	r7, #24
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	e000ed00 	.word	0xe000ed00
 800b8e4:	410fc271 	.word	0x410fc271
 800b8e8:	410fc270 	.word	0x410fc270
 800b8ec:	e000e400 	.word	0xe000e400
 800b8f0:	200026b8 	.word	0x200026b8
 800b8f4:	200026bc 	.word	0x200026bc
 800b8f8:	e000ed20 	.word	0xe000ed20
 800b8fc:	2000000c 	.word	0x2000000c
 800b900:	e000ef34 	.word	0xe000ef34

0800b904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	607b      	str	r3, [r7, #4]
}
 800b91c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <vPortEnterCritical+0x58>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3301      	adds	r3, #1
 800b924:	4a0d      	ldr	r2, [pc, #52]	; (800b95c <vPortEnterCritical+0x58>)
 800b926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b928:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <vPortEnterCritical+0x58>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d10f      	bne.n	800b950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b930:	4b0b      	ldr	r3, [pc, #44]	; (800b960 <vPortEnterCritical+0x5c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <vPortEnterCritical+0x4c>
	__asm volatile
 800b93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	603b      	str	r3, [r7, #0]
}
 800b94c:	bf00      	nop
 800b94e:	e7fe      	b.n	800b94e <vPortEnterCritical+0x4a>
	}
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	2000000c 	.word	0x2000000c
 800b960:	e000ed04 	.word	0xe000ed04

0800b964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b96a:	4b12      	ldr	r3, [pc, #72]	; (800b9b4 <vPortExitCritical+0x50>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10a      	bne.n	800b988 <vPortExitCritical+0x24>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	607b      	str	r3, [r7, #4]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b988:	4b0a      	ldr	r3, [pc, #40]	; (800b9b4 <vPortExitCritical+0x50>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	4a09      	ldr	r2, [pc, #36]	; (800b9b4 <vPortExitCritical+0x50>)
 800b990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b992:	4b08      	ldr	r3, [pc, #32]	; (800b9b4 <vPortExitCritical+0x50>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d105      	bne.n	800b9a6 <vPortExitCritical+0x42>
 800b99a:	2300      	movs	r3, #0
 800b99c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	f383 8811 	msr	BASEPRI, r3
}
 800b9a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b9a6:	bf00      	nop
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	2000000c 	.word	0x2000000c
	...

0800b9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b9c0:	f3ef 8009 	mrs	r0, PSP
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	4b15      	ldr	r3, [pc, #84]	; (800ba20 <pxCurrentTCBConst>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	f01e 0f10 	tst.w	lr, #16
 800b9d0:	bf08      	it	eq
 800b9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9da:	6010      	str	r0, [r2, #0]
 800b9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b9e4:	f380 8811 	msr	BASEPRI, r0
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f7fe ffb6 	bl	800a960 <vTaskSwitchContext>
 800b9f4:	f04f 0000 	mov.w	r0, #0
 800b9f8:	f380 8811 	msr	BASEPRI, r0
 800b9fc:	bc09      	pop	{r0, r3}
 800b9fe:	6819      	ldr	r1, [r3, #0]
 800ba00:	6808      	ldr	r0, [r1, #0]
 800ba02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba06:	f01e 0f10 	tst.w	lr, #16
 800ba0a:	bf08      	it	eq
 800ba0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba10:	f380 8809 	msr	PSP, r0
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	f3af 8000 	nop.w

0800ba20 <pxCurrentTCBConst>:
 800ba20:	2000208c 	.word	0x2000208c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop

0800ba28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	607b      	str	r3, [r7, #4]
}
 800ba40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba42:	f7fe fed3 	bl	800a7ec <xTaskIncrementTick>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba4c:	4b06      	ldr	r3, [pc, #24]	; (800ba68 <xPortSysTickHandler+0x40>)
 800ba4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba52:	601a      	str	r2, [r3, #0]
 800ba54:	2300      	movs	r3, #0
 800ba56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	f383 8811 	msr	BASEPRI, r3
}
 800ba5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba60:	bf00      	nop
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	e000ed04 	.word	0xe000ed04

0800ba6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba70:	4b0b      	ldr	r3, [pc, #44]	; (800baa0 <vPortSetupTimerInterrupt+0x34>)
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba76:	4b0b      	ldr	r3, [pc, #44]	; (800baa4 <vPortSetupTimerInterrupt+0x38>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba7c:	4b0a      	ldr	r3, [pc, #40]	; (800baa8 <vPortSetupTimerInterrupt+0x3c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a0a      	ldr	r2, [pc, #40]	; (800baac <vPortSetupTimerInterrupt+0x40>)
 800ba82:	fba2 2303 	umull	r2, r3, r2, r3
 800ba86:	099b      	lsrs	r3, r3, #6
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <vPortSetupTimerInterrupt+0x44>)
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba8e:	4b04      	ldr	r3, [pc, #16]	; (800baa0 <vPortSetupTimerInterrupt+0x34>)
 800ba90:	2207      	movs	r2, #7
 800ba92:	601a      	str	r2, [r3, #0]
}
 800ba94:	bf00      	nop
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	e000e010 	.word	0xe000e010
 800baa4:	e000e018 	.word	0xe000e018
 800baa8:	20000000 	.word	0x20000000
 800baac:	10624dd3 	.word	0x10624dd3
 800bab0:	e000e014 	.word	0xe000e014

0800bab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bac4 <vPortEnableVFP+0x10>
 800bab8:	6801      	ldr	r1, [r0, #0]
 800baba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800babe:	6001      	str	r1, [r0, #0]
 800bac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bac2:	bf00      	nop
 800bac4:	e000ed88 	.word	0xe000ed88

0800bac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bace:	f3ef 8305 	mrs	r3, IPSR
 800bad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b0f      	cmp	r3, #15
 800bad8:	d914      	bls.n	800bb04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bada:	4a17      	ldr	r2, [pc, #92]	; (800bb38 <vPortValidateInterruptPriority+0x70>)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	4413      	add	r3, r2
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bae4:	4b15      	ldr	r3, [pc, #84]	; (800bb3c <vPortValidateInterruptPriority+0x74>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	7afa      	ldrb	r2, [r7, #11]
 800baea:	429a      	cmp	r2, r3
 800baec:	d20a      	bcs.n	800bb04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	607b      	str	r3, [r7, #4]
}
 800bb00:	bf00      	nop
 800bb02:	e7fe      	b.n	800bb02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb04:	4b0e      	ldr	r3, [pc, #56]	; (800bb40 <vPortValidateInterruptPriority+0x78>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb0c:	4b0d      	ldr	r3, [pc, #52]	; (800bb44 <vPortValidateInterruptPriority+0x7c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d90a      	bls.n	800bb2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	603b      	str	r3, [r7, #0]
}
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <vPortValidateInterruptPriority+0x60>
	}
 800bb2a:	bf00      	nop
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	e000e3f0 	.word	0xe000e3f0
 800bb3c:	200026b8 	.word	0x200026b8
 800bb40:	e000ed0c 	.word	0xe000ed0c
 800bb44:	200026bc 	.word	0x200026bc

0800bb48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08a      	sub	sp, #40	; 0x28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bb50:	2300      	movs	r3, #0
 800bb52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bb54:	f7fe fd8e 	bl	800a674 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bb58:	4b5b      	ldr	r3, [pc, #364]	; (800bcc8 <pvPortMalloc+0x180>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bb60:	f000 f920 	bl	800bda4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bb64:	4b59      	ldr	r3, [pc, #356]	; (800bccc <pvPortMalloc+0x184>)
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f040 8093 	bne.w	800bc98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d01d      	beq.n	800bbb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bb78:	2208      	movs	r2, #8
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f003 0307 	and.w	r3, r3, #7
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d014      	beq.n	800bbb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f023 0307 	bic.w	r3, r3, #7
 800bb90:	3308      	adds	r3, #8
 800bb92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00a      	beq.n	800bbb4 <pvPortMalloc+0x6c>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	617b      	str	r3, [r7, #20]
}
 800bbb0:	bf00      	nop
 800bbb2:	e7fe      	b.n	800bbb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d06e      	beq.n	800bc98 <pvPortMalloc+0x150>
 800bbba:	4b45      	ldr	r3, [pc, #276]	; (800bcd0 <pvPortMalloc+0x188>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d869      	bhi.n	800bc98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bbc4:	4b43      	ldr	r3, [pc, #268]	; (800bcd4 <pvPortMalloc+0x18c>)
 800bbc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bbc8:	4b42      	ldr	r3, [pc, #264]	; (800bcd4 <pvPortMalloc+0x18c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbce:	e004      	b.n	800bbda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d903      	bls.n	800bbec <pvPortMalloc+0xa4>
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1f1      	bne.n	800bbd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bbec:	4b36      	ldr	r3, [pc, #216]	; (800bcc8 <pvPortMalloc+0x180>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d050      	beq.n	800bc98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2208      	movs	r2, #8
 800bbfc:	4413      	add	r3, r2
 800bbfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	6a3b      	ldr	r3, [r7, #32]
 800bc06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	2308      	movs	r3, #8
 800bc12:	005b      	lsls	r3, r3, #1
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d91f      	bls.n	800bc58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	f003 0307 	and.w	r3, r3, #7
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <pvPortMalloc+0xf8>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	613b      	str	r3, [r7, #16]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	1ad2      	subs	r2, r2, r3
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bc52:	69b8      	ldr	r0, [r7, #24]
 800bc54:	f000 f908 	bl	800be68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bc58:	4b1d      	ldr	r3, [pc, #116]	; (800bcd0 <pvPortMalloc+0x188>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	4a1b      	ldr	r2, [pc, #108]	; (800bcd0 <pvPortMalloc+0x188>)
 800bc64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bc66:	4b1a      	ldr	r3, [pc, #104]	; (800bcd0 <pvPortMalloc+0x188>)
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	4b1b      	ldr	r3, [pc, #108]	; (800bcd8 <pvPortMalloc+0x190>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d203      	bcs.n	800bc7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bc72:	4b17      	ldr	r3, [pc, #92]	; (800bcd0 <pvPortMalloc+0x188>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a18      	ldr	r2, [pc, #96]	; (800bcd8 <pvPortMalloc+0x190>)
 800bc78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	4b13      	ldr	r3, [pc, #76]	; (800bccc <pvPortMalloc+0x184>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	431a      	orrs	r2, r3
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc8e:	4b13      	ldr	r3, [pc, #76]	; (800bcdc <pvPortMalloc+0x194>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3301      	adds	r3, #1
 800bc94:	4a11      	ldr	r2, [pc, #68]	; (800bcdc <pvPortMalloc+0x194>)
 800bc96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc98:	f7fe fcfa 	bl	800a690 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	f003 0307 	and.w	r3, r3, #7
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00a      	beq.n	800bcbc <pvPortMalloc+0x174>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60fb      	str	r3, [r7, #12]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <pvPortMalloc+0x172>
	return pvReturn;
 800bcbc:	69fb      	ldr	r3, [r7, #28]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3728      	adds	r7, #40	; 0x28
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20003280 	.word	0x20003280
 800bccc:	20003294 	.word	0x20003294
 800bcd0:	20003284 	.word	0x20003284
 800bcd4:	20003278 	.word	0x20003278
 800bcd8:	20003288 	.word	0x20003288
 800bcdc:	2000328c 	.word	0x2000328c

0800bce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d04d      	beq.n	800bd8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bcf2:	2308      	movs	r3, #8
 800bcf4:	425b      	negs	r3, r3
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	4b24      	ldr	r3, [pc, #144]	; (800bd98 <vPortFree+0xb8>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4013      	ands	r3, r2
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <vPortFree+0x44>
	__asm volatile
 800bd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd12:	f383 8811 	msr	BASEPRI, r3
 800bd16:	f3bf 8f6f 	isb	sy
 800bd1a:	f3bf 8f4f 	dsb	sy
 800bd1e:	60fb      	str	r3, [r7, #12]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00a      	beq.n	800bd42 <vPortFree+0x62>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	60bb      	str	r3, [r7, #8]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	4b14      	ldr	r3, [pc, #80]	; (800bd98 <vPortFree+0xb8>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d01e      	beq.n	800bd8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d11a      	bne.n	800bd8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	4b0e      	ldr	r3, [pc, #56]	; (800bd98 <vPortFree+0xb8>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	43db      	mvns	r3, r3
 800bd62:	401a      	ands	r2, r3
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bd68:	f7fe fc84 	bl	800a674 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	4b0a      	ldr	r3, [pc, #40]	; (800bd9c <vPortFree+0xbc>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4413      	add	r3, r2
 800bd76:	4a09      	ldr	r2, [pc, #36]	; (800bd9c <vPortFree+0xbc>)
 800bd78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bd7a:	6938      	ldr	r0, [r7, #16]
 800bd7c:	f000 f874 	bl	800be68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd80:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <vPortFree+0xc0>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3301      	adds	r3, #1
 800bd86:	4a06      	ldr	r2, [pc, #24]	; (800bda0 <vPortFree+0xc0>)
 800bd88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd8a:	f7fe fc81 	bl	800a690 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd8e:	bf00      	nop
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20003294 	.word	0x20003294
 800bd9c:	20003284 	.word	0x20003284
 800bda0:	20003290 	.word	0x20003290

0800bda4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdaa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bdae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bdb0:	4b27      	ldr	r3, [pc, #156]	; (800be50 <prvHeapInit+0xac>)
 800bdb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f003 0307 	and.w	r3, r3, #7
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00c      	beq.n	800bdd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3307      	adds	r3, #7
 800bdc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f023 0307 	bic.w	r3, r3, #7
 800bdca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	4a1f      	ldr	r2, [pc, #124]	; (800be50 <prvHeapInit+0xac>)
 800bdd4:	4413      	add	r3, r2
 800bdd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bddc:	4a1d      	ldr	r2, [pc, #116]	; (800be54 <prvHeapInit+0xb0>)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bde2:	4b1c      	ldr	r3, [pc, #112]	; (800be54 <prvHeapInit+0xb0>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	4413      	add	r3, r2
 800bdee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	1a9b      	subs	r3, r3, r2
 800bdf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f023 0307 	bic.w	r3, r3, #7
 800bdfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4a15      	ldr	r2, [pc, #84]	; (800be58 <prvHeapInit+0xb4>)
 800be04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be06:	4b14      	ldr	r3, [pc, #80]	; (800be58 <prvHeapInit+0xb4>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2200      	movs	r2, #0
 800be0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be0e:	4b12      	ldr	r3, [pc, #72]	; (800be58 <prvHeapInit+0xb4>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2200      	movs	r2, #0
 800be14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	1ad2      	subs	r2, r2, r3
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be24:	4b0c      	ldr	r3, [pc, #48]	; (800be58 <prvHeapInit+0xb4>)
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	4a0a      	ldr	r2, [pc, #40]	; (800be5c <prvHeapInit+0xb8>)
 800be32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	4a09      	ldr	r2, [pc, #36]	; (800be60 <prvHeapInit+0xbc>)
 800be3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be3c:	4b09      	ldr	r3, [pc, #36]	; (800be64 <prvHeapInit+0xc0>)
 800be3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be42:	601a      	str	r2, [r3, #0]
}
 800be44:	bf00      	nop
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	200026c0 	.word	0x200026c0
 800be54:	20003278 	.word	0x20003278
 800be58:	20003280 	.word	0x20003280
 800be5c:	20003288 	.word	0x20003288
 800be60:	20003284 	.word	0x20003284
 800be64:	20003294 	.word	0x20003294

0800be68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800be70:	4b28      	ldr	r3, [pc, #160]	; (800bf14 <prvInsertBlockIntoFreeList+0xac>)
 800be72:	60fb      	str	r3, [r7, #12]
 800be74:	e002      	b.n	800be7c <prvInsertBlockIntoFreeList+0x14>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	429a      	cmp	r2, r3
 800be84:	d8f7      	bhi.n	800be76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	4413      	add	r3, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d108      	bne.n	800beaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	441a      	add	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	441a      	add	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d118      	bne.n	800bef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	4b15      	ldr	r3, [pc, #84]	; (800bf18 <prvInsertBlockIntoFreeList+0xb0>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d00d      	beq.n	800bee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	441a      	add	r2, r3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	601a      	str	r2, [r3, #0]
 800bee4:	e008      	b.n	800bef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bee6:	4b0c      	ldr	r3, [pc, #48]	; (800bf18 <prvInsertBlockIntoFreeList+0xb0>)
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	e003      	b.n	800bef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	429a      	cmp	r2, r3
 800befe:	d002      	beq.n	800bf06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf06:	bf00      	nop
 800bf08:	3714      	adds	r7, #20
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	20003278 	.word	0x20003278
 800bf18:	20003280 	.word	0x20003280

0800bf1c <__errno>:
 800bf1c:	4b01      	ldr	r3, [pc, #4]	; (800bf24 <__errno+0x8>)
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	20000010 	.word	0x20000010

0800bf28 <std>:
 800bf28:	2300      	movs	r3, #0
 800bf2a:	b510      	push	{r4, lr}
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf36:	6083      	str	r3, [r0, #8]
 800bf38:	8181      	strh	r1, [r0, #12]
 800bf3a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf3c:	81c2      	strh	r2, [r0, #14]
 800bf3e:	6183      	str	r3, [r0, #24]
 800bf40:	4619      	mov	r1, r3
 800bf42:	2208      	movs	r2, #8
 800bf44:	305c      	adds	r0, #92	; 0x5c
 800bf46:	f000 f933 	bl	800c1b0 <memset>
 800bf4a:	4b05      	ldr	r3, [pc, #20]	; (800bf60 <std+0x38>)
 800bf4c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf4e:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <std+0x3c>)
 800bf50:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf52:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <std+0x40>)
 800bf54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf56:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <std+0x44>)
 800bf58:	6224      	str	r4, [r4, #32]
 800bf5a:	6323      	str	r3, [r4, #48]	; 0x30
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	bf00      	nop
 800bf60:	0800c5d1 	.word	0x0800c5d1
 800bf64:	0800c5f3 	.word	0x0800c5f3
 800bf68:	0800c62b 	.word	0x0800c62b
 800bf6c:	0800c64f 	.word	0x0800c64f

0800bf70 <_cleanup_r>:
 800bf70:	4901      	ldr	r1, [pc, #4]	; (800bf78 <_cleanup_r+0x8>)
 800bf72:	f000 b8af 	b.w	800c0d4 <_fwalk_reent>
 800bf76:	bf00      	nop
 800bf78:	0800cab5 	.word	0x0800cab5

0800bf7c <__sfmoreglue>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	2268      	movs	r2, #104	; 0x68
 800bf80:	1e4d      	subs	r5, r1, #1
 800bf82:	4355      	muls	r5, r2
 800bf84:	460e      	mov	r6, r1
 800bf86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf8a:	f000 f985 	bl	800c298 <_malloc_r>
 800bf8e:	4604      	mov	r4, r0
 800bf90:	b140      	cbz	r0, 800bfa4 <__sfmoreglue+0x28>
 800bf92:	2100      	movs	r1, #0
 800bf94:	e9c0 1600 	strd	r1, r6, [r0]
 800bf98:	300c      	adds	r0, #12
 800bf9a:	60a0      	str	r0, [r4, #8]
 800bf9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfa0:	f000 f906 	bl	800c1b0 <memset>
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}

0800bfa8 <__sfp_lock_acquire>:
 800bfa8:	4801      	ldr	r0, [pc, #4]	; (800bfb0 <__sfp_lock_acquire+0x8>)
 800bfaa:	f000 b8d8 	b.w	800c15e <__retarget_lock_acquire_recursive>
 800bfae:	bf00      	nop
 800bfb0:	20003299 	.word	0x20003299

0800bfb4 <__sfp_lock_release>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	; (800bfbc <__sfp_lock_release+0x8>)
 800bfb6:	f000 b8d3 	b.w	800c160 <__retarget_lock_release_recursive>
 800bfba:	bf00      	nop
 800bfbc:	20003299 	.word	0x20003299

0800bfc0 <__sinit_lock_acquire>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	; (800bfc8 <__sinit_lock_acquire+0x8>)
 800bfc2:	f000 b8cc 	b.w	800c15e <__retarget_lock_acquire_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	2000329a 	.word	0x2000329a

0800bfcc <__sinit_lock_release>:
 800bfcc:	4801      	ldr	r0, [pc, #4]	; (800bfd4 <__sinit_lock_release+0x8>)
 800bfce:	f000 b8c7 	b.w	800c160 <__retarget_lock_release_recursive>
 800bfd2:	bf00      	nop
 800bfd4:	2000329a 	.word	0x2000329a

0800bfd8 <__sinit>:
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	4604      	mov	r4, r0
 800bfdc:	f7ff fff0 	bl	800bfc0 <__sinit_lock_acquire>
 800bfe0:	69a3      	ldr	r3, [r4, #24]
 800bfe2:	b11b      	cbz	r3, 800bfec <__sinit+0x14>
 800bfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe8:	f7ff bff0 	b.w	800bfcc <__sinit_lock_release>
 800bfec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bff0:	6523      	str	r3, [r4, #80]	; 0x50
 800bff2:	4b13      	ldr	r3, [pc, #76]	; (800c040 <__sinit+0x68>)
 800bff4:	4a13      	ldr	r2, [pc, #76]	; (800c044 <__sinit+0x6c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bffa:	42a3      	cmp	r3, r4
 800bffc:	bf04      	itt	eq
 800bffe:	2301      	moveq	r3, #1
 800c000:	61a3      	streq	r3, [r4, #24]
 800c002:	4620      	mov	r0, r4
 800c004:	f000 f820 	bl	800c048 <__sfp>
 800c008:	6060      	str	r0, [r4, #4]
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 f81c 	bl	800c048 <__sfp>
 800c010:	60a0      	str	r0, [r4, #8]
 800c012:	4620      	mov	r0, r4
 800c014:	f000 f818 	bl	800c048 <__sfp>
 800c018:	2200      	movs	r2, #0
 800c01a:	60e0      	str	r0, [r4, #12]
 800c01c:	2104      	movs	r1, #4
 800c01e:	6860      	ldr	r0, [r4, #4]
 800c020:	f7ff ff82 	bl	800bf28 <std>
 800c024:	68a0      	ldr	r0, [r4, #8]
 800c026:	2201      	movs	r2, #1
 800c028:	2109      	movs	r1, #9
 800c02a:	f7ff ff7d 	bl	800bf28 <std>
 800c02e:	68e0      	ldr	r0, [r4, #12]
 800c030:	2202      	movs	r2, #2
 800c032:	2112      	movs	r1, #18
 800c034:	f7ff ff78 	bl	800bf28 <std>
 800c038:	2301      	movs	r3, #1
 800c03a:	61a3      	str	r3, [r4, #24]
 800c03c:	e7d2      	b.n	800bfe4 <__sinit+0xc>
 800c03e:	bf00      	nop
 800c040:	0800e288 	.word	0x0800e288
 800c044:	0800bf71 	.word	0x0800bf71

0800c048 <__sfp>:
 800c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04a:	4607      	mov	r7, r0
 800c04c:	f7ff ffac 	bl	800bfa8 <__sfp_lock_acquire>
 800c050:	4b1e      	ldr	r3, [pc, #120]	; (800c0cc <__sfp+0x84>)
 800c052:	681e      	ldr	r6, [r3, #0]
 800c054:	69b3      	ldr	r3, [r6, #24]
 800c056:	b913      	cbnz	r3, 800c05e <__sfp+0x16>
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff ffbd 	bl	800bfd8 <__sinit>
 800c05e:	3648      	adds	r6, #72	; 0x48
 800c060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c064:	3b01      	subs	r3, #1
 800c066:	d503      	bpl.n	800c070 <__sfp+0x28>
 800c068:	6833      	ldr	r3, [r6, #0]
 800c06a:	b30b      	cbz	r3, 800c0b0 <__sfp+0x68>
 800c06c:	6836      	ldr	r6, [r6, #0]
 800c06e:	e7f7      	b.n	800c060 <__sfp+0x18>
 800c070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c074:	b9d5      	cbnz	r5, 800c0ac <__sfp+0x64>
 800c076:	4b16      	ldr	r3, [pc, #88]	; (800c0d0 <__sfp+0x88>)
 800c078:	60e3      	str	r3, [r4, #12]
 800c07a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c07e:	6665      	str	r5, [r4, #100]	; 0x64
 800c080:	f000 f86c 	bl	800c15c <__retarget_lock_init_recursive>
 800c084:	f7ff ff96 	bl	800bfb4 <__sfp_lock_release>
 800c088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c08c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c090:	6025      	str	r5, [r4, #0]
 800c092:	61a5      	str	r5, [r4, #24]
 800c094:	2208      	movs	r2, #8
 800c096:	4629      	mov	r1, r5
 800c098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c09c:	f000 f888 	bl	800c1b0 <memset>
 800c0a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ac:	3468      	adds	r4, #104	; 0x68
 800c0ae:	e7d9      	b.n	800c064 <__sfp+0x1c>
 800c0b0:	2104      	movs	r1, #4
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7ff ff62 	bl	800bf7c <__sfmoreglue>
 800c0b8:	4604      	mov	r4, r0
 800c0ba:	6030      	str	r0, [r6, #0]
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1d5      	bne.n	800c06c <__sfp+0x24>
 800c0c0:	f7ff ff78 	bl	800bfb4 <__sfp_lock_release>
 800c0c4:	230c      	movs	r3, #12
 800c0c6:	603b      	str	r3, [r7, #0]
 800c0c8:	e7ee      	b.n	800c0a8 <__sfp+0x60>
 800c0ca:	bf00      	nop
 800c0cc:	0800e288 	.word	0x0800e288
 800c0d0:	ffff0001 	.word	0xffff0001

0800c0d4 <_fwalk_reent>:
 800c0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d8:	4606      	mov	r6, r0
 800c0da:	4688      	mov	r8, r1
 800c0dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0e0:	2700      	movs	r7, #0
 800c0e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0e6:	f1b9 0901 	subs.w	r9, r9, #1
 800c0ea:	d505      	bpl.n	800c0f8 <_fwalk_reent+0x24>
 800c0ec:	6824      	ldr	r4, [r4, #0]
 800c0ee:	2c00      	cmp	r4, #0
 800c0f0:	d1f7      	bne.n	800c0e2 <_fwalk_reent+0xe>
 800c0f2:	4638      	mov	r0, r7
 800c0f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f8:	89ab      	ldrh	r3, [r5, #12]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d907      	bls.n	800c10e <_fwalk_reent+0x3a>
 800c0fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c102:	3301      	adds	r3, #1
 800c104:	d003      	beq.n	800c10e <_fwalk_reent+0x3a>
 800c106:	4629      	mov	r1, r5
 800c108:	4630      	mov	r0, r6
 800c10a:	47c0      	blx	r8
 800c10c:	4307      	orrs	r7, r0
 800c10e:	3568      	adds	r5, #104	; 0x68
 800c110:	e7e9      	b.n	800c0e6 <_fwalk_reent+0x12>
	...

0800c114 <__libc_init_array>:
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	4d0d      	ldr	r5, [pc, #52]	; (800c14c <__libc_init_array+0x38>)
 800c118:	4c0d      	ldr	r4, [pc, #52]	; (800c150 <__libc_init_array+0x3c>)
 800c11a:	1b64      	subs	r4, r4, r5
 800c11c:	10a4      	asrs	r4, r4, #2
 800c11e:	2600      	movs	r6, #0
 800c120:	42a6      	cmp	r6, r4
 800c122:	d109      	bne.n	800c138 <__libc_init_array+0x24>
 800c124:	4d0b      	ldr	r5, [pc, #44]	; (800c154 <__libc_init_array+0x40>)
 800c126:	4c0c      	ldr	r4, [pc, #48]	; (800c158 <__libc_init_array+0x44>)
 800c128:	f001 fab2 	bl	800d690 <_init>
 800c12c:	1b64      	subs	r4, r4, r5
 800c12e:	10a4      	asrs	r4, r4, #2
 800c130:	2600      	movs	r6, #0
 800c132:	42a6      	cmp	r6, r4
 800c134:	d105      	bne.n	800c142 <__libc_init_array+0x2e>
 800c136:	bd70      	pop	{r4, r5, r6, pc}
 800c138:	f855 3b04 	ldr.w	r3, [r5], #4
 800c13c:	4798      	blx	r3
 800c13e:	3601      	adds	r6, #1
 800c140:	e7ee      	b.n	800c120 <__libc_init_array+0xc>
 800c142:	f855 3b04 	ldr.w	r3, [r5], #4
 800c146:	4798      	blx	r3
 800c148:	3601      	adds	r6, #1
 800c14a:	e7f2      	b.n	800c132 <__libc_init_array+0x1e>
 800c14c:	0800e378 	.word	0x0800e378
 800c150:	0800e378 	.word	0x0800e378
 800c154:	0800e378 	.word	0x0800e378
 800c158:	0800e37c 	.word	0x0800e37c

0800c15c <__retarget_lock_init_recursive>:
 800c15c:	4770      	bx	lr

0800c15e <__retarget_lock_acquire_recursive>:
 800c15e:	4770      	bx	lr

0800c160 <__retarget_lock_release_recursive>:
 800c160:	4770      	bx	lr
	...

0800c164 <malloc>:
 800c164:	4b02      	ldr	r3, [pc, #8]	; (800c170 <malloc+0xc>)
 800c166:	4601      	mov	r1, r0
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	f000 b895 	b.w	800c298 <_malloc_r>
 800c16e:	bf00      	nop
 800c170:	20000010 	.word	0x20000010

0800c174 <memcmp>:
 800c174:	b510      	push	{r4, lr}
 800c176:	3901      	subs	r1, #1
 800c178:	4402      	add	r2, r0
 800c17a:	4290      	cmp	r0, r2
 800c17c:	d101      	bne.n	800c182 <memcmp+0xe>
 800c17e:	2000      	movs	r0, #0
 800c180:	e005      	b.n	800c18e <memcmp+0x1a>
 800c182:	7803      	ldrb	r3, [r0, #0]
 800c184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c188:	42a3      	cmp	r3, r4
 800c18a:	d001      	beq.n	800c190 <memcmp+0x1c>
 800c18c:	1b18      	subs	r0, r3, r4
 800c18e:	bd10      	pop	{r4, pc}
 800c190:	3001      	adds	r0, #1
 800c192:	e7f2      	b.n	800c17a <memcmp+0x6>

0800c194 <memcpy>:
 800c194:	440a      	add	r2, r1
 800c196:	4291      	cmp	r1, r2
 800c198:	f100 33ff 	add.w	r3, r0, #4294967295
 800c19c:	d100      	bne.n	800c1a0 <memcpy+0xc>
 800c19e:	4770      	bx	lr
 800c1a0:	b510      	push	{r4, lr}
 800c1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1aa:	4291      	cmp	r1, r2
 800c1ac:	d1f9      	bne.n	800c1a2 <memcpy+0xe>
 800c1ae:	bd10      	pop	{r4, pc}

0800c1b0 <memset>:
 800c1b0:	4402      	add	r2, r0
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d100      	bne.n	800c1ba <memset+0xa>
 800c1b8:	4770      	bx	lr
 800c1ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c1be:	e7f9      	b.n	800c1b4 <memset+0x4>

0800c1c0 <_free_r>:
 800c1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1c2:	2900      	cmp	r1, #0
 800c1c4:	d044      	beq.n	800c250 <_free_r+0x90>
 800c1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1ca:	9001      	str	r0, [sp, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f1a1 0404 	sub.w	r4, r1, #4
 800c1d2:	bfb8      	it	lt
 800c1d4:	18e4      	addlt	r4, r4, r3
 800c1d6:	f000 fd33 	bl	800cc40 <__malloc_lock>
 800c1da:	4a1e      	ldr	r2, [pc, #120]	; (800c254 <_free_r+0x94>)
 800c1dc:	9801      	ldr	r0, [sp, #4]
 800c1de:	6813      	ldr	r3, [r2, #0]
 800c1e0:	b933      	cbnz	r3, 800c1f0 <_free_r+0x30>
 800c1e2:	6063      	str	r3, [r4, #4]
 800c1e4:	6014      	str	r4, [r2, #0]
 800c1e6:	b003      	add	sp, #12
 800c1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1ec:	f000 bd2e 	b.w	800cc4c <__malloc_unlock>
 800c1f0:	42a3      	cmp	r3, r4
 800c1f2:	d908      	bls.n	800c206 <_free_r+0x46>
 800c1f4:	6825      	ldr	r5, [r4, #0]
 800c1f6:	1961      	adds	r1, r4, r5
 800c1f8:	428b      	cmp	r3, r1
 800c1fa:	bf01      	itttt	eq
 800c1fc:	6819      	ldreq	r1, [r3, #0]
 800c1fe:	685b      	ldreq	r3, [r3, #4]
 800c200:	1949      	addeq	r1, r1, r5
 800c202:	6021      	streq	r1, [r4, #0]
 800c204:	e7ed      	b.n	800c1e2 <_free_r+0x22>
 800c206:	461a      	mov	r2, r3
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	b10b      	cbz	r3, 800c210 <_free_r+0x50>
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	d9fa      	bls.n	800c206 <_free_r+0x46>
 800c210:	6811      	ldr	r1, [r2, #0]
 800c212:	1855      	adds	r5, r2, r1
 800c214:	42a5      	cmp	r5, r4
 800c216:	d10b      	bne.n	800c230 <_free_r+0x70>
 800c218:	6824      	ldr	r4, [r4, #0]
 800c21a:	4421      	add	r1, r4
 800c21c:	1854      	adds	r4, r2, r1
 800c21e:	42a3      	cmp	r3, r4
 800c220:	6011      	str	r1, [r2, #0]
 800c222:	d1e0      	bne.n	800c1e6 <_free_r+0x26>
 800c224:	681c      	ldr	r4, [r3, #0]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	6053      	str	r3, [r2, #4]
 800c22a:	4421      	add	r1, r4
 800c22c:	6011      	str	r1, [r2, #0]
 800c22e:	e7da      	b.n	800c1e6 <_free_r+0x26>
 800c230:	d902      	bls.n	800c238 <_free_r+0x78>
 800c232:	230c      	movs	r3, #12
 800c234:	6003      	str	r3, [r0, #0]
 800c236:	e7d6      	b.n	800c1e6 <_free_r+0x26>
 800c238:	6825      	ldr	r5, [r4, #0]
 800c23a:	1961      	adds	r1, r4, r5
 800c23c:	428b      	cmp	r3, r1
 800c23e:	bf04      	itt	eq
 800c240:	6819      	ldreq	r1, [r3, #0]
 800c242:	685b      	ldreq	r3, [r3, #4]
 800c244:	6063      	str	r3, [r4, #4]
 800c246:	bf04      	itt	eq
 800c248:	1949      	addeq	r1, r1, r5
 800c24a:	6021      	streq	r1, [r4, #0]
 800c24c:	6054      	str	r4, [r2, #4]
 800c24e:	e7ca      	b.n	800c1e6 <_free_r+0x26>
 800c250:	b003      	add	sp, #12
 800c252:	bd30      	pop	{r4, r5, pc}
 800c254:	2000329c 	.word	0x2000329c

0800c258 <sbrk_aligned>:
 800c258:	b570      	push	{r4, r5, r6, lr}
 800c25a:	4e0e      	ldr	r6, [pc, #56]	; (800c294 <sbrk_aligned+0x3c>)
 800c25c:	460c      	mov	r4, r1
 800c25e:	6831      	ldr	r1, [r6, #0]
 800c260:	4605      	mov	r5, r0
 800c262:	b911      	cbnz	r1, 800c26a <sbrk_aligned+0x12>
 800c264:	f000 f984 	bl	800c570 <_sbrk_r>
 800c268:	6030      	str	r0, [r6, #0]
 800c26a:	4621      	mov	r1, r4
 800c26c:	4628      	mov	r0, r5
 800c26e:	f000 f97f 	bl	800c570 <_sbrk_r>
 800c272:	1c43      	adds	r3, r0, #1
 800c274:	d00a      	beq.n	800c28c <sbrk_aligned+0x34>
 800c276:	1cc4      	adds	r4, r0, #3
 800c278:	f024 0403 	bic.w	r4, r4, #3
 800c27c:	42a0      	cmp	r0, r4
 800c27e:	d007      	beq.n	800c290 <sbrk_aligned+0x38>
 800c280:	1a21      	subs	r1, r4, r0
 800c282:	4628      	mov	r0, r5
 800c284:	f000 f974 	bl	800c570 <_sbrk_r>
 800c288:	3001      	adds	r0, #1
 800c28a:	d101      	bne.n	800c290 <sbrk_aligned+0x38>
 800c28c:	f04f 34ff 	mov.w	r4, #4294967295
 800c290:	4620      	mov	r0, r4
 800c292:	bd70      	pop	{r4, r5, r6, pc}
 800c294:	200032a0 	.word	0x200032a0

0800c298 <_malloc_r>:
 800c298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29c:	1ccd      	adds	r5, r1, #3
 800c29e:	f025 0503 	bic.w	r5, r5, #3
 800c2a2:	3508      	adds	r5, #8
 800c2a4:	2d0c      	cmp	r5, #12
 800c2a6:	bf38      	it	cc
 800c2a8:	250c      	movcc	r5, #12
 800c2aa:	2d00      	cmp	r5, #0
 800c2ac:	4607      	mov	r7, r0
 800c2ae:	db01      	blt.n	800c2b4 <_malloc_r+0x1c>
 800c2b0:	42a9      	cmp	r1, r5
 800c2b2:	d905      	bls.n	800c2c0 <_malloc_r+0x28>
 800c2b4:	230c      	movs	r3, #12
 800c2b6:	603b      	str	r3, [r7, #0]
 800c2b8:	2600      	movs	r6, #0
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c0:	4e2e      	ldr	r6, [pc, #184]	; (800c37c <_malloc_r+0xe4>)
 800c2c2:	f000 fcbd 	bl	800cc40 <__malloc_lock>
 800c2c6:	6833      	ldr	r3, [r6, #0]
 800c2c8:	461c      	mov	r4, r3
 800c2ca:	bb34      	cbnz	r4, 800c31a <_malloc_r+0x82>
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	f7ff ffc2 	bl	800c258 <sbrk_aligned>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	d14d      	bne.n	800c376 <_malloc_r+0xde>
 800c2da:	6834      	ldr	r4, [r6, #0]
 800c2dc:	4626      	mov	r6, r4
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	d140      	bne.n	800c364 <_malloc_r+0xcc>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4638      	mov	r0, r7
 800c2e8:	eb04 0803 	add.w	r8, r4, r3
 800c2ec:	f000 f940 	bl	800c570 <_sbrk_r>
 800c2f0:	4580      	cmp	r8, r0
 800c2f2:	d13a      	bne.n	800c36a <_malloc_r+0xd2>
 800c2f4:	6821      	ldr	r1, [r4, #0]
 800c2f6:	3503      	adds	r5, #3
 800c2f8:	1a6d      	subs	r5, r5, r1
 800c2fa:	f025 0503 	bic.w	r5, r5, #3
 800c2fe:	3508      	adds	r5, #8
 800c300:	2d0c      	cmp	r5, #12
 800c302:	bf38      	it	cc
 800c304:	250c      	movcc	r5, #12
 800c306:	4629      	mov	r1, r5
 800c308:	4638      	mov	r0, r7
 800c30a:	f7ff ffa5 	bl	800c258 <sbrk_aligned>
 800c30e:	3001      	adds	r0, #1
 800c310:	d02b      	beq.n	800c36a <_malloc_r+0xd2>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	442b      	add	r3, r5
 800c316:	6023      	str	r3, [r4, #0]
 800c318:	e00e      	b.n	800c338 <_malloc_r+0xa0>
 800c31a:	6822      	ldr	r2, [r4, #0]
 800c31c:	1b52      	subs	r2, r2, r5
 800c31e:	d41e      	bmi.n	800c35e <_malloc_r+0xc6>
 800c320:	2a0b      	cmp	r2, #11
 800c322:	d916      	bls.n	800c352 <_malloc_r+0xba>
 800c324:	1961      	adds	r1, r4, r5
 800c326:	42a3      	cmp	r3, r4
 800c328:	6025      	str	r5, [r4, #0]
 800c32a:	bf18      	it	ne
 800c32c:	6059      	strne	r1, [r3, #4]
 800c32e:	6863      	ldr	r3, [r4, #4]
 800c330:	bf08      	it	eq
 800c332:	6031      	streq	r1, [r6, #0]
 800c334:	5162      	str	r2, [r4, r5]
 800c336:	604b      	str	r3, [r1, #4]
 800c338:	4638      	mov	r0, r7
 800c33a:	f104 060b 	add.w	r6, r4, #11
 800c33e:	f000 fc85 	bl	800cc4c <__malloc_unlock>
 800c342:	f026 0607 	bic.w	r6, r6, #7
 800c346:	1d23      	adds	r3, r4, #4
 800c348:	1af2      	subs	r2, r6, r3
 800c34a:	d0b6      	beq.n	800c2ba <_malloc_r+0x22>
 800c34c:	1b9b      	subs	r3, r3, r6
 800c34e:	50a3      	str	r3, [r4, r2]
 800c350:	e7b3      	b.n	800c2ba <_malloc_r+0x22>
 800c352:	6862      	ldr	r2, [r4, #4]
 800c354:	42a3      	cmp	r3, r4
 800c356:	bf0c      	ite	eq
 800c358:	6032      	streq	r2, [r6, #0]
 800c35a:	605a      	strne	r2, [r3, #4]
 800c35c:	e7ec      	b.n	800c338 <_malloc_r+0xa0>
 800c35e:	4623      	mov	r3, r4
 800c360:	6864      	ldr	r4, [r4, #4]
 800c362:	e7b2      	b.n	800c2ca <_malloc_r+0x32>
 800c364:	4634      	mov	r4, r6
 800c366:	6876      	ldr	r6, [r6, #4]
 800c368:	e7b9      	b.n	800c2de <_malloc_r+0x46>
 800c36a:	230c      	movs	r3, #12
 800c36c:	603b      	str	r3, [r7, #0]
 800c36e:	4638      	mov	r0, r7
 800c370:	f000 fc6c 	bl	800cc4c <__malloc_unlock>
 800c374:	e7a1      	b.n	800c2ba <_malloc_r+0x22>
 800c376:	6025      	str	r5, [r4, #0]
 800c378:	e7de      	b.n	800c338 <_malloc_r+0xa0>
 800c37a:	bf00      	nop
 800c37c:	2000329c 	.word	0x2000329c

0800c380 <iprintf>:
 800c380:	b40f      	push	{r0, r1, r2, r3}
 800c382:	4b0a      	ldr	r3, [pc, #40]	; (800c3ac <iprintf+0x2c>)
 800c384:	b513      	push	{r0, r1, r4, lr}
 800c386:	681c      	ldr	r4, [r3, #0]
 800c388:	b124      	cbz	r4, 800c394 <iprintf+0x14>
 800c38a:	69a3      	ldr	r3, [r4, #24]
 800c38c:	b913      	cbnz	r3, 800c394 <iprintf+0x14>
 800c38e:	4620      	mov	r0, r4
 800c390:	f7ff fe22 	bl	800bfd8 <__sinit>
 800c394:	ab05      	add	r3, sp, #20
 800c396:	9a04      	ldr	r2, [sp, #16]
 800c398:	68a1      	ldr	r1, [r4, #8]
 800c39a:	9301      	str	r3, [sp, #4]
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 fde1 	bl	800cf64 <_vfiprintf_r>
 800c3a2:	b002      	add	sp, #8
 800c3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a8:	b004      	add	sp, #16
 800c3aa:	4770      	bx	lr
 800c3ac:	20000010 	.word	0x20000010

0800c3b0 <_puts_r>:
 800c3b0:	b570      	push	{r4, r5, r6, lr}
 800c3b2:	460e      	mov	r6, r1
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	b118      	cbz	r0, 800c3c0 <_puts_r+0x10>
 800c3b8:	6983      	ldr	r3, [r0, #24]
 800c3ba:	b90b      	cbnz	r3, 800c3c0 <_puts_r+0x10>
 800c3bc:	f7ff fe0c 	bl	800bfd8 <__sinit>
 800c3c0:	69ab      	ldr	r3, [r5, #24]
 800c3c2:	68ac      	ldr	r4, [r5, #8]
 800c3c4:	b913      	cbnz	r3, 800c3cc <_puts_r+0x1c>
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f7ff fe06 	bl	800bfd8 <__sinit>
 800c3cc:	4b2c      	ldr	r3, [pc, #176]	; (800c480 <_puts_r+0xd0>)
 800c3ce:	429c      	cmp	r4, r3
 800c3d0:	d120      	bne.n	800c414 <_puts_r+0x64>
 800c3d2:	686c      	ldr	r4, [r5, #4]
 800c3d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3d6:	07db      	lsls	r3, r3, #31
 800c3d8:	d405      	bmi.n	800c3e6 <_puts_r+0x36>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	0598      	lsls	r0, r3, #22
 800c3de:	d402      	bmi.n	800c3e6 <_puts_r+0x36>
 800c3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e2:	f7ff febc 	bl	800c15e <__retarget_lock_acquire_recursive>
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	0719      	lsls	r1, r3, #28
 800c3ea:	d51d      	bpl.n	800c428 <_puts_r+0x78>
 800c3ec:	6923      	ldr	r3, [r4, #16]
 800c3ee:	b1db      	cbz	r3, 800c428 <_puts_r+0x78>
 800c3f0:	3e01      	subs	r6, #1
 800c3f2:	68a3      	ldr	r3, [r4, #8]
 800c3f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	60a3      	str	r3, [r4, #8]
 800c3fc:	bb39      	cbnz	r1, 800c44e <_puts_r+0x9e>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	da38      	bge.n	800c474 <_puts_r+0xc4>
 800c402:	4622      	mov	r2, r4
 800c404:	210a      	movs	r1, #10
 800c406:	4628      	mov	r0, r5
 800c408:	f000 f9ce 	bl	800c7a8 <__swbuf_r>
 800c40c:	3001      	adds	r0, #1
 800c40e:	d011      	beq.n	800c434 <_puts_r+0x84>
 800c410:	250a      	movs	r5, #10
 800c412:	e011      	b.n	800c438 <_puts_r+0x88>
 800c414:	4b1b      	ldr	r3, [pc, #108]	; (800c484 <_puts_r+0xd4>)
 800c416:	429c      	cmp	r4, r3
 800c418:	d101      	bne.n	800c41e <_puts_r+0x6e>
 800c41a:	68ac      	ldr	r4, [r5, #8]
 800c41c:	e7da      	b.n	800c3d4 <_puts_r+0x24>
 800c41e:	4b1a      	ldr	r3, [pc, #104]	; (800c488 <_puts_r+0xd8>)
 800c420:	429c      	cmp	r4, r3
 800c422:	bf08      	it	eq
 800c424:	68ec      	ldreq	r4, [r5, #12]
 800c426:	e7d5      	b.n	800c3d4 <_puts_r+0x24>
 800c428:	4621      	mov	r1, r4
 800c42a:	4628      	mov	r0, r5
 800c42c:	f000 fa20 	bl	800c870 <__swsetup_r>
 800c430:	2800      	cmp	r0, #0
 800c432:	d0dd      	beq.n	800c3f0 <_puts_r+0x40>
 800c434:	f04f 35ff 	mov.w	r5, #4294967295
 800c438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c43a:	07da      	lsls	r2, r3, #31
 800c43c:	d405      	bmi.n	800c44a <_puts_r+0x9a>
 800c43e:	89a3      	ldrh	r3, [r4, #12]
 800c440:	059b      	lsls	r3, r3, #22
 800c442:	d402      	bmi.n	800c44a <_puts_r+0x9a>
 800c444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c446:	f7ff fe8b 	bl	800c160 <__retarget_lock_release_recursive>
 800c44a:	4628      	mov	r0, r5
 800c44c:	bd70      	pop	{r4, r5, r6, pc}
 800c44e:	2b00      	cmp	r3, #0
 800c450:	da04      	bge.n	800c45c <_puts_r+0xac>
 800c452:	69a2      	ldr	r2, [r4, #24]
 800c454:	429a      	cmp	r2, r3
 800c456:	dc06      	bgt.n	800c466 <_puts_r+0xb6>
 800c458:	290a      	cmp	r1, #10
 800c45a:	d004      	beq.n	800c466 <_puts_r+0xb6>
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	6022      	str	r2, [r4, #0]
 800c462:	7019      	strb	r1, [r3, #0]
 800c464:	e7c5      	b.n	800c3f2 <_puts_r+0x42>
 800c466:	4622      	mov	r2, r4
 800c468:	4628      	mov	r0, r5
 800c46a:	f000 f99d 	bl	800c7a8 <__swbuf_r>
 800c46e:	3001      	adds	r0, #1
 800c470:	d1bf      	bne.n	800c3f2 <_puts_r+0x42>
 800c472:	e7df      	b.n	800c434 <_puts_r+0x84>
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	250a      	movs	r5, #10
 800c478:	1c5a      	adds	r2, r3, #1
 800c47a:	6022      	str	r2, [r4, #0]
 800c47c:	701d      	strb	r5, [r3, #0]
 800c47e:	e7db      	b.n	800c438 <_puts_r+0x88>
 800c480:	0800e248 	.word	0x0800e248
 800c484:	0800e268 	.word	0x0800e268
 800c488:	0800e228 	.word	0x0800e228

0800c48c <puts>:
 800c48c:	4b02      	ldr	r3, [pc, #8]	; (800c498 <puts+0xc>)
 800c48e:	4601      	mov	r1, r0
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	f7ff bf8d 	b.w	800c3b0 <_puts_r>
 800c496:	bf00      	nop
 800c498:	20000010 	.word	0x20000010

0800c49c <cleanup_glue>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	460c      	mov	r4, r1
 800c4a0:	6809      	ldr	r1, [r1, #0]
 800c4a2:	4605      	mov	r5, r0
 800c4a4:	b109      	cbz	r1, 800c4aa <cleanup_glue+0xe>
 800c4a6:	f7ff fff9 	bl	800c49c <cleanup_glue>
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4b2:	f7ff be85 	b.w	800c1c0 <_free_r>
	...

0800c4b8 <_reclaim_reent>:
 800c4b8:	4b2c      	ldr	r3, [pc, #176]	; (800c56c <_reclaim_reent+0xb4>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4283      	cmp	r3, r0
 800c4be:	b570      	push	{r4, r5, r6, lr}
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	d051      	beq.n	800c568 <_reclaim_reent+0xb0>
 800c4c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c4c6:	b143      	cbz	r3, 800c4da <_reclaim_reent+0x22>
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d14a      	bne.n	800c564 <_reclaim_reent+0xac>
 800c4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4d0:	6819      	ldr	r1, [r3, #0]
 800c4d2:	b111      	cbz	r1, 800c4da <_reclaim_reent+0x22>
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f7ff fe73 	bl	800c1c0 <_free_r>
 800c4da:	6961      	ldr	r1, [r4, #20]
 800c4dc:	b111      	cbz	r1, 800c4e4 <_reclaim_reent+0x2c>
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f7ff fe6e 	bl	800c1c0 <_free_r>
 800c4e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c4e6:	b111      	cbz	r1, 800c4ee <_reclaim_reent+0x36>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f7ff fe69 	bl	800c1c0 <_free_r>
 800c4ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c4f0:	b111      	cbz	r1, 800c4f8 <_reclaim_reent+0x40>
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f7ff fe64 	bl	800c1c0 <_free_r>
 800c4f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c4fa:	b111      	cbz	r1, 800c502 <_reclaim_reent+0x4a>
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	f7ff fe5f 	bl	800c1c0 <_free_r>
 800c502:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c504:	b111      	cbz	r1, 800c50c <_reclaim_reent+0x54>
 800c506:	4620      	mov	r0, r4
 800c508:	f7ff fe5a 	bl	800c1c0 <_free_r>
 800c50c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c50e:	b111      	cbz	r1, 800c516 <_reclaim_reent+0x5e>
 800c510:	4620      	mov	r0, r4
 800c512:	f7ff fe55 	bl	800c1c0 <_free_r>
 800c516:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c518:	b111      	cbz	r1, 800c520 <_reclaim_reent+0x68>
 800c51a:	4620      	mov	r0, r4
 800c51c:	f7ff fe50 	bl	800c1c0 <_free_r>
 800c520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c522:	b111      	cbz	r1, 800c52a <_reclaim_reent+0x72>
 800c524:	4620      	mov	r0, r4
 800c526:	f7ff fe4b 	bl	800c1c0 <_free_r>
 800c52a:	69a3      	ldr	r3, [r4, #24]
 800c52c:	b1e3      	cbz	r3, 800c568 <_reclaim_reent+0xb0>
 800c52e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c530:	4620      	mov	r0, r4
 800c532:	4798      	blx	r3
 800c534:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c536:	b1b9      	cbz	r1, 800c568 <_reclaim_reent+0xb0>
 800c538:	4620      	mov	r0, r4
 800c53a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c53e:	f7ff bfad 	b.w	800c49c <cleanup_glue>
 800c542:	5949      	ldr	r1, [r1, r5]
 800c544:	b941      	cbnz	r1, 800c558 <_reclaim_reent+0xa0>
 800c546:	3504      	adds	r5, #4
 800c548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c54a:	2d80      	cmp	r5, #128	; 0x80
 800c54c:	68d9      	ldr	r1, [r3, #12]
 800c54e:	d1f8      	bne.n	800c542 <_reclaim_reent+0x8a>
 800c550:	4620      	mov	r0, r4
 800c552:	f7ff fe35 	bl	800c1c0 <_free_r>
 800c556:	e7ba      	b.n	800c4ce <_reclaim_reent+0x16>
 800c558:	680e      	ldr	r6, [r1, #0]
 800c55a:	4620      	mov	r0, r4
 800c55c:	f7ff fe30 	bl	800c1c0 <_free_r>
 800c560:	4631      	mov	r1, r6
 800c562:	e7ef      	b.n	800c544 <_reclaim_reent+0x8c>
 800c564:	2500      	movs	r5, #0
 800c566:	e7ef      	b.n	800c548 <_reclaim_reent+0x90>
 800c568:	bd70      	pop	{r4, r5, r6, pc}
 800c56a:	bf00      	nop
 800c56c:	20000010 	.word	0x20000010

0800c570 <_sbrk_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	; (800c58c <_sbrk_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f5 f83e 	bl	80015fc <_sbrk>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_sbrk_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_sbrk_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	200032a4 	.word	0x200032a4

0800c590 <siprintf>:
 800c590:	b40e      	push	{r1, r2, r3}
 800c592:	b500      	push	{lr}
 800c594:	b09c      	sub	sp, #112	; 0x70
 800c596:	ab1d      	add	r3, sp, #116	; 0x74
 800c598:	9002      	str	r0, [sp, #8]
 800c59a:	9006      	str	r0, [sp, #24]
 800c59c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5a0:	4809      	ldr	r0, [pc, #36]	; (800c5c8 <siprintf+0x38>)
 800c5a2:	9107      	str	r1, [sp, #28]
 800c5a4:	9104      	str	r1, [sp, #16]
 800c5a6:	4909      	ldr	r1, [pc, #36]	; (800c5cc <siprintf+0x3c>)
 800c5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ac:	9105      	str	r1, [sp, #20]
 800c5ae:	6800      	ldr	r0, [r0, #0]
 800c5b0:	9301      	str	r3, [sp, #4]
 800c5b2:	a902      	add	r1, sp, #8
 800c5b4:	f000 fbac 	bl	800cd10 <_svfiprintf_r>
 800c5b8:	9b02      	ldr	r3, [sp, #8]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	701a      	strb	r2, [r3, #0]
 800c5be:	b01c      	add	sp, #112	; 0x70
 800c5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5c4:	b003      	add	sp, #12
 800c5c6:	4770      	bx	lr
 800c5c8:	20000010 	.word	0x20000010
 800c5cc:	ffff0208 	.word	0xffff0208

0800c5d0 <__sread>:
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d8:	f000 ff88 	bl	800d4ec <_read_r>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	bfab      	itete	ge
 800c5e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c5e4:	181b      	addge	r3, r3, r0
 800c5e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5ea:	bfac      	ite	ge
 800c5ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5ee:	81a3      	strhlt	r3, [r4, #12]
 800c5f0:	bd10      	pop	{r4, pc}

0800c5f2 <__swrite>:
 800c5f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f6:	461f      	mov	r7, r3
 800c5f8:	898b      	ldrh	r3, [r1, #12]
 800c5fa:	05db      	lsls	r3, r3, #23
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	460c      	mov	r4, r1
 800c600:	4616      	mov	r6, r2
 800c602:	d505      	bpl.n	800c610 <__swrite+0x1e>
 800c604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c608:	2302      	movs	r3, #2
 800c60a:	2200      	movs	r2, #0
 800c60c:	f000 faa0 	bl	800cb50 <_lseek_r>
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	4632      	mov	r2, r6
 800c61e:	463b      	mov	r3, r7
 800c620:	4628      	mov	r0, r5
 800c622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c626:	f000 b911 	b.w	800c84c <_write_r>

0800c62a <__sseek>:
 800c62a:	b510      	push	{r4, lr}
 800c62c:	460c      	mov	r4, r1
 800c62e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c632:	f000 fa8d 	bl	800cb50 <_lseek_r>
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	89a3      	ldrh	r3, [r4, #12]
 800c63a:	bf15      	itete	ne
 800c63c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c63e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c646:	81a3      	strheq	r3, [r4, #12]
 800c648:	bf18      	it	ne
 800c64a:	81a3      	strhne	r3, [r4, #12]
 800c64c:	bd10      	pop	{r4, pc}

0800c64e <__sclose>:
 800c64e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c652:	f000 b999 	b.w	800c988 <_close_r>

0800c656 <strcat>:
 800c656:	b510      	push	{r4, lr}
 800c658:	4602      	mov	r2, r0
 800c65a:	7814      	ldrb	r4, [r2, #0]
 800c65c:	4613      	mov	r3, r2
 800c65e:	3201      	adds	r2, #1
 800c660:	2c00      	cmp	r4, #0
 800c662:	d1fa      	bne.n	800c65a <strcat+0x4>
 800c664:	3b01      	subs	r3, #1
 800c666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c66a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c66e:	2a00      	cmp	r2, #0
 800c670:	d1f9      	bne.n	800c666 <strcat+0x10>
 800c672:	bd10      	pop	{r4, pc}

0800c674 <strncmp>:
 800c674:	b510      	push	{r4, lr}
 800c676:	b17a      	cbz	r2, 800c698 <strncmp+0x24>
 800c678:	4603      	mov	r3, r0
 800c67a:	3901      	subs	r1, #1
 800c67c:	1884      	adds	r4, r0, r2
 800c67e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c682:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c686:	4290      	cmp	r0, r2
 800c688:	d101      	bne.n	800c68e <strncmp+0x1a>
 800c68a:	42a3      	cmp	r3, r4
 800c68c:	d101      	bne.n	800c692 <strncmp+0x1e>
 800c68e:	1a80      	subs	r0, r0, r2
 800c690:	bd10      	pop	{r4, pc}
 800c692:	2800      	cmp	r0, #0
 800c694:	d1f3      	bne.n	800c67e <strncmp+0xa>
 800c696:	e7fa      	b.n	800c68e <strncmp+0x1a>
 800c698:	4610      	mov	r0, r2
 800c69a:	e7f9      	b.n	800c690 <strncmp+0x1c>

0800c69c <strncpy>:
 800c69c:	b510      	push	{r4, lr}
 800c69e:	3901      	subs	r1, #1
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	b132      	cbz	r2, 800c6b2 <strncpy+0x16>
 800c6a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c6a8:	f803 4b01 	strb.w	r4, [r3], #1
 800c6ac:	3a01      	subs	r2, #1
 800c6ae:	2c00      	cmp	r4, #0
 800c6b0:	d1f7      	bne.n	800c6a2 <strncpy+0x6>
 800c6b2:	441a      	add	r2, r3
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d100      	bne.n	800c6bc <strncpy+0x20>
 800c6ba:	bd10      	pop	{r4, pc}
 800c6bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c6c0:	e7f9      	b.n	800c6b6 <strncpy+0x1a>

0800c6c2 <strstr>:
 800c6c2:	780a      	ldrb	r2, [r1, #0]
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	b96a      	cbnz	r2, 800c6e4 <strstr+0x22>
 800c6c8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d109      	bne.n	800c6e2 <strstr+0x20>
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	4605      	mov	r5, r0
 800c6d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0f6      	beq.n	800c6c8 <strstr+0x6>
 800c6da:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c6de:	429e      	cmp	r6, r3
 800c6e0:	d0f7      	beq.n	800c6d2 <strstr+0x10>
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	7803      	ldrb	r3, [r0, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1ef      	bne.n	800c6ca <strstr+0x8>
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	e7ec      	b.n	800c6c8 <strstr+0x6>
	...

0800c6f0 <strtok>:
 800c6f0:	4b16      	ldr	r3, [pc, #88]	; (800c74c <strtok+0x5c>)
 800c6f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6f4:	681e      	ldr	r6, [r3, #0]
 800c6f6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	b9fc      	cbnz	r4, 800c73c <strtok+0x4c>
 800c6fc:	2050      	movs	r0, #80	; 0x50
 800c6fe:	9101      	str	r1, [sp, #4]
 800c700:	f7ff fd30 	bl	800c164 <malloc>
 800c704:	9901      	ldr	r1, [sp, #4]
 800c706:	65b0      	str	r0, [r6, #88]	; 0x58
 800c708:	4602      	mov	r2, r0
 800c70a:	b920      	cbnz	r0, 800c716 <strtok+0x26>
 800c70c:	4b10      	ldr	r3, [pc, #64]	; (800c750 <strtok+0x60>)
 800c70e:	4811      	ldr	r0, [pc, #68]	; (800c754 <strtok+0x64>)
 800c710:	2157      	movs	r1, #87	; 0x57
 800c712:	f000 f91b 	bl	800c94c <__assert_func>
 800c716:	e9c0 4400 	strd	r4, r4, [r0]
 800c71a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c71e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c722:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c726:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c72a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c72e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c732:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c736:	6184      	str	r4, [r0, #24]
 800c738:	7704      	strb	r4, [r0, #28]
 800c73a:	6244      	str	r4, [r0, #36]	; 0x24
 800c73c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c73e:	2301      	movs	r3, #1
 800c740:	4628      	mov	r0, r5
 800c742:	b002      	add	sp, #8
 800c744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c748:	f000 b806 	b.w	800c758 <__strtok_r>
 800c74c:	20000010 	.word	0x20000010
 800c750:	0800e28c 	.word	0x0800e28c
 800c754:	0800e2a3 	.word	0x0800e2a3

0800c758 <__strtok_r>:
 800c758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c75a:	b908      	cbnz	r0, 800c760 <__strtok_r+0x8>
 800c75c:	6810      	ldr	r0, [r2, #0]
 800c75e:	b188      	cbz	r0, 800c784 <__strtok_r+0x2c>
 800c760:	4604      	mov	r4, r0
 800c762:	4620      	mov	r0, r4
 800c764:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c768:	460f      	mov	r7, r1
 800c76a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c76e:	b91e      	cbnz	r6, 800c778 <__strtok_r+0x20>
 800c770:	b965      	cbnz	r5, 800c78c <__strtok_r+0x34>
 800c772:	6015      	str	r5, [r2, #0]
 800c774:	4628      	mov	r0, r5
 800c776:	e005      	b.n	800c784 <__strtok_r+0x2c>
 800c778:	42b5      	cmp	r5, r6
 800c77a:	d1f6      	bne.n	800c76a <__strtok_r+0x12>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1f0      	bne.n	800c762 <__strtok_r+0xa>
 800c780:	6014      	str	r4, [r2, #0]
 800c782:	7003      	strb	r3, [r0, #0]
 800c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c786:	461c      	mov	r4, r3
 800c788:	e00c      	b.n	800c7a4 <__strtok_r+0x4c>
 800c78a:	b915      	cbnz	r5, 800c792 <__strtok_r+0x3a>
 800c78c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c790:	460e      	mov	r6, r1
 800c792:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c796:	42ab      	cmp	r3, r5
 800c798:	d1f7      	bne.n	800c78a <__strtok_r+0x32>
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d0f3      	beq.n	800c786 <__strtok_r+0x2e>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c7a4:	6014      	str	r4, [r2, #0]
 800c7a6:	e7ed      	b.n	800c784 <__strtok_r+0x2c>

0800c7a8 <__swbuf_r>:
 800c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7aa:	460e      	mov	r6, r1
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	b118      	cbz	r0, 800c7ba <__swbuf_r+0x12>
 800c7b2:	6983      	ldr	r3, [r0, #24]
 800c7b4:	b90b      	cbnz	r3, 800c7ba <__swbuf_r+0x12>
 800c7b6:	f7ff fc0f 	bl	800bfd8 <__sinit>
 800c7ba:	4b21      	ldr	r3, [pc, #132]	; (800c840 <__swbuf_r+0x98>)
 800c7bc:	429c      	cmp	r4, r3
 800c7be:	d12b      	bne.n	800c818 <__swbuf_r+0x70>
 800c7c0:	686c      	ldr	r4, [r5, #4]
 800c7c2:	69a3      	ldr	r3, [r4, #24]
 800c7c4:	60a3      	str	r3, [r4, #8]
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	071a      	lsls	r2, r3, #28
 800c7ca:	d52f      	bpl.n	800c82c <__swbuf_r+0x84>
 800c7cc:	6923      	ldr	r3, [r4, #16]
 800c7ce:	b36b      	cbz	r3, 800c82c <__swbuf_r+0x84>
 800c7d0:	6923      	ldr	r3, [r4, #16]
 800c7d2:	6820      	ldr	r0, [r4, #0]
 800c7d4:	1ac0      	subs	r0, r0, r3
 800c7d6:	6963      	ldr	r3, [r4, #20]
 800c7d8:	b2f6      	uxtb	r6, r6
 800c7da:	4283      	cmp	r3, r0
 800c7dc:	4637      	mov	r7, r6
 800c7de:	dc04      	bgt.n	800c7ea <__swbuf_r+0x42>
 800c7e0:	4621      	mov	r1, r4
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f000 f966 	bl	800cab4 <_fflush_r>
 800c7e8:	bb30      	cbnz	r0, 800c838 <__swbuf_r+0x90>
 800c7ea:	68a3      	ldr	r3, [r4, #8]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	60a3      	str	r3, [r4, #8]
 800c7f0:	6823      	ldr	r3, [r4, #0]
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	6022      	str	r2, [r4, #0]
 800c7f6:	701e      	strb	r6, [r3, #0]
 800c7f8:	6963      	ldr	r3, [r4, #20]
 800c7fa:	3001      	adds	r0, #1
 800c7fc:	4283      	cmp	r3, r0
 800c7fe:	d004      	beq.n	800c80a <__swbuf_r+0x62>
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	07db      	lsls	r3, r3, #31
 800c804:	d506      	bpl.n	800c814 <__swbuf_r+0x6c>
 800c806:	2e0a      	cmp	r6, #10
 800c808:	d104      	bne.n	800c814 <__swbuf_r+0x6c>
 800c80a:	4621      	mov	r1, r4
 800c80c:	4628      	mov	r0, r5
 800c80e:	f000 f951 	bl	800cab4 <_fflush_r>
 800c812:	b988      	cbnz	r0, 800c838 <__swbuf_r+0x90>
 800c814:	4638      	mov	r0, r7
 800c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c818:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <__swbuf_r+0x9c>)
 800c81a:	429c      	cmp	r4, r3
 800c81c:	d101      	bne.n	800c822 <__swbuf_r+0x7a>
 800c81e:	68ac      	ldr	r4, [r5, #8]
 800c820:	e7cf      	b.n	800c7c2 <__swbuf_r+0x1a>
 800c822:	4b09      	ldr	r3, [pc, #36]	; (800c848 <__swbuf_r+0xa0>)
 800c824:	429c      	cmp	r4, r3
 800c826:	bf08      	it	eq
 800c828:	68ec      	ldreq	r4, [r5, #12]
 800c82a:	e7ca      	b.n	800c7c2 <__swbuf_r+0x1a>
 800c82c:	4621      	mov	r1, r4
 800c82e:	4628      	mov	r0, r5
 800c830:	f000 f81e 	bl	800c870 <__swsetup_r>
 800c834:	2800      	cmp	r0, #0
 800c836:	d0cb      	beq.n	800c7d0 <__swbuf_r+0x28>
 800c838:	f04f 37ff 	mov.w	r7, #4294967295
 800c83c:	e7ea      	b.n	800c814 <__swbuf_r+0x6c>
 800c83e:	bf00      	nop
 800c840:	0800e248 	.word	0x0800e248
 800c844:	0800e268 	.word	0x0800e268
 800c848:	0800e228 	.word	0x0800e228

0800c84c <_write_r>:
 800c84c:	b538      	push	{r3, r4, r5, lr}
 800c84e:	4d07      	ldr	r5, [pc, #28]	; (800c86c <_write_r+0x20>)
 800c850:	4604      	mov	r4, r0
 800c852:	4608      	mov	r0, r1
 800c854:	4611      	mov	r1, r2
 800c856:	2200      	movs	r2, #0
 800c858:	602a      	str	r2, [r5, #0]
 800c85a:	461a      	mov	r2, r3
 800c85c:	f7f4 fe7d 	bl	800155a <_write>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d102      	bne.n	800c86a <_write_r+0x1e>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b103      	cbz	r3, 800c86a <_write_r+0x1e>
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	bd38      	pop	{r3, r4, r5, pc}
 800c86c:	200032a4 	.word	0x200032a4

0800c870 <__swsetup_r>:
 800c870:	4b32      	ldr	r3, [pc, #200]	; (800c93c <__swsetup_r+0xcc>)
 800c872:	b570      	push	{r4, r5, r6, lr}
 800c874:	681d      	ldr	r5, [r3, #0]
 800c876:	4606      	mov	r6, r0
 800c878:	460c      	mov	r4, r1
 800c87a:	b125      	cbz	r5, 800c886 <__swsetup_r+0x16>
 800c87c:	69ab      	ldr	r3, [r5, #24]
 800c87e:	b913      	cbnz	r3, 800c886 <__swsetup_r+0x16>
 800c880:	4628      	mov	r0, r5
 800c882:	f7ff fba9 	bl	800bfd8 <__sinit>
 800c886:	4b2e      	ldr	r3, [pc, #184]	; (800c940 <__swsetup_r+0xd0>)
 800c888:	429c      	cmp	r4, r3
 800c88a:	d10f      	bne.n	800c8ac <__swsetup_r+0x3c>
 800c88c:	686c      	ldr	r4, [r5, #4]
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c894:	0719      	lsls	r1, r3, #28
 800c896:	d42c      	bmi.n	800c8f2 <__swsetup_r+0x82>
 800c898:	06dd      	lsls	r5, r3, #27
 800c89a:	d411      	bmi.n	800c8c0 <__swsetup_r+0x50>
 800c89c:	2309      	movs	r3, #9
 800c89e:	6033      	str	r3, [r6, #0]
 800c8a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8a4:	81a3      	strh	r3, [r4, #12]
 800c8a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8aa:	e03e      	b.n	800c92a <__swsetup_r+0xba>
 800c8ac:	4b25      	ldr	r3, [pc, #148]	; (800c944 <__swsetup_r+0xd4>)
 800c8ae:	429c      	cmp	r4, r3
 800c8b0:	d101      	bne.n	800c8b6 <__swsetup_r+0x46>
 800c8b2:	68ac      	ldr	r4, [r5, #8]
 800c8b4:	e7eb      	b.n	800c88e <__swsetup_r+0x1e>
 800c8b6:	4b24      	ldr	r3, [pc, #144]	; (800c948 <__swsetup_r+0xd8>)
 800c8b8:	429c      	cmp	r4, r3
 800c8ba:	bf08      	it	eq
 800c8bc:	68ec      	ldreq	r4, [r5, #12]
 800c8be:	e7e6      	b.n	800c88e <__swsetup_r+0x1e>
 800c8c0:	0758      	lsls	r0, r3, #29
 800c8c2:	d512      	bpl.n	800c8ea <__swsetup_r+0x7a>
 800c8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8c6:	b141      	cbz	r1, 800c8da <__swsetup_r+0x6a>
 800c8c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8cc:	4299      	cmp	r1, r3
 800c8ce:	d002      	beq.n	800c8d6 <__swsetup_r+0x66>
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f7ff fc75 	bl	800c1c0 <_free_r>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	6363      	str	r3, [r4, #52]	; 0x34
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8e0:	81a3      	strh	r3, [r4, #12]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	6063      	str	r3, [r4, #4]
 800c8e6:	6923      	ldr	r3, [r4, #16]
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	f043 0308 	orr.w	r3, r3, #8
 800c8f0:	81a3      	strh	r3, [r4, #12]
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	b94b      	cbnz	r3, 800c90a <__swsetup_r+0x9a>
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c900:	d003      	beq.n	800c90a <__swsetup_r+0x9a>
 800c902:	4621      	mov	r1, r4
 800c904:	4630      	mov	r0, r6
 800c906:	f000 f95b 	bl	800cbc0 <__smakebuf_r>
 800c90a:	89a0      	ldrh	r0, [r4, #12]
 800c90c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c910:	f010 0301 	ands.w	r3, r0, #1
 800c914:	d00a      	beq.n	800c92c <__swsetup_r+0xbc>
 800c916:	2300      	movs	r3, #0
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	6963      	ldr	r3, [r4, #20]
 800c91c:	425b      	negs	r3, r3
 800c91e:	61a3      	str	r3, [r4, #24]
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	b943      	cbnz	r3, 800c936 <__swsetup_r+0xc6>
 800c924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c928:	d1ba      	bne.n	800c8a0 <__swsetup_r+0x30>
 800c92a:	bd70      	pop	{r4, r5, r6, pc}
 800c92c:	0781      	lsls	r1, r0, #30
 800c92e:	bf58      	it	pl
 800c930:	6963      	ldrpl	r3, [r4, #20]
 800c932:	60a3      	str	r3, [r4, #8]
 800c934:	e7f4      	b.n	800c920 <__swsetup_r+0xb0>
 800c936:	2000      	movs	r0, #0
 800c938:	e7f7      	b.n	800c92a <__swsetup_r+0xba>
 800c93a:	bf00      	nop
 800c93c:	20000010 	.word	0x20000010
 800c940:	0800e248 	.word	0x0800e248
 800c944:	0800e268 	.word	0x0800e268
 800c948:	0800e228 	.word	0x0800e228

0800c94c <__assert_func>:
 800c94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c94e:	4614      	mov	r4, r2
 800c950:	461a      	mov	r2, r3
 800c952:	4b09      	ldr	r3, [pc, #36]	; (800c978 <__assert_func+0x2c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4605      	mov	r5, r0
 800c958:	68d8      	ldr	r0, [r3, #12]
 800c95a:	b14c      	cbz	r4, 800c970 <__assert_func+0x24>
 800c95c:	4b07      	ldr	r3, [pc, #28]	; (800c97c <__assert_func+0x30>)
 800c95e:	9100      	str	r1, [sp, #0]
 800c960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c964:	4906      	ldr	r1, [pc, #24]	; (800c980 <__assert_func+0x34>)
 800c966:	462b      	mov	r3, r5
 800c968:	f000 f8e0 	bl	800cb2c <fiprintf>
 800c96c:	f000 fdd0 	bl	800d510 <abort>
 800c970:	4b04      	ldr	r3, [pc, #16]	; (800c984 <__assert_func+0x38>)
 800c972:	461c      	mov	r4, r3
 800c974:	e7f3      	b.n	800c95e <__assert_func+0x12>
 800c976:	bf00      	nop
 800c978:	20000010 	.word	0x20000010
 800c97c:	0800e300 	.word	0x0800e300
 800c980:	0800e30d 	.word	0x0800e30d
 800c984:	0800e33b 	.word	0x0800e33b

0800c988 <_close_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4d06      	ldr	r5, [pc, #24]	; (800c9a4 <_close_r+0x1c>)
 800c98c:	2300      	movs	r3, #0
 800c98e:	4604      	mov	r4, r0
 800c990:	4608      	mov	r0, r1
 800c992:	602b      	str	r3, [r5, #0]
 800c994:	f7f4 fdfd 	bl	8001592 <_close>
 800c998:	1c43      	adds	r3, r0, #1
 800c99a:	d102      	bne.n	800c9a2 <_close_r+0x1a>
 800c99c:	682b      	ldr	r3, [r5, #0]
 800c99e:	b103      	cbz	r3, 800c9a2 <_close_r+0x1a>
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	bd38      	pop	{r3, r4, r5, pc}
 800c9a4:	200032a4 	.word	0x200032a4

0800c9a8 <__sflush_r>:
 800c9a8:	898a      	ldrh	r2, [r1, #12]
 800c9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ae:	4605      	mov	r5, r0
 800c9b0:	0710      	lsls	r0, r2, #28
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	d458      	bmi.n	800ca68 <__sflush_r+0xc0>
 800c9b6:	684b      	ldr	r3, [r1, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dc05      	bgt.n	800c9c8 <__sflush_r+0x20>
 800c9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	dc02      	bgt.n	800c9c8 <__sflush_r+0x20>
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9ca:	2e00      	cmp	r6, #0
 800c9cc:	d0f9      	beq.n	800c9c2 <__sflush_r+0x1a>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9d4:	682f      	ldr	r7, [r5, #0]
 800c9d6:	602b      	str	r3, [r5, #0]
 800c9d8:	d032      	beq.n	800ca40 <__sflush_r+0x98>
 800c9da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9dc:	89a3      	ldrh	r3, [r4, #12]
 800c9de:	075a      	lsls	r2, r3, #29
 800c9e0:	d505      	bpl.n	800c9ee <__sflush_r+0x46>
 800c9e2:	6863      	ldr	r3, [r4, #4]
 800c9e4:	1ac0      	subs	r0, r0, r3
 800c9e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9e8:	b10b      	cbz	r3, 800c9ee <__sflush_r+0x46>
 800c9ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9ec:	1ac0      	subs	r0, r0, r3
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9f4:	6a21      	ldr	r1, [r4, #32]
 800c9f6:	4628      	mov	r0, r5
 800c9f8:	47b0      	blx	r6
 800c9fa:	1c43      	adds	r3, r0, #1
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	d106      	bne.n	800ca0e <__sflush_r+0x66>
 800ca00:	6829      	ldr	r1, [r5, #0]
 800ca02:	291d      	cmp	r1, #29
 800ca04:	d82c      	bhi.n	800ca60 <__sflush_r+0xb8>
 800ca06:	4a2a      	ldr	r2, [pc, #168]	; (800cab0 <__sflush_r+0x108>)
 800ca08:	40ca      	lsrs	r2, r1
 800ca0a:	07d6      	lsls	r6, r2, #31
 800ca0c:	d528      	bpl.n	800ca60 <__sflush_r+0xb8>
 800ca0e:	2200      	movs	r2, #0
 800ca10:	6062      	str	r2, [r4, #4]
 800ca12:	04d9      	lsls	r1, r3, #19
 800ca14:	6922      	ldr	r2, [r4, #16]
 800ca16:	6022      	str	r2, [r4, #0]
 800ca18:	d504      	bpl.n	800ca24 <__sflush_r+0x7c>
 800ca1a:	1c42      	adds	r2, r0, #1
 800ca1c:	d101      	bne.n	800ca22 <__sflush_r+0x7a>
 800ca1e:	682b      	ldr	r3, [r5, #0]
 800ca20:	b903      	cbnz	r3, 800ca24 <__sflush_r+0x7c>
 800ca22:	6560      	str	r0, [r4, #84]	; 0x54
 800ca24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca26:	602f      	str	r7, [r5, #0]
 800ca28:	2900      	cmp	r1, #0
 800ca2a:	d0ca      	beq.n	800c9c2 <__sflush_r+0x1a>
 800ca2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca30:	4299      	cmp	r1, r3
 800ca32:	d002      	beq.n	800ca3a <__sflush_r+0x92>
 800ca34:	4628      	mov	r0, r5
 800ca36:	f7ff fbc3 	bl	800c1c0 <_free_r>
 800ca3a:	2000      	movs	r0, #0
 800ca3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ca3e:	e7c1      	b.n	800c9c4 <__sflush_r+0x1c>
 800ca40:	6a21      	ldr	r1, [r4, #32]
 800ca42:	2301      	movs	r3, #1
 800ca44:	4628      	mov	r0, r5
 800ca46:	47b0      	blx	r6
 800ca48:	1c41      	adds	r1, r0, #1
 800ca4a:	d1c7      	bne.n	800c9dc <__sflush_r+0x34>
 800ca4c:	682b      	ldr	r3, [r5, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0c4      	beq.n	800c9dc <__sflush_r+0x34>
 800ca52:	2b1d      	cmp	r3, #29
 800ca54:	d001      	beq.n	800ca5a <__sflush_r+0xb2>
 800ca56:	2b16      	cmp	r3, #22
 800ca58:	d101      	bne.n	800ca5e <__sflush_r+0xb6>
 800ca5a:	602f      	str	r7, [r5, #0]
 800ca5c:	e7b1      	b.n	800c9c2 <__sflush_r+0x1a>
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca64:	81a3      	strh	r3, [r4, #12]
 800ca66:	e7ad      	b.n	800c9c4 <__sflush_r+0x1c>
 800ca68:	690f      	ldr	r7, [r1, #16]
 800ca6a:	2f00      	cmp	r7, #0
 800ca6c:	d0a9      	beq.n	800c9c2 <__sflush_r+0x1a>
 800ca6e:	0793      	lsls	r3, r2, #30
 800ca70:	680e      	ldr	r6, [r1, #0]
 800ca72:	bf08      	it	eq
 800ca74:	694b      	ldreq	r3, [r1, #20]
 800ca76:	600f      	str	r7, [r1, #0]
 800ca78:	bf18      	it	ne
 800ca7a:	2300      	movne	r3, #0
 800ca7c:	eba6 0807 	sub.w	r8, r6, r7
 800ca80:	608b      	str	r3, [r1, #8]
 800ca82:	f1b8 0f00 	cmp.w	r8, #0
 800ca86:	dd9c      	ble.n	800c9c2 <__sflush_r+0x1a>
 800ca88:	6a21      	ldr	r1, [r4, #32]
 800ca8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca8c:	4643      	mov	r3, r8
 800ca8e:	463a      	mov	r2, r7
 800ca90:	4628      	mov	r0, r5
 800ca92:	47b0      	blx	r6
 800ca94:	2800      	cmp	r0, #0
 800ca96:	dc06      	bgt.n	800caa6 <__sflush_r+0xfe>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca9e:	81a3      	strh	r3, [r4, #12]
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295
 800caa4:	e78e      	b.n	800c9c4 <__sflush_r+0x1c>
 800caa6:	4407      	add	r7, r0
 800caa8:	eba8 0800 	sub.w	r8, r8, r0
 800caac:	e7e9      	b.n	800ca82 <__sflush_r+0xda>
 800caae:	bf00      	nop
 800cab0:	20400001 	.word	0x20400001

0800cab4 <_fflush_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	690b      	ldr	r3, [r1, #16]
 800cab8:	4605      	mov	r5, r0
 800caba:	460c      	mov	r4, r1
 800cabc:	b913      	cbnz	r3, 800cac4 <_fflush_r+0x10>
 800cabe:	2500      	movs	r5, #0
 800cac0:	4628      	mov	r0, r5
 800cac2:	bd38      	pop	{r3, r4, r5, pc}
 800cac4:	b118      	cbz	r0, 800cace <_fflush_r+0x1a>
 800cac6:	6983      	ldr	r3, [r0, #24]
 800cac8:	b90b      	cbnz	r3, 800cace <_fflush_r+0x1a>
 800caca:	f7ff fa85 	bl	800bfd8 <__sinit>
 800cace:	4b14      	ldr	r3, [pc, #80]	; (800cb20 <_fflush_r+0x6c>)
 800cad0:	429c      	cmp	r4, r3
 800cad2:	d11b      	bne.n	800cb0c <_fflush_r+0x58>
 800cad4:	686c      	ldr	r4, [r5, #4]
 800cad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d0ef      	beq.n	800cabe <_fflush_r+0xa>
 800cade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cae0:	07d0      	lsls	r0, r2, #31
 800cae2:	d404      	bmi.n	800caee <_fflush_r+0x3a>
 800cae4:	0599      	lsls	r1, r3, #22
 800cae6:	d402      	bmi.n	800caee <_fflush_r+0x3a>
 800cae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caea:	f7ff fb38 	bl	800c15e <__retarget_lock_acquire_recursive>
 800caee:	4628      	mov	r0, r5
 800caf0:	4621      	mov	r1, r4
 800caf2:	f7ff ff59 	bl	800c9a8 <__sflush_r>
 800caf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caf8:	07da      	lsls	r2, r3, #31
 800cafa:	4605      	mov	r5, r0
 800cafc:	d4e0      	bmi.n	800cac0 <_fflush_r+0xc>
 800cafe:	89a3      	ldrh	r3, [r4, #12]
 800cb00:	059b      	lsls	r3, r3, #22
 800cb02:	d4dd      	bmi.n	800cac0 <_fflush_r+0xc>
 800cb04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb06:	f7ff fb2b 	bl	800c160 <__retarget_lock_release_recursive>
 800cb0a:	e7d9      	b.n	800cac0 <_fflush_r+0xc>
 800cb0c:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <_fflush_r+0x70>)
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	d101      	bne.n	800cb16 <_fflush_r+0x62>
 800cb12:	68ac      	ldr	r4, [r5, #8]
 800cb14:	e7df      	b.n	800cad6 <_fflush_r+0x22>
 800cb16:	4b04      	ldr	r3, [pc, #16]	; (800cb28 <_fflush_r+0x74>)
 800cb18:	429c      	cmp	r4, r3
 800cb1a:	bf08      	it	eq
 800cb1c:	68ec      	ldreq	r4, [r5, #12]
 800cb1e:	e7da      	b.n	800cad6 <_fflush_r+0x22>
 800cb20:	0800e248 	.word	0x0800e248
 800cb24:	0800e268 	.word	0x0800e268
 800cb28:	0800e228 	.word	0x0800e228

0800cb2c <fiprintf>:
 800cb2c:	b40e      	push	{r1, r2, r3}
 800cb2e:	b503      	push	{r0, r1, lr}
 800cb30:	4601      	mov	r1, r0
 800cb32:	ab03      	add	r3, sp, #12
 800cb34:	4805      	ldr	r0, [pc, #20]	; (800cb4c <fiprintf+0x20>)
 800cb36:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb3a:	6800      	ldr	r0, [r0, #0]
 800cb3c:	9301      	str	r3, [sp, #4]
 800cb3e:	f000 fa11 	bl	800cf64 <_vfiprintf_r>
 800cb42:	b002      	add	sp, #8
 800cb44:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb48:	b003      	add	sp, #12
 800cb4a:	4770      	bx	lr
 800cb4c:	20000010 	.word	0x20000010

0800cb50 <_lseek_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	4d07      	ldr	r5, [pc, #28]	; (800cb70 <_lseek_r+0x20>)
 800cb54:	4604      	mov	r4, r0
 800cb56:	4608      	mov	r0, r1
 800cb58:	4611      	mov	r1, r2
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	602a      	str	r2, [r5, #0]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	f7f4 fd3e 	bl	80015e0 <_lseek>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_lseek_r+0x1e>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_lseek_r+0x1e>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	200032a4 	.word	0x200032a4

0800cb74 <__swhatbuf_r>:
 800cb74:	b570      	push	{r4, r5, r6, lr}
 800cb76:	460e      	mov	r6, r1
 800cb78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb7c:	2900      	cmp	r1, #0
 800cb7e:	b096      	sub	sp, #88	; 0x58
 800cb80:	4614      	mov	r4, r2
 800cb82:	461d      	mov	r5, r3
 800cb84:	da08      	bge.n	800cb98 <__swhatbuf_r+0x24>
 800cb86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	602a      	str	r2, [r5, #0]
 800cb8e:	061a      	lsls	r2, r3, #24
 800cb90:	d410      	bmi.n	800cbb4 <__swhatbuf_r+0x40>
 800cb92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb96:	e00e      	b.n	800cbb6 <__swhatbuf_r+0x42>
 800cb98:	466a      	mov	r2, sp
 800cb9a:	f000 fcc1 	bl	800d520 <_fstat_r>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	dbf1      	blt.n	800cb86 <__swhatbuf_r+0x12>
 800cba2:	9a01      	ldr	r2, [sp, #4]
 800cba4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cba8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbac:	425a      	negs	r2, r3
 800cbae:	415a      	adcs	r2, r3
 800cbb0:	602a      	str	r2, [r5, #0]
 800cbb2:	e7ee      	b.n	800cb92 <__swhatbuf_r+0x1e>
 800cbb4:	2340      	movs	r3, #64	; 0x40
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	b016      	add	sp, #88	; 0x58
 800cbbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cbc0 <__smakebuf_r>:
 800cbc0:	898b      	ldrh	r3, [r1, #12]
 800cbc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbc4:	079d      	lsls	r5, r3, #30
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	460c      	mov	r4, r1
 800cbca:	d507      	bpl.n	800cbdc <__smakebuf_r+0x1c>
 800cbcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	6123      	str	r3, [r4, #16]
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	6163      	str	r3, [r4, #20]
 800cbd8:	b002      	add	sp, #8
 800cbda:	bd70      	pop	{r4, r5, r6, pc}
 800cbdc:	ab01      	add	r3, sp, #4
 800cbde:	466a      	mov	r2, sp
 800cbe0:	f7ff ffc8 	bl	800cb74 <__swhatbuf_r>
 800cbe4:	9900      	ldr	r1, [sp, #0]
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	4630      	mov	r0, r6
 800cbea:	f7ff fb55 	bl	800c298 <_malloc_r>
 800cbee:	b948      	cbnz	r0, 800cc04 <__smakebuf_r+0x44>
 800cbf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf4:	059a      	lsls	r2, r3, #22
 800cbf6:	d4ef      	bmi.n	800cbd8 <__smakebuf_r+0x18>
 800cbf8:	f023 0303 	bic.w	r3, r3, #3
 800cbfc:	f043 0302 	orr.w	r3, r3, #2
 800cc00:	81a3      	strh	r3, [r4, #12]
 800cc02:	e7e3      	b.n	800cbcc <__smakebuf_r+0xc>
 800cc04:	4b0d      	ldr	r3, [pc, #52]	; (800cc3c <__smakebuf_r+0x7c>)
 800cc06:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	6020      	str	r0, [r4, #0]
 800cc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	9b00      	ldr	r3, [sp, #0]
 800cc14:	6163      	str	r3, [r4, #20]
 800cc16:	9b01      	ldr	r3, [sp, #4]
 800cc18:	6120      	str	r0, [r4, #16]
 800cc1a:	b15b      	cbz	r3, 800cc34 <__smakebuf_r+0x74>
 800cc1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc20:	4630      	mov	r0, r6
 800cc22:	f000 fc8f 	bl	800d544 <_isatty_r>
 800cc26:	b128      	cbz	r0, 800cc34 <__smakebuf_r+0x74>
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f023 0303 	bic.w	r3, r3, #3
 800cc2e:	f043 0301 	orr.w	r3, r3, #1
 800cc32:	81a3      	strh	r3, [r4, #12]
 800cc34:	89a0      	ldrh	r0, [r4, #12]
 800cc36:	4305      	orrs	r5, r0
 800cc38:	81a5      	strh	r5, [r4, #12]
 800cc3a:	e7cd      	b.n	800cbd8 <__smakebuf_r+0x18>
 800cc3c:	0800bf71 	.word	0x0800bf71

0800cc40 <__malloc_lock>:
 800cc40:	4801      	ldr	r0, [pc, #4]	; (800cc48 <__malloc_lock+0x8>)
 800cc42:	f7ff ba8c 	b.w	800c15e <__retarget_lock_acquire_recursive>
 800cc46:	bf00      	nop
 800cc48:	20003298 	.word	0x20003298

0800cc4c <__malloc_unlock>:
 800cc4c:	4801      	ldr	r0, [pc, #4]	; (800cc54 <__malloc_unlock+0x8>)
 800cc4e:	f7ff ba87 	b.w	800c160 <__retarget_lock_release_recursive>
 800cc52:	bf00      	nop
 800cc54:	20003298 	.word	0x20003298

0800cc58 <__ssputs_r>:
 800cc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc5c:	688e      	ldr	r6, [r1, #8]
 800cc5e:	429e      	cmp	r6, r3
 800cc60:	4682      	mov	sl, r0
 800cc62:	460c      	mov	r4, r1
 800cc64:	4690      	mov	r8, r2
 800cc66:	461f      	mov	r7, r3
 800cc68:	d838      	bhi.n	800ccdc <__ssputs_r+0x84>
 800cc6a:	898a      	ldrh	r2, [r1, #12]
 800cc6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc70:	d032      	beq.n	800ccd8 <__ssputs_r+0x80>
 800cc72:	6825      	ldr	r5, [r4, #0]
 800cc74:	6909      	ldr	r1, [r1, #16]
 800cc76:	eba5 0901 	sub.w	r9, r5, r1
 800cc7a:	6965      	ldr	r5, [r4, #20]
 800cc7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc84:	3301      	adds	r3, #1
 800cc86:	444b      	add	r3, r9
 800cc88:	106d      	asrs	r5, r5, #1
 800cc8a:	429d      	cmp	r5, r3
 800cc8c:	bf38      	it	cc
 800cc8e:	461d      	movcc	r5, r3
 800cc90:	0553      	lsls	r3, r2, #21
 800cc92:	d531      	bpl.n	800ccf8 <__ssputs_r+0xa0>
 800cc94:	4629      	mov	r1, r5
 800cc96:	f7ff faff 	bl	800c298 <_malloc_r>
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	b950      	cbnz	r0, 800ccb4 <__ssputs_r+0x5c>
 800cc9e:	230c      	movs	r3, #12
 800cca0:	f8ca 3000 	str.w	r3, [sl]
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccaa:	81a3      	strh	r3, [r4, #12]
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb4:	6921      	ldr	r1, [r4, #16]
 800ccb6:	464a      	mov	r2, r9
 800ccb8:	f7ff fa6c 	bl	800c194 <memcpy>
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccc6:	81a3      	strh	r3, [r4, #12]
 800ccc8:	6126      	str	r6, [r4, #16]
 800ccca:	6165      	str	r5, [r4, #20]
 800cccc:	444e      	add	r6, r9
 800ccce:	eba5 0509 	sub.w	r5, r5, r9
 800ccd2:	6026      	str	r6, [r4, #0]
 800ccd4:	60a5      	str	r5, [r4, #8]
 800ccd6:	463e      	mov	r6, r7
 800ccd8:	42be      	cmp	r6, r7
 800ccda:	d900      	bls.n	800ccde <__ssputs_r+0x86>
 800ccdc:	463e      	mov	r6, r7
 800ccde:	6820      	ldr	r0, [r4, #0]
 800cce0:	4632      	mov	r2, r6
 800cce2:	4641      	mov	r1, r8
 800cce4:	f000 fc3e 	bl	800d564 <memmove>
 800cce8:	68a3      	ldr	r3, [r4, #8]
 800ccea:	1b9b      	subs	r3, r3, r6
 800ccec:	60a3      	str	r3, [r4, #8]
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	4433      	add	r3, r6
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	e7db      	b.n	800ccb0 <__ssputs_r+0x58>
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	f000 fc4d 	bl	800d598 <_realloc_r>
 800ccfe:	4606      	mov	r6, r0
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d1e1      	bne.n	800ccc8 <__ssputs_r+0x70>
 800cd04:	6921      	ldr	r1, [r4, #16]
 800cd06:	4650      	mov	r0, sl
 800cd08:	f7ff fa5a 	bl	800c1c0 <_free_r>
 800cd0c:	e7c7      	b.n	800cc9e <__ssputs_r+0x46>
	...

0800cd10 <_svfiprintf_r>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	4698      	mov	r8, r3
 800cd16:	898b      	ldrh	r3, [r1, #12]
 800cd18:	061b      	lsls	r3, r3, #24
 800cd1a:	b09d      	sub	sp, #116	; 0x74
 800cd1c:	4607      	mov	r7, r0
 800cd1e:	460d      	mov	r5, r1
 800cd20:	4614      	mov	r4, r2
 800cd22:	d50e      	bpl.n	800cd42 <_svfiprintf_r+0x32>
 800cd24:	690b      	ldr	r3, [r1, #16]
 800cd26:	b963      	cbnz	r3, 800cd42 <_svfiprintf_r+0x32>
 800cd28:	2140      	movs	r1, #64	; 0x40
 800cd2a:	f7ff fab5 	bl	800c298 <_malloc_r>
 800cd2e:	6028      	str	r0, [r5, #0]
 800cd30:	6128      	str	r0, [r5, #16]
 800cd32:	b920      	cbnz	r0, 800cd3e <_svfiprintf_r+0x2e>
 800cd34:	230c      	movs	r3, #12
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3c:	e0d1      	b.n	800cee2 <_svfiprintf_r+0x1d2>
 800cd3e:	2340      	movs	r3, #64	; 0x40
 800cd40:	616b      	str	r3, [r5, #20]
 800cd42:	2300      	movs	r3, #0
 800cd44:	9309      	str	r3, [sp, #36]	; 0x24
 800cd46:	2320      	movs	r3, #32
 800cd48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd50:	2330      	movs	r3, #48	; 0x30
 800cd52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cefc <_svfiprintf_r+0x1ec>
 800cd56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd5a:	f04f 0901 	mov.w	r9, #1
 800cd5e:	4623      	mov	r3, r4
 800cd60:	469a      	mov	sl, r3
 800cd62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd66:	b10a      	cbz	r2, 800cd6c <_svfiprintf_r+0x5c>
 800cd68:	2a25      	cmp	r2, #37	; 0x25
 800cd6a:	d1f9      	bne.n	800cd60 <_svfiprintf_r+0x50>
 800cd6c:	ebba 0b04 	subs.w	fp, sl, r4
 800cd70:	d00b      	beq.n	800cd8a <_svfiprintf_r+0x7a>
 800cd72:	465b      	mov	r3, fp
 800cd74:	4622      	mov	r2, r4
 800cd76:	4629      	mov	r1, r5
 800cd78:	4638      	mov	r0, r7
 800cd7a:	f7ff ff6d 	bl	800cc58 <__ssputs_r>
 800cd7e:	3001      	adds	r0, #1
 800cd80:	f000 80aa 	beq.w	800ced8 <_svfiprintf_r+0x1c8>
 800cd84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd86:	445a      	add	r2, fp
 800cd88:	9209      	str	r2, [sp, #36]	; 0x24
 800cd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f000 80a2 	beq.w	800ced8 <_svfiprintf_r+0x1c8>
 800cd94:	2300      	movs	r3, #0
 800cd96:	f04f 32ff 	mov.w	r2, #4294967295
 800cd9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd9e:	f10a 0a01 	add.w	sl, sl, #1
 800cda2:	9304      	str	r3, [sp, #16]
 800cda4:	9307      	str	r3, [sp, #28]
 800cda6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdaa:	931a      	str	r3, [sp, #104]	; 0x68
 800cdac:	4654      	mov	r4, sl
 800cdae:	2205      	movs	r2, #5
 800cdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb4:	4851      	ldr	r0, [pc, #324]	; (800cefc <_svfiprintf_r+0x1ec>)
 800cdb6:	f7f3 fa13 	bl	80001e0 <memchr>
 800cdba:	9a04      	ldr	r2, [sp, #16]
 800cdbc:	b9d8      	cbnz	r0, 800cdf6 <_svfiprintf_r+0xe6>
 800cdbe:	06d0      	lsls	r0, r2, #27
 800cdc0:	bf44      	itt	mi
 800cdc2:	2320      	movmi	r3, #32
 800cdc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdc8:	0711      	lsls	r1, r2, #28
 800cdca:	bf44      	itt	mi
 800cdcc:	232b      	movmi	r3, #43	; 0x2b
 800cdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdd2:	f89a 3000 	ldrb.w	r3, [sl]
 800cdd6:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd8:	d015      	beq.n	800ce06 <_svfiprintf_r+0xf6>
 800cdda:	9a07      	ldr	r2, [sp, #28]
 800cddc:	4654      	mov	r4, sl
 800cdde:	2000      	movs	r0, #0
 800cde0:	f04f 0c0a 	mov.w	ip, #10
 800cde4:	4621      	mov	r1, r4
 800cde6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdea:	3b30      	subs	r3, #48	; 0x30
 800cdec:	2b09      	cmp	r3, #9
 800cdee:	d94e      	bls.n	800ce8e <_svfiprintf_r+0x17e>
 800cdf0:	b1b0      	cbz	r0, 800ce20 <_svfiprintf_r+0x110>
 800cdf2:	9207      	str	r2, [sp, #28]
 800cdf4:	e014      	b.n	800ce20 <_svfiprintf_r+0x110>
 800cdf6:	eba0 0308 	sub.w	r3, r0, r8
 800cdfa:	fa09 f303 	lsl.w	r3, r9, r3
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	9304      	str	r3, [sp, #16]
 800ce02:	46a2      	mov	sl, r4
 800ce04:	e7d2      	b.n	800cdac <_svfiprintf_r+0x9c>
 800ce06:	9b03      	ldr	r3, [sp, #12]
 800ce08:	1d19      	adds	r1, r3, #4
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	9103      	str	r1, [sp, #12]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	bfbb      	ittet	lt
 800ce12:	425b      	neglt	r3, r3
 800ce14:	f042 0202 	orrlt.w	r2, r2, #2
 800ce18:	9307      	strge	r3, [sp, #28]
 800ce1a:	9307      	strlt	r3, [sp, #28]
 800ce1c:	bfb8      	it	lt
 800ce1e:	9204      	strlt	r2, [sp, #16]
 800ce20:	7823      	ldrb	r3, [r4, #0]
 800ce22:	2b2e      	cmp	r3, #46	; 0x2e
 800ce24:	d10c      	bne.n	800ce40 <_svfiprintf_r+0x130>
 800ce26:	7863      	ldrb	r3, [r4, #1]
 800ce28:	2b2a      	cmp	r3, #42	; 0x2a
 800ce2a:	d135      	bne.n	800ce98 <_svfiprintf_r+0x188>
 800ce2c:	9b03      	ldr	r3, [sp, #12]
 800ce2e:	1d1a      	adds	r2, r3, #4
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	9203      	str	r2, [sp, #12]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	bfb8      	it	lt
 800ce38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce3c:	3402      	adds	r4, #2
 800ce3e:	9305      	str	r3, [sp, #20]
 800ce40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf0c <_svfiprintf_r+0x1fc>
 800ce44:	7821      	ldrb	r1, [r4, #0]
 800ce46:	2203      	movs	r2, #3
 800ce48:	4650      	mov	r0, sl
 800ce4a:	f7f3 f9c9 	bl	80001e0 <memchr>
 800ce4e:	b140      	cbz	r0, 800ce62 <_svfiprintf_r+0x152>
 800ce50:	2340      	movs	r3, #64	; 0x40
 800ce52:	eba0 000a 	sub.w	r0, r0, sl
 800ce56:	fa03 f000 	lsl.w	r0, r3, r0
 800ce5a:	9b04      	ldr	r3, [sp, #16]
 800ce5c:	4303      	orrs	r3, r0
 800ce5e:	3401      	adds	r4, #1
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce66:	4826      	ldr	r0, [pc, #152]	; (800cf00 <_svfiprintf_r+0x1f0>)
 800ce68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce6c:	2206      	movs	r2, #6
 800ce6e:	f7f3 f9b7 	bl	80001e0 <memchr>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d038      	beq.n	800cee8 <_svfiprintf_r+0x1d8>
 800ce76:	4b23      	ldr	r3, [pc, #140]	; (800cf04 <_svfiprintf_r+0x1f4>)
 800ce78:	bb1b      	cbnz	r3, 800cec2 <_svfiprintf_r+0x1b2>
 800ce7a:	9b03      	ldr	r3, [sp, #12]
 800ce7c:	3307      	adds	r3, #7
 800ce7e:	f023 0307 	bic.w	r3, r3, #7
 800ce82:	3308      	adds	r3, #8
 800ce84:	9303      	str	r3, [sp, #12]
 800ce86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce88:	4433      	add	r3, r6
 800ce8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce8c:	e767      	b.n	800cd5e <_svfiprintf_r+0x4e>
 800ce8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce92:	460c      	mov	r4, r1
 800ce94:	2001      	movs	r0, #1
 800ce96:	e7a5      	b.n	800cde4 <_svfiprintf_r+0xd4>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	3401      	adds	r4, #1
 800ce9c:	9305      	str	r3, [sp, #20]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	f04f 0c0a 	mov.w	ip, #10
 800cea4:	4620      	mov	r0, r4
 800cea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceaa:	3a30      	subs	r2, #48	; 0x30
 800ceac:	2a09      	cmp	r2, #9
 800ceae:	d903      	bls.n	800ceb8 <_svfiprintf_r+0x1a8>
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d0c5      	beq.n	800ce40 <_svfiprintf_r+0x130>
 800ceb4:	9105      	str	r1, [sp, #20]
 800ceb6:	e7c3      	b.n	800ce40 <_svfiprintf_r+0x130>
 800ceb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cebc:	4604      	mov	r4, r0
 800cebe:	2301      	movs	r3, #1
 800cec0:	e7f0      	b.n	800cea4 <_svfiprintf_r+0x194>
 800cec2:	ab03      	add	r3, sp, #12
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	462a      	mov	r2, r5
 800cec8:	4b0f      	ldr	r3, [pc, #60]	; (800cf08 <_svfiprintf_r+0x1f8>)
 800ceca:	a904      	add	r1, sp, #16
 800cecc:	4638      	mov	r0, r7
 800cece:	f3af 8000 	nop.w
 800ced2:	1c42      	adds	r2, r0, #1
 800ced4:	4606      	mov	r6, r0
 800ced6:	d1d6      	bne.n	800ce86 <_svfiprintf_r+0x176>
 800ced8:	89ab      	ldrh	r3, [r5, #12]
 800ceda:	065b      	lsls	r3, r3, #25
 800cedc:	f53f af2c 	bmi.w	800cd38 <_svfiprintf_r+0x28>
 800cee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cee2:	b01d      	add	sp, #116	; 0x74
 800cee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee8:	ab03      	add	r3, sp, #12
 800ceea:	9300      	str	r3, [sp, #0]
 800ceec:	462a      	mov	r2, r5
 800ceee:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <_svfiprintf_r+0x1f8>)
 800cef0:	a904      	add	r1, sp, #16
 800cef2:	4638      	mov	r0, r7
 800cef4:	f000 f9d4 	bl	800d2a0 <_printf_i>
 800cef8:	e7eb      	b.n	800ced2 <_svfiprintf_r+0x1c2>
 800cefa:	bf00      	nop
 800cefc:	0800e33c 	.word	0x0800e33c
 800cf00:	0800e346 	.word	0x0800e346
 800cf04:	00000000 	.word	0x00000000
 800cf08:	0800cc59 	.word	0x0800cc59
 800cf0c:	0800e342 	.word	0x0800e342

0800cf10 <__sfputc_r>:
 800cf10:	6893      	ldr	r3, [r2, #8]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	b410      	push	{r4}
 800cf18:	6093      	str	r3, [r2, #8]
 800cf1a:	da08      	bge.n	800cf2e <__sfputc_r+0x1e>
 800cf1c:	6994      	ldr	r4, [r2, #24]
 800cf1e:	42a3      	cmp	r3, r4
 800cf20:	db01      	blt.n	800cf26 <__sfputc_r+0x16>
 800cf22:	290a      	cmp	r1, #10
 800cf24:	d103      	bne.n	800cf2e <__sfputc_r+0x1e>
 800cf26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf2a:	f7ff bc3d 	b.w	800c7a8 <__swbuf_r>
 800cf2e:	6813      	ldr	r3, [r2, #0]
 800cf30:	1c58      	adds	r0, r3, #1
 800cf32:	6010      	str	r0, [r2, #0]
 800cf34:	7019      	strb	r1, [r3, #0]
 800cf36:	4608      	mov	r0, r1
 800cf38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <__sfputs_r>:
 800cf3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf40:	4606      	mov	r6, r0
 800cf42:	460f      	mov	r7, r1
 800cf44:	4614      	mov	r4, r2
 800cf46:	18d5      	adds	r5, r2, r3
 800cf48:	42ac      	cmp	r4, r5
 800cf4a:	d101      	bne.n	800cf50 <__sfputs_r+0x12>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e007      	b.n	800cf60 <__sfputs_r+0x22>
 800cf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf54:	463a      	mov	r2, r7
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7ff ffda 	bl	800cf10 <__sfputc_r>
 800cf5c:	1c43      	adds	r3, r0, #1
 800cf5e:	d1f3      	bne.n	800cf48 <__sfputs_r+0xa>
 800cf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf64 <_vfiprintf_r>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	460d      	mov	r5, r1
 800cf6a:	b09d      	sub	sp, #116	; 0x74
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	4698      	mov	r8, r3
 800cf70:	4606      	mov	r6, r0
 800cf72:	b118      	cbz	r0, 800cf7c <_vfiprintf_r+0x18>
 800cf74:	6983      	ldr	r3, [r0, #24]
 800cf76:	b90b      	cbnz	r3, 800cf7c <_vfiprintf_r+0x18>
 800cf78:	f7ff f82e 	bl	800bfd8 <__sinit>
 800cf7c:	4b89      	ldr	r3, [pc, #548]	; (800d1a4 <_vfiprintf_r+0x240>)
 800cf7e:	429d      	cmp	r5, r3
 800cf80:	d11b      	bne.n	800cfba <_vfiprintf_r+0x56>
 800cf82:	6875      	ldr	r5, [r6, #4]
 800cf84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf86:	07d9      	lsls	r1, r3, #31
 800cf88:	d405      	bmi.n	800cf96 <_vfiprintf_r+0x32>
 800cf8a:	89ab      	ldrh	r3, [r5, #12]
 800cf8c:	059a      	lsls	r2, r3, #22
 800cf8e:	d402      	bmi.n	800cf96 <_vfiprintf_r+0x32>
 800cf90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf92:	f7ff f8e4 	bl	800c15e <__retarget_lock_acquire_recursive>
 800cf96:	89ab      	ldrh	r3, [r5, #12]
 800cf98:	071b      	lsls	r3, r3, #28
 800cf9a:	d501      	bpl.n	800cfa0 <_vfiprintf_r+0x3c>
 800cf9c:	692b      	ldr	r3, [r5, #16]
 800cf9e:	b9eb      	cbnz	r3, 800cfdc <_vfiprintf_r+0x78>
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f7ff fc64 	bl	800c870 <__swsetup_r>
 800cfa8:	b1c0      	cbz	r0, 800cfdc <_vfiprintf_r+0x78>
 800cfaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfac:	07dc      	lsls	r4, r3, #31
 800cfae:	d50e      	bpl.n	800cfce <_vfiprintf_r+0x6a>
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb4:	b01d      	add	sp, #116	; 0x74
 800cfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfba:	4b7b      	ldr	r3, [pc, #492]	; (800d1a8 <_vfiprintf_r+0x244>)
 800cfbc:	429d      	cmp	r5, r3
 800cfbe:	d101      	bne.n	800cfc4 <_vfiprintf_r+0x60>
 800cfc0:	68b5      	ldr	r5, [r6, #8]
 800cfc2:	e7df      	b.n	800cf84 <_vfiprintf_r+0x20>
 800cfc4:	4b79      	ldr	r3, [pc, #484]	; (800d1ac <_vfiprintf_r+0x248>)
 800cfc6:	429d      	cmp	r5, r3
 800cfc8:	bf08      	it	eq
 800cfca:	68f5      	ldreq	r5, [r6, #12]
 800cfcc:	e7da      	b.n	800cf84 <_vfiprintf_r+0x20>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	0598      	lsls	r0, r3, #22
 800cfd2:	d4ed      	bmi.n	800cfb0 <_vfiprintf_r+0x4c>
 800cfd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd6:	f7ff f8c3 	bl	800c160 <__retarget_lock_release_recursive>
 800cfda:	e7e9      	b.n	800cfb0 <_vfiprintf_r+0x4c>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe0:	2320      	movs	r3, #32
 800cfe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfea:	2330      	movs	r3, #48	; 0x30
 800cfec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d1b0 <_vfiprintf_r+0x24c>
 800cff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cff4:	f04f 0901 	mov.w	r9, #1
 800cff8:	4623      	mov	r3, r4
 800cffa:	469a      	mov	sl, r3
 800cffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d000:	b10a      	cbz	r2, 800d006 <_vfiprintf_r+0xa2>
 800d002:	2a25      	cmp	r2, #37	; 0x25
 800d004:	d1f9      	bne.n	800cffa <_vfiprintf_r+0x96>
 800d006:	ebba 0b04 	subs.w	fp, sl, r4
 800d00a:	d00b      	beq.n	800d024 <_vfiprintf_r+0xc0>
 800d00c:	465b      	mov	r3, fp
 800d00e:	4622      	mov	r2, r4
 800d010:	4629      	mov	r1, r5
 800d012:	4630      	mov	r0, r6
 800d014:	f7ff ff93 	bl	800cf3e <__sfputs_r>
 800d018:	3001      	adds	r0, #1
 800d01a:	f000 80aa 	beq.w	800d172 <_vfiprintf_r+0x20e>
 800d01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d020:	445a      	add	r2, fp
 800d022:	9209      	str	r2, [sp, #36]	; 0x24
 800d024:	f89a 3000 	ldrb.w	r3, [sl]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 80a2 	beq.w	800d172 <_vfiprintf_r+0x20e>
 800d02e:	2300      	movs	r3, #0
 800d030:	f04f 32ff 	mov.w	r2, #4294967295
 800d034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d038:	f10a 0a01 	add.w	sl, sl, #1
 800d03c:	9304      	str	r3, [sp, #16]
 800d03e:	9307      	str	r3, [sp, #28]
 800d040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d044:	931a      	str	r3, [sp, #104]	; 0x68
 800d046:	4654      	mov	r4, sl
 800d048:	2205      	movs	r2, #5
 800d04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d04e:	4858      	ldr	r0, [pc, #352]	; (800d1b0 <_vfiprintf_r+0x24c>)
 800d050:	f7f3 f8c6 	bl	80001e0 <memchr>
 800d054:	9a04      	ldr	r2, [sp, #16]
 800d056:	b9d8      	cbnz	r0, 800d090 <_vfiprintf_r+0x12c>
 800d058:	06d1      	lsls	r1, r2, #27
 800d05a:	bf44      	itt	mi
 800d05c:	2320      	movmi	r3, #32
 800d05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d062:	0713      	lsls	r3, r2, #28
 800d064:	bf44      	itt	mi
 800d066:	232b      	movmi	r3, #43	; 0x2b
 800d068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d06c:	f89a 3000 	ldrb.w	r3, [sl]
 800d070:	2b2a      	cmp	r3, #42	; 0x2a
 800d072:	d015      	beq.n	800d0a0 <_vfiprintf_r+0x13c>
 800d074:	9a07      	ldr	r2, [sp, #28]
 800d076:	4654      	mov	r4, sl
 800d078:	2000      	movs	r0, #0
 800d07a:	f04f 0c0a 	mov.w	ip, #10
 800d07e:	4621      	mov	r1, r4
 800d080:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d084:	3b30      	subs	r3, #48	; 0x30
 800d086:	2b09      	cmp	r3, #9
 800d088:	d94e      	bls.n	800d128 <_vfiprintf_r+0x1c4>
 800d08a:	b1b0      	cbz	r0, 800d0ba <_vfiprintf_r+0x156>
 800d08c:	9207      	str	r2, [sp, #28]
 800d08e:	e014      	b.n	800d0ba <_vfiprintf_r+0x156>
 800d090:	eba0 0308 	sub.w	r3, r0, r8
 800d094:	fa09 f303 	lsl.w	r3, r9, r3
 800d098:	4313      	orrs	r3, r2
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	46a2      	mov	sl, r4
 800d09e:	e7d2      	b.n	800d046 <_vfiprintf_r+0xe2>
 800d0a0:	9b03      	ldr	r3, [sp, #12]
 800d0a2:	1d19      	adds	r1, r3, #4
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	9103      	str	r1, [sp, #12]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	bfbb      	ittet	lt
 800d0ac:	425b      	neglt	r3, r3
 800d0ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d0b2:	9307      	strge	r3, [sp, #28]
 800d0b4:	9307      	strlt	r3, [sp, #28]
 800d0b6:	bfb8      	it	lt
 800d0b8:	9204      	strlt	r2, [sp, #16]
 800d0ba:	7823      	ldrb	r3, [r4, #0]
 800d0bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d0be:	d10c      	bne.n	800d0da <_vfiprintf_r+0x176>
 800d0c0:	7863      	ldrb	r3, [r4, #1]
 800d0c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c4:	d135      	bne.n	800d132 <_vfiprintf_r+0x1ce>
 800d0c6:	9b03      	ldr	r3, [sp, #12]
 800d0c8:	1d1a      	adds	r2, r3, #4
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	9203      	str	r2, [sp, #12]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	bfb8      	it	lt
 800d0d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0d6:	3402      	adds	r4, #2
 800d0d8:	9305      	str	r3, [sp, #20]
 800d0da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d1c0 <_vfiprintf_r+0x25c>
 800d0de:	7821      	ldrb	r1, [r4, #0]
 800d0e0:	2203      	movs	r2, #3
 800d0e2:	4650      	mov	r0, sl
 800d0e4:	f7f3 f87c 	bl	80001e0 <memchr>
 800d0e8:	b140      	cbz	r0, 800d0fc <_vfiprintf_r+0x198>
 800d0ea:	2340      	movs	r3, #64	; 0x40
 800d0ec:	eba0 000a 	sub.w	r0, r0, sl
 800d0f0:	fa03 f000 	lsl.w	r0, r3, r0
 800d0f4:	9b04      	ldr	r3, [sp, #16]
 800d0f6:	4303      	orrs	r3, r0
 800d0f8:	3401      	adds	r4, #1
 800d0fa:	9304      	str	r3, [sp, #16]
 800d0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d100:	482c      	ldr	r0, [pc, #176]	; (800d1b4 <_vfiprintf_r+0x250>)
 800d102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d106:	2206      	movs	r2, #6
 800d108:	f7f3 f86a 	bl	80001e0 <memchr>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d03f      	beq.n	800d190 <_vfiprintf_r+0x22c>
 800d110:	4b29      	ldr	r3, [pc, #164]	; (800d1b8 <_vfiprintf_r+0x254>)
 800d112:	bb1b      	cbnz	r3, 800d15c <_vfiprintf_r+0x1f8>
 800d114:	9b03      	ldr	r3, [sp, #12]
 800d116:	3307      	adds	r3, #7
 800d118:	f023 0307 	bic.w	r3, r3, #7
 800d11c:	3308      	adds	r3, #8
 800d11e:	9303      	str	r3, [sp, #12]
 800d120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d122:	443b      	add	r3, r7
 800d124:	9309      	str	r3, [sp, #36]	; 0x24
 800d126:	e767      	b.n	800cff8 <_vfiprintf_r+0x94>
 800d128:	fb0c 3202 	mla	r2, ip, r2, r3
 800d12c:	460c      	mov	r4, r1
 800d12e:	2001      	movs	r0, #1
 800d130:	e7a5      	b.n	800d07e <_vfiprintf_r+0x11a>
 800d132:	2300      	movs	r3, #0
 800d134:	3401      	adds	r4, #1
 800d136:	9305      	str	r3, [sp, #20]
 800d138:	4619      	mov	r1, r3
 800d13a:	f04f 0c0a 	mov.w	ip, #10
 800d13e:	4620      	mov	r0, r4
 800d140:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d144:	3a30      	subs	r2, #48	; 0x30
 800d146:	2a09      	cmp	r2, #9
 800d148:	d903      	bls.n	800d152 <_vfiprintf_r+0x1ee>
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d0c5      	beq.n	800d0da <_vfiprintf_r+0x176>
 800d14e:	9105      	str	r1, [sp, #20]
 800d150:	e7c3      	b.n	800d0da <_vfiprintf_r+0x176>
 800d152:	fb0c 2101 	mla	r1, ip, r1, r2
 800d156:	4604      	mov	r4, r0
 800d158:	2301      	movs	r3, #1
 800d15a:	e7f0      	b.n	800d13e <_vfiprintf_r+0x1da>
 800d15c:	ab03      	add	r3, sp, #12
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	462a      	mov	r2, r5
 800d162:	4b16      	ldr	r3, [pc, #88]	; (800d1bc <_vfiprintf_r+0x258>)
 800d164:	a904      	add	r1, sp, #16
 800d166:	4630      	mov	r0, r6
 800d168:	f3af 8000 	nop.w
 800d16c:	4607      	mov	r7, r0
 800d16e:	1c78      	adds	r0, r7, #1
 800d170:	d1d6      	bne.n	800d120 <_vfiprintf_r+0x1bc>
 800d172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d174:	07d9      	lsls	r1, r3, #31
 800d176:	d405      	bmi.n	800d184 <_vfiprintf_r+0x220>
 800d178:	89ab      	ldrh	r3, [r5, #12]
 800d17a:	059a      	lsls	r2, r3, #22
 800d17c:	d402      	bmi.n	800d184 <_vfiprintf_r+0x220>
 800d17e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d180:	f7fe ffee 	bl	800c160 <__retarget_lock_release_recursive>
 800d184:	89ab      	ldrh	r3, [r5, #12]
 800d186:	065b      	lsls	r3, r3, #25
 800d188:	f53f af12 	bmi.w	800cfb0 <_vfiprintf_r+0x4c>
 800d18c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d18e:	e711      	b.n	800cfb4 <_vfiprintf_r+0x50>
 800d190:	ab03      	add	r3, sp, #12
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	462a      	mov	r2, r5
 800d196:	4b09      	ldr	r3, [pc, #36]	; (800d1bc <_vfiprintf_r+0x258>)
 800d198:	a904      	add	r1, sp, #16
 800d19a:	4630      	mov	r0, r6
 800d19c:	f000 f880 	bl	800d2a0 <_printf_i>
 800d1a0:	e7e4      	b.n	800d16c <_vfiprintf_r+0x208>
 800d1a2:	bf00      	nop
 800d1a4:	0800e248 	.word	0x0800e248
 800d1a8:	0800e268 	.word	0x0800e268
 800d1ac:	0800e228 	.word	0x0800e228
 800d1b0:	0800e33c 	.word	0x0800e33c
 800d1b4:	0800e346 	.word	0x0800e346
 800d1b8:	00000000 	.word	0x00000000
 800d1bc:	0800cf3f 	.word	0x0800cf3f
 800d1c0:	0800e342 	.word	0x0800e342

0800d1c4 <_printf_common>:
 800d1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c8:	4616      	mov	r6, r2
 800d1ca:	4699      	mov	r9, r3
 800d1cc:	688a      	ldr	r2, [r1, #8]
 800d1ce:	690b      	ldr	r3, [r1, #16]
 800d1d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	bfb8      	it	lt
 800d1d8:	4613      	movlt	r3, r2
 800d1da:	6033      	str	r3, [r6, #0]
 800d1dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1e0:	4607      	mov	r7, r0
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	b10a      	cbz	r2, 800d1ea <_printf_common+0x26>
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	6033      	str	r3, [r6, #0]
 800d1ea:	6823      	ldr	r3, [r4, #0]
 800d1ec:	0699      	lsls	r1, r3, #26
 800d1ee:	bf42      	ittt	mi
 800d1f0:	6833      	ldrmi	r3, [r6, #0]
 800d1f2:	3302      	addmi	r3, #2
 800d1f4:	6033      	strmi	r3, [r6, #0]
 800d1f6:	6825      	ldr	r5, [r4, #0]
 800d1f8:	f015 0506 	ands.w	r5, r5, #6
 800d1fc:	d106      	bne.n	800d20c <_printf_common+0x48>
 800d1fe:	f104 0a19 	add.w	sl, r4, #25
 800d202:	68e3      	ldr	r3, [r4, #12]
 800d204:	6832      	ldr	r2, [r6, #0]
 800d206:	1a9b      	subs	r3, r3, r2
 800d208:	42ab      	cmp	r3, r5
 800d20a:	dc26      	bgt.n	800d25a <_printf_common+0x96>
 800d20c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d210:	1e13      	subs	r3, r2, #0
 800d212:	6822      	ldr	r2, [r4, #0]
 800d214:	bf18      	it	ne
 800d216:	2301      	movne	r3, #1
 800d218:	0692      	lsls	r2, r2, #26
 800d21a:	d42b      	bmi.n	800d274 <_printf_common+0xb0>
 800d21c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d220:	4649      	mov	r1, r9
 800d222:	4638      	mov	r0, r7
 800d224:	47c0      	blx	r8
 800d226:	3001      	adds	r0, #1
 800d228:	d01e      	beq.n	800d268 <_printf_common+0xa4>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	68e5      	ldr	r5, [r4, #12]
 800d22e:	6832      	ldr	r2, [r6, #0]
 800d230:	f003 0306 	and.w	r3, r3, #6
 800d234:	2b04      	cmp	r3, #4
 800d236:	bf08      	it	eq
 800d238:	1aad      	subeq	r5, r5, r2
 800d23a:	68a3      	ldr	r3, [r4, #8]
 800d23c:	6922      	ldr	r2, [r4, #16]
 800d23e:	bf0c      	ite	eq
 800d240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d244:	2500      	movne	r5, #0
 800d246:	4293      	cmp	r3, r2
 800d248:	bfc4      	itt	gt
 800d24a:	1a9b      	subgt	r3, r3, r2
 800d24c:	18ed      	addgt	r5, r5, r3
 800d24e:	2600      	movs	r6, #0
 800d250:	341a      	adds	r4, #26
 800d252:	42b5      	cmp	r5, r6
 800d254:	d11a      	bne.n	800d28c <_printf_common+0xc8>
 800d256:	2000      	movs	r0, #0
 800d258:	e008      	b.n	800d26c <_printf_common+0xa8>
 800d25a:	2301      	movs	r3, #1
 800d25c:	4652      	mov	r2, sl
 800d25e:	4649      	mov	r1, r9
 800d260:	4638      	mov	r0, r7
 800d262:	47c0      	blx	r8
 800d264:	3001      	adds	r0, #1
 800d266:	d103      	bne.n	800d270 <_printf_common+0xac>
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d270:	3501      	adds	r5, #1
 800d272:	e7c6      	b.n	800d202 <_printf_common+0x3e>
 800d274:	18e1      	adds	r1, r4, r3
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	2030      	movs	r0, #48	; 0x30
 800d27a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d27e:	4422      	add	r2, r4
 800d280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d288:	3302      	adds	r3, #2
 800d28a:	e7c7      	b.n	800d21c <_printf_common+0x58>
 800d28c:	2301      	movs	r3, #1
 800d28e:	4622      	mov	r2, r4
 800d290:	4649      	mov	r1, r9
 800d292:	4638      	mov	r0, r7
 800d294:	47c0      	blx	r8
 800d296:	3001      	adds	r0, #1
 800d298:	d0e6      	beq.n	800d268 <_printf_common+0xa4>
 800d29a:	3601      	adds	r6, #1
 800d29c:	e7d9      	b.n	800d252 <_printf_common+0x8e>
	...

0800d2a0 <_printf_i>:
 800d2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	7e0f      	ldrb	r7, [r1, #24]
 800d2a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2a8:	2f78      	cmp	r7, #120	; 0x78
 800d2aa:	4691      	mov	r9, r2
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	469a      	mov	sl, r3
 800d2b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2b6:	d807      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2b8:	2f62      	cmp	r7, #98	; 0x62
 800d2ba:	d80a      	bhi.n	800d2d2 <_printf_i+0x32>
 800d2bc:	2f00      	cmp	r7, #0
 800d2be:	f000 80d8 	beq.w	800d472 <_printf_i+0x1d2>
 800d2c2:	2f58      	cmp	r7, #88	; 0x58
 800d2c4:	f000 80a3 	beq.w	800d40e <_printf_i+0x16e>
 800d2c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2d0:	e03a      	b.n	800d348 <_printf_i+0xa8>
 800d2d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2d6:	2b15      	cmp	r3, #21
 800d2d8:	d8f6      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2da:	a101      	add	r1, pc, #4	; (adr r1, 800d2e0 <_printf_i+0x40>)
 800d2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2e0:	0800d339 	.word	0x0800d339
 800d2e4:	0800d34d 	.word	0x0800d34d
 800d2e8:	0800d2c9 	.word	0x0800d2c9
 800d2ec:	0800d2c9 	.word	0x0800d2c9
 800d2f0:	0800d2c9 	.word	0x0800d2c9
 800d2f4:	0800d2c9 	.word	0x0800d2c9
 800d2f8:	0800d34d 	.word	0x0800d34d
 800d2fc:	0800d2c9 	.word	0x0800d2c9
 800d300:	0800d2c9 	.word	0x0800d2c9
 800d304:	0800d2c9 	.word	0x0800d2c9
 800d308:	0800d2c9 	.word	0x0800d2c9
 800d30c:	0800d459 	.word	0x0800d459
 800d310:	0800d37d 	.word	0x0800d37d
 800d314:	0800d43b 	.word	0x0800d43b
 800d318:	0800d2c9 	.word	0x0800d2c9
 800d31c:	0800d2c9 	.word	0x0800d2c9
 800d320:	0800d47b 	.word	0x0800d47b
 800d324:	0800d2c9 	.word	0x0800d2c9
 800d328:	0800d37d 	.word	0x0800d37d
 800d32c:	0800d2c9 	.word	0x0800d2c9
 800d330:	0800d2c9 	.word	0x0800d2c9
 800d334:	0800d443 	.word	0x0800d443
 800d338:	682b      	ldr	r3, [r5, #0]
 800d33a:	1d1a      	adds	r2, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	602a      	str	r2, [r5, #0]
 800d340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d348:	2301      	movs	r3, #1
 800d34a:	e0a3      	b.n	800d494 <_printf_i+0x1f4>
 800d34c:	6820      	ldr	r0, [r4, #0]
 800d34e:	6829      	ldr	r1, [r5, #0]
 800d350:	0606      	lsls	r6, r0, #24
 800d352:	f101 0304 	add.w	r3, r1, #4
 800d356:	d50a      	bpl.n	800d36e <_printf_i+0xce>
 800d358:	680e      	ldr	r6, [r1, #0]
 800d35a:	602b      	str	r3, [r5, #0]
 800d35c:	2e00      	cmp	r6, #0
 800d35e:	da03      	bge.n	800d368 <_printf_i+0xc8>
 800d360:	232d      	movs	r3, #45	; 0x2d
 800d362:	4276      	negs	r6, r6
 800d364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d368:	485e      	ldr	r0, [pc, #376]	; (800d4e4 <_printf_i+0x244>)
 800d36a:	230a      	movs	r3, #10
 800d36c:	e019      	b.n	800d3a2 <_printf_i+0x102>
 800d36e:	680e      	ldr	r6, [r1, #0]
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d376:	bf18      	it	ne
 800d378:	b236      	sxthne	r6, r6
 800d37a:	e7ef      	b.n	800d35c <_printf_i+0xbc>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	6820      	ldr	r0, [r4, #0]
 800d380:	1d19      	adds	r1, r3, #4
 800d382:	6029      	str	r1, [r5, #0]
 800d384:	0601      	lsls	r1, r0, #24
 800d386:	d501      	bpl.n	800d38c <_printf_i+0xec>
 800d388:	681e      	ldr	r6, [r3, #0]
 800d38a:	e002      	b.n	800d392 <_printf_i+0xf2>
 800d38c:	0646      	lsls	r6, r0, #25
 800d38e:	d5fb      	bpl.n	800d388 <_printf_i+0xe8>
 800d390:	881e      	ldrh	r6, [r3, #0]
 800d392:	4854      	ldr	r0, [pc, #336]	; (800d4e4 <_printf_i+0x244>)
 800d394:	2f6f      	cmp	r7, #111	; 0x6f
 800d396:	bf0c      	ite	eq
 800d398:	2308      	moveq	r3, #8
 800d39a:	230a      	movne	r3, #10
 800d39c:	2100      	movs	r1, #0
 800d39e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3a2:	6865      	ldr	r5, [r4, #4]
 800d3a4:	60a5      	str	r5, [r4, #8]
 800d3a6:	2d00      	cmp	r5, #0
 800d3a8:	bfa2      	ittt	ge
 800d3aa:	6821      	ldrge	r1, [r4, #0]
 800d3ac:	f021 0104 	bicge.w	r1, r1, #4
 800d3b0:	6021      	strge	r1, [r4, #0]
 800d3b2:	b90e      	cbnz	r6, 800d3b8 <_printf_i+0x118>
 800d3b4:	2d00      	cmp	r5, #0
 800d3b6:	d04d      	beq.n	800d454 <_printf_i+0x1b4>
 800d3b8:	4615      	mov	r5, r2
 800d3ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3be:	fb03 6711 	mls	r7, r3, r1, r6
 800d3c2:	5dc7      	ldrb	r7, [r0, r7]
 800d3c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3c8:	4637      	mov	r7, r6
 800d3ca:	42bb      	cmp	r3, r7
 800d3cc:	460e      	mov	r6, r1
 800d3ce:	d9f4      	bls.n	800d3ba <_printf_i+0x11a>
 800d3d0:	2b08      	cmp	r3, #8
 800d3d2:	d10b      	bne.n	800d3ec <_printf_i+0x14c>
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	07de      	lsls	r6, r3, #31
 800d3d8:	d508      	bpl.n	800d3ec <_printf_i+0x14c>
 800d3da:	6923      	ldr	r3, [r4, #16]
 800d3dc:	6861      	ldr	r1, [r4, #4]
 800d3de:	4299      	cmp	r1, r3
 800d3e0:	bfde      	ittt	le
 800d3e2:	2330      	movle	r3, #48	; 0x30
 800d3e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3ec:	1b52      	subs	r2, r2, r5
 800d3ee:	6122      	str	r2, [r4, #16]
 800d3f0:	f8cd a000 	str.w	sl, [sp]
 800d3f4:	464b      	mov	r3, r9
 800d3f6:	aa03      	add	r2, sp, #12
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	4640      	mov	r0, r8
 800d3fc:	f7ff fee2 	bl	800d1c4 <_printf_common>
 800d400:	3001      	adds	r0, #1
 800d402:	d14c      	bne.n	800d49e <_printf_i+0x1fe>
 800d404:	f04f 30ff 	mov.w	r0, #4294967295
 800d408:	b004      	add	sp, #16
 800d40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d40e:	4835      	ldr	r0, [pc, #212]	; (800d4e4 <_printf_i+0x244>)
 800d410:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d414:	6829      	ldr	r1, [r5, #0]
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	f851 6b04 	ldr.w	r6, [r1], #4
 800d41c:	6029      	str	r1, [r5, #0]
 800d41e:	061d      	lsls	r5, r3, #24
 800d420:	d514      	bpl.n	800d44c <_printf_i+0x1ac>
 800d422:	07df      	lsls	r7, r3, #31
 800d424:	bf44      	itt	mi
 800d426:	f043 0320 	orrmi.w	r3, r3, #32
 800d42a:	6023      	strmi	r3, [r4, #0]
 800d42c:	b91e      	cbnz	r6, 800d436 <_printf_i+0x196>
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	f023 0320 	bic.w	r3, r3, #32
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	2310      	movs	r3, #16
 800d438:	e7b0      	b.n	800d39c <_printf_i+0xfc>
 800d43a:	6823      	ldr	r3, [r4, #0]
 800d43c:	f043 0320 	orr.w	r3, r3, #32
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	2378      	movs	r3, #120	; 0x78
 800d444:	4828      	ldr	r0, [pc, #160]	; (800d4e8 <_printf_i+0x248>)
 800d446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d44a:	e7e3      	b.n	800d414 <_printf_i+0x174>
 800d44c:	0659      	lsls	r1, r3, #25
 800d44e:	bf48      	it	mi
 800d450:	b2b6      	uxthmi	r6, r6
 800d452:	e7e6      	b.n	800d422 <_printf_i+0x182>
 800d454:	4615      	mov	r5, r2
 800d456:	e7bb      	b.n	800d3d0 <_printf_i+0x130>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	6826      	ldr	r6, [r4, #0]
 800d45c:	6961      	ldr	r1, [r4, #20]
 800d45e:	1d18      	adds	r0, r3, #4
 800d460:	6028      	str	r0, [r5, #0]
 800d462:	0635      	lsls	r5, r6, #24
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	d501      	bpl.n	800d46c <_printf_i+0x1cc>
 800d468:	6019      	str	r1, [r3, #0]
 800d46a:	e002      	b.n	800d472 <_printf_i+0x1d2>
 800d46c:	0670      	lsls	r0, r6, #25
 800d46e:	d5fb      	bpl.n	800d468 <_printf_i+0x1c8>
 800d470:	8019      	strh	r1, [r3, #0]
 800d472:	2300      	movs	r3, #0
 800d474:	6123      	str	r3, [r4, #16]
 800d476:	4615      	mov	r5, r2
 800d478:	e7ba      	b.n	800d3f0 <_printf_i+0x150>
 800d47a:	682b      	ldr	r3, [r5, #0]
 800d47c:	1d1a      	adds	r2, r3, #4
 800d47e:	602a      	str	r2, [r5, #0]
 800d480:	681d      	ldr	r5, [r3, #0]
 800d482:	6862      	ldr	r2, [r4, #4]
 800d484:	2100      	movs	r1, #0
 800d486:	4628      	mov	r0, r5
 800d488:	f7f2 feaa 	bl	80001e0 <memchr>
 800d48c:	b108      	cbz	r0, 800d492 <_printf_i+0x1f2>
 800d48e:	1b40      	subs	r0, r0, r5
 800d490:	6060      	str	r0, [r4, #4]
 800d492:	6863      	ldr	r3, [r4, #4]
 800d494:	6123      	str	r3, [r4, #16]
 800d496:	2300      	movs	r3, #0
 800d498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d49c:	e7a8      	b.n	800d3f0 <_printf_i+0x150>
 800d49e:	6923      	ldr	r3, [r4, #16]
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	4649      	mov	r1, r9
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	47d0      	blx	sl
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	d0ab      	beq.n	800d404 <_printf_i+0x164>
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	079b      	lsls	r3, r3, #30
 800d4b0:	d413      	bmi.n	800d4da <_printf_i+0x23a>
 800d4b2:	68e0      	ldr	r0, [r4, #12]
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	4298      	cmp	r0, r3
 800d4b8:	bfb8      	it	lt
 800d4ba:	4618      	movlt	r0, r3
 800d4bc:	e7a4      	b.n	800d408 <_printf_i+0x168>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	4632      	mov	r2, r6
 800d4c2:	4649      	mov	r1, r9
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	47d0      	blx	sl
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	d09b      	beq.n	800d404 <_printf_i+0x164>
 800d4cc:	3501      	adds	r5, #1
 800d4ce:	68e3      	ldr	r3, [r4, #12]
 800d4d0:	9903      	ldr	r1, [sp, #12]
 800d4d2:	1a5b      	subs	r3, r3, r1
 800d4d4:	42ab      	cmp	r3, r5
 800d4d6:	dcf2      	bgt.n	800d4be <_printf_i+0x21e>
 800d4d8:	e7eb      	b.n	800d4b2 <_printf_i+0x212>
 800d4da:	2500      	movs	r5, #0
 800d4dc:	f104 0619 	add.w	r6, r4, #25
 800d4e0:	e7f5      	b.n	800d4ce <_printf_i+0x22e>
 800d4e2:	bf00      	nop
 800d4e4:	0800e34d 	.word	0x0800e34d
 800d4e8:	0800e35e 	.word	0x0800e35e

0800d4ec <_read_r>:
 800d4ec:	b538      	push	{r3, r4, r5, lr}
 800d4ee:	4d07      	ldr	r5, [pc, #28]	; (800d50c <_read_r+0x20>)
 800d4f0:	4604      	mov	r4, r0
 800d4f2:	4608      	mov	r0, r1
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	602a      	str	r2, [r5, #0]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	f7f4 f810 	bl	8001520 <_read>
 800d500:	1c43      	adds	r3, r0, #1
 800d502:	d102      	bne.n	800d50a <_read_r+0x1e>
 800d504:	682b      	ldr	r3, [r5, #0]
 800d506:	b103      	cbz	r3, 800d50a <_read_r+0x1e>
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	bd38      	pop	{r3, r4, r5, pc}
 800d50c:	200032a4 	.word	0x200032a4

0800d510 <abort>:
 800d510:	b508      	push	{r3, lr}
 800d512:	2006      	movs	r0, #6
 800d514:	f000 f898 	bl	800d648 <raise>
 800d518:	2001      	movs	r0, #1
 800d51a:	f7f3 fff7 	bl	800150c <_exit>
	...

0800d520 <_fstat_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d07      	ldr	r5, [pc, #28]	; (800d540 <_fstat_r+0x20>)
 800d524:	2300      	movs	r3, #0
 800d526:	4604      	mov	r4, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	4611      	mov	r1, r2
 800d52c:	602b      	str	r3, [r5, #0]
 800d52e:	f7f4 f83c 	bl	80015aa <_fstat>
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	d102      	bne.n	800d53c <_fstat_r+0x1c>
 800d536:	682b      	ldr	r3, [r5, #0]
 800d538:	b103      	cbz	r3, 800d53c <_fstat_r+0x1c>
 800d53a:	6023      	str	r3, [r4, #0]
 800d53c:	bd38      	pop	{r3, r4, r5, pc}
 800d53e:	bf00      	nop
 800d540:	200032a4 	.word	0x200032a4

0800d544 <_isatty_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4d06      	ldr	r5, [pc, #24]	; (800d560 <_isatty_r+0x1c>)
 800d548:	2300      	movs	r3, #0
 800d54a:	4604      	mov	r4, r0
 800d54c:	4608      	mov	r0, r1
 800d54e:	602b      	str	r3, [r5, #0]
 800d550:	f7f4 f83b 	bl	80015ca <_isatty>
 800d554:	1c43      	adds	r3, r0, #1
 800d556:	d102      	bne.n	800d55e <_isatty_r+0x1a>
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	b103      	cbz	r3, 800d55e <_isatty_r+0x1a>
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	bd38      	pop	{r3, r4, r5, pc}
 800d560:	200032a4 	.word	0x200032a4

0800d564 <memmove>:
 800d564:	4288      	cmp	r0, r1
 800d566:	b510      	push	{r4, lr}
 800d568:	eb01 0402 	add.w	r4, r1, r2
 800d56c:	d902      	bls.n	800d574 <memmove+0x10>
 800d56e:	4284      	cmp	r4, r0
 800d570:	4623      	mov	r3, r4
 800d572:	d807      	bhi.n	800d584 <memmove+0x20>
 800d574:	1e43      	subs	r3, r0, #1
 800d576:	42a1      	cmp	r1, r4
 800d578:	d008      	beq.n	800d58c <memmove+0x28>
 800d57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d582:	e7f8      	b.n	800d576 <memmove+0x12>
 800d584:	4402      	add	r2, r0
 800d586:	4601      	mov	r1, r0
 800d588:	428a      	cmp	r2, r1
 800d58a:	d100      	bne.n	800d58e <memmove+0x2a>
 800d58c:	bd10      	pop	{r4, pc}
 800d58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d596:	e7f7      	b.n	800d588 <memmove+0x24>

0800d598 <_realloc_r>:
 800d598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d59c:	4680      	mov	r8, r0
 800d59e:	4614      	mov	r4, r2
 800d5a0:	460e      	mov	r6, r1
 800d5a2:	b921      	cbnz	r1, 800d5ae <_realloc_r+0x16>
 800d5a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	f7fe be75 	b.w	800c298 <_malloc_r>
 800d5ae:	b92a      	cbnz	r2, 800d5bc <_realloc_r+0x24>
 800d5b0:	f7fe fe06 	bl	800c1c0 <_free_r>
 800d5b4:	4625      	mov	r5, r4
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5bc:	f000 f860 	bl	800d680 <_malloc_usable_size_r>
 800d5c0:	4284      	cmp	r4, r0
 800d5c2:	4607      	mov	r7, r0
 800d5c4:	d802      	bhi.n	800d5cc <_realloc_r+0x34>
 800d5c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5ca:	d812      	bhi.n	800d5f2 <_realloc_r+0x5a>
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	f7fe fe62 	bl	800c298 <_malloc_r>
 800d5d4:	4605      	mov	r5, r0
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d0ed      	beq.n	800d5b6 <_realloc_r+0x1e>
 800d5da:	42bc      	cmp	r4, r7
 800d5dc:	4622      	mov	r2, r4
 800d5de:	4631      	mov	r1, r6
 800d5e0:	bf28      	it	cs
 800d5e2:	463a      	movcs	r2, r7
 800d5e4:	f7fe fdd6 	bl	800c194 <memcpy>
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	4640      	mov	r0, r8
 800d5ec:	f7fe fde8 	bl	800c1c0 <_free_r>
 800d5f0:	e7e1      	b.n	800d5b6 <_realloc_r+0x1e>
 800d5f2:	4635      	mov	r5, r6
 800d5f4:	e7df      	b.n	800d5b6 <_realloc_r+0x1e>

0800d5f6 <_raise_r>:
 800d5f6:	291f      	cmp	r1, #31
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	460d      	mov	r5, r1
 800d5fe:	d904      	bls.n	800d60a <_raise_r+0x14>
 800d600:	2316      	movs	r3, #22
 800d602:	6003      	str	r3, [r0, #0]
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	bd38      	pop	{r3, r4, r5, pc}
 800d60a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d60c:	b112      	cbz	r2, 800d614 <_raise_r+0x1e>
 800d60e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d612:	b94b      	cbnz	r3, 800d628 <_raise_r+0x32>
 800d614:	4620      	mov	r0, r4
 800d616:	f000 f831 	bl	800d67c <_getpid_r>
 800d61a:	462a      	mov	r2, r5
 800d61c:	4601      	mov	r1, r0
 800d61e:	4620      	mov	r0, r4
 800d620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d624:	f000 b818 	b.w	800d658 <_kill_r>
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d00a      	beq.n	800d642 <_raise_r+0x4c>
 800d62c:	1c59      	adds	r1, r3, #1
 800d62e:	d103      	bne.n	800d638 <_raise_r+0x42>
 800d630:	2316      	movs	r3, #22
 800d632:	6003      	str	r3, [r0, #0]
 800d634:	2001      	movs	r0, #1
 800d636:	e7e7      	b.n	800d608 <_raise_r+0x12>
 800d638:	2400      	movs	r4, #0
 800d63a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d63e:	4628      	mov	r0, r5
 800d640:	4798      	blx	r3
 800d642:	2000      	movs	r0, #0
 800d644:	e7e0      	b.n	800d608 <_raise_r+0x12>
	...

0800d648 <raise>:
 800d648:	4b02      	ldr	r3, [pc, #8]	; (800d654 <raise+0xc>)
 800d64a:	4601      	mov	r1, r0
 800d64c:	6818      	ldr	r0, [r3, #0]
 800d64e:	f7ff bfd2 	b.w	800d5f6 <_raise_r>
 800d652:	bf00      	nop
 800d654:	20000010 	.word	0x20000010

0800d658 <_kill_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4d07      	ldr	r5, [pc, #28]	; (800d678 <_kill_r+0x20>)
 800d65c:	2300      	movs	r3, #0
 800d65e:	4604      	mov	r4, r0
 800d660:	4608      	mov	r0, r1
 800d662:	4611      	mov	r1, r2
 800d664:	602b      	str	r3, [r5, #0]
 800d666:	f7f3 ff41 	bl	80014ec <_kill>
 800d66a:	1c43      	adds	r3, r0, #1
 800d66c:	d102      	bne.n	800d674 <_kill_r+0x1c>
 800d66e:	682b      	ldr	r3, [r5, #0]
 800d670:	b103      	cbz	r3, 800d674 <_kill_r+0x1c>
 800d672:	6023      	str	r3, [r4, #0]
 800d674:	bd38      	pop	{r3, r4, r5, pc}
 800d676:	bf00      	nop
 800d678:	200032a4 	.word	0x200032a4

0800d67c <_getpid_r>:
 800d67c:	f7f3 bf2e 	b.w	80014dc <_getpid>

0800d680 <_malloc_usable_size_r>:
 800d680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d684:	1f18      	subs	r0, r3, #4
 800d686:	2b00      	cmp	r3, #0
 800d688:	bfbc      	itt	lt
 800d68a:	580b      	ldrlt	r3, [r1, r0]
 800d68c:	18c0      	addlt	r0, r0, r3
 800d68e:	4770      	bx	lr

0800d690 <_init>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr

0800d69c <_fini>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	bf00      	nop
 800d6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a2:	bc08      	pop	{r3}
 800d6a4:	469e      	mov	lr, r3
 800d6a6:	4770      	bx	lr
