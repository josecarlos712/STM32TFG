
STM32TFG1-WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d4c  08009d4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d54  08009d54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c0  20000074  08009dd0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002134  08009dd0  00022134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b189  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005102  00000000  00000000  0004b22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002458  00000000  00000000  00050330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002250  00000000  00000000  00052788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cdd5  00000000  00000000  000549d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029d0c  00000000  00000000  000817ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a348  00000000  00000000  000ab4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b5801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a474  00000000  00000000  001b5854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b94 	.word	0x08009b94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009b94 	.word	0x08009b94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <S_SendInstructionStruct>:
	xSemaphoreGive(xSemaphoreSerialHandle);
	//Libero la memoria reservada por malloc
	free(pMov);
}

void S_SendInstructionStruct(MovementInstruction_t *pMov) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	//Transformo la instruccion a una cadena
	char *s_mov;
	I_MovementInstruction_toString(pMov, &s_mov);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f8aa 	bl	80006dc <I_MovementInstruction_toString>
	//Reservo el puerto serie
	while (xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY) != pdTRUE)
 8000588:	bf00      	nop
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <S_SendInstructionStruct+0x48>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f04f 31ff 	mov.w	r1, #4294967295
 8000592:	4618      	mov	r0, r3
 8000594:	f005 ff54 	bl	8006440 <xQueueSemaphoreTake>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d1f5      	bne.n	800058a <S_SendInstructionStruct+0x16>
		;
	//Envio el struct por el puerto serie
	printf("%s\n", s_mov);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f008 fc73 	bl	8008e8c <puts>
	//Devuelvo el control del puerto serie
	xSemaphoreGive(xSemaphoreSerialHandle);
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <S_SendInstructionStruct+0x48>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	f005 fccc 	bl	8005f4c <xQueueGenericSend>
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200006d4 	.word	0x200006d4

080005c0 <__io_putchar>:
#include "SerialTask.h"

PUTCHAR_PROTOTYPE {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

	//xSemaphoreTake(xSemaphoreSerialHandle, portMAX_DELAY);
	while (HAL_OK != HAL_UART_Transmit(&huart4, (uint8_t*) &ch, 1, 30000)) {
 80005c8:	bf00      	nop
 80005ca:	1d39      	adds	r1, r7, #4
 80005cc:	f247 5330 	movw	r3, #30000	; 0x7530
 80005d0:	2201      	movs	r2, #1
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <__io_putchar+0x28>)
 80005d4:	f003 ff76 	bl	80044c4 <HAL_UART_Transmit>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f5      	bne.n	80005ca <__io_putchar+0xa>
		;
	}
	//HAL_UART_Transmit_IT(&huart1, (uint8_t*) &ch, 1);
	return ch;
 80005de:	687b      	ldr	r3, [r7, #4]

}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200001bc 	.word	0x200001bc

080005ec <__io_getchar>:

GETCHAR_PROTOTYPE {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0

	uint8_t ch = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
	while (HAL_OK != HAL_UART_Receive(&huart4, (uint8_t*) &ch, 1, 30000)) {
 80005f6:	bf00      	nop
 80005f8:	1df9      	adds	r1, r7, #7
 80005fa:	f247 5330 	movw	r3, #30000	; 0x7530
 80005fe:	2201      	movs	r2, #1
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <__io_getchar+0x2c>)
 8000602:	f003 fff3 	bl	80045ec <HAL_UART_Receive>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1f5      	bne.n	80005f8 <__io_getchar+0xc>
		;
	}
	return ch;
 800060c:	79fb      	ldrb	r3, [r7, #7]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200001bc 	.word	0x200001bc

0800061c <serialRxTask>:

void serialRxTask(void *parg) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	uint8_t ins = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
	uint8_t time = 20;
 8000628:	2314      	movs	r3, #20
 800062a:	737b      	strb	r3, [r7, #13]
	uint8_t i = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	73bb      	strb	r3, [r7, #14]

	while (i < 25) {
 8000630:	e024      	b.n	800067c <serialRxTask+0x60>
		//Reservo memoria para el puntero de instruccion
		MovementInstruction_t *pMov = malloc(sizeof(MovementInstruction_t));
 8000632:	2002      	movs	r0, #2
 8000634:	f008 fab6 	bl	8008ba4 <malloc>
 8000638:	4603      	mov	r3, r0
 800063a:	60bb      	str	r3, [r7, #8]
		//Creo el struct que se va a enviar a la cola
		I_CreateInstructionStruct(ins, time, pMov);
 800063c:	7b79      	ldrb	r1, [r7, #13]
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f868 	bl	8000718 <I_CreateInstructionStruct>
		xQueueSend(instructionQueueHandle, pMov, 1);
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <serialRxTask+0x70>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	2300      	movs	r3, #0
 800064e:	2201      	movs	r2, #1
 8000650:	68b9      	ldr	r1, [r7, #8]
 8000652:	f005 fc7b 	bl	8005f4c <xQueueGenericSend>
		vTaskDelay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f006 fb89 	bl	8006d70 <vTaskDelay>
		//Libero la memoria del puntero de movimiento
		free(pMov);
 800065e:	68b8      	ldr	r0, [r7, #8]
 8000660:	f008 faa8 	bl	8008bb4 <free>
		// Actualizo la instruccion a enviar
		ins = (ins+1)%I_NUM_INSTRUCTIONS;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	2205      	movs	r2, #5
 800066a:	fb93 f1f2 	sdiv	r1, r3, r2
 800066e:	fb01 f202 	mul.w	r2, r1, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	73fb      	strb	r3, [r7, #15]
		i++;
 8000676:	7bbb      	ldrb	r3, [r7, #14]
 8000678:	3301      	adds	r3, #1
 800067a:	73bb      	strb	r3, [r7, #14]
	while (i < 25) {
 800067c:	7bbb      	ldrb	r3, [r7, #14]
 800067e:	2b18      	cmp	r3, #24
 8000680:	d9d7      	bls.n	8000632 <serialRxTask+0x16>
	}

}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200006d0 	.word	0x200006d0

08000690 <serialTxTask>:

void serialTxTask(void *parg) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	while (1) {
		MovementInstruction_t pMov;
		//Recibo la instruccion desde la cola
		xQueueReceive(instructionQueueHandle, &pMov, portMAX_DELAY);
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <serialTxTask+0x2c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f107 010c 	add.w	r1, r7, #12
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295
 80006a4:	4618      	mov	r0, r3
 80006a6:	f005 fdeb 	bl	8006280 <xQueueReceive>
		//Envio la instruccion por el puerto serie
		S_SendInstructionStruct(&pMov);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff60 	bl	8000574 <S_SendInstructionStruct>
		//Espero durante lo que tarda la instruccion
		//vTaskDelay(pMov.duration * 100);
		vTaskDelay(50);
 80006b4:	2032      	movs	r0, #50	; 0x32
 80006b6:	f006 fb5b 	bl	8006d70 <vTaskDelay>
	while (1) {
 80006ba:	e7ed      	b.n	8000698 <serialTxTask+0x8>
 80006bc:	200006d0 	.word	0x200006d0

080006c0 <CreateSerialObjects>:
	}
}

void CreateSerialObjects() {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	//Liberamos el semaforo
	xSemaphoreGive(xSemaphoreSerialHandle);
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <CreateSerialObjects+0x18>)
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	f005 fc3d 	bl	8005f4c <xQueueGenericSend>

	//Creamos una cola de 16 elementos en la que cada elemento tiene 1 byte
	//xQueue = xQueueCreate(16, 1);
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200006d4 	.word	0x200006d4

080006dc <I_MovementInstruction_toString>:
 *      Author: josec
 */

#include "generalTypes.h"

void I_MovementInstruction_toString(MovementInstruction_t *pMovIns, char **buf) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]

	char *s = (char*) malloc(NUM_CHARS_PER_INSTRUCTION);
 80006e6:	2307      	movs	r3, #7
 80006e8:	4618      	mov	r0, r3
 80006ea:	f008 fa5b 	bl	8008ba4 <malloc>
 80006ee:	4603      	mov	r3, r0
 80006f0:	60fb      	str	r3, [r7, #12]

	sprintf(s, "%d %d", pMovIns->instruction, pMovIns->duration);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	4905      	ldr	r1, [pc, #20]	; (8000714 <I_MovementInstruction_toString+0x38>)
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f008 fc46 	bl	8008f90 <siprintf>

	*buf = s;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	601a      	str	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08009bac 	.word	0x08009bac

08000718 <I_CreateInstructionStruct>:

uint8_t I_CreateInstructionStruct(uint8_t instCode, uint8_t time,
		MovementInstruction_t *pMovOut) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	603a      	str	r2, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	460b      	mov	r3, r1
 8000726:	71bb      	strb	r3, [r7, #6]
	// Comprueba que todos los parametros sean correctos
	if (instCode < I_NUM_INSTRUCTIONS) {
 8000728:	2205      	movs	r2, #5
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4293      	cmp	r3, r2
 800072e:	d20e      	bcs.n	800074e <I_CreateInstructionStruct+0x36>
		if (time < I_MAX_TIME_EXECUTION) {
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	4293      	cmp	r3, r2
 8000736:	d208      	bcs.n	800074a <I_CreateInstructionStruct+0x32>
			if (pMovOut != NULL) {
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d005      	beq.n	800074a <I_CreateInstructionStruct+0x32>
				pMovOut->instruction = instCode;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	79fa      	ldrb	r2, [r7, #7]
 8000742:	701a      	strb	r2, [r3, #0]
				pMovOut->duration = time;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	79ba      	ldrb	r2, [r7, #6]
 8000748:	705a      	strb	r2, [r3, #1]
			}
		}
		return 1;
 800074a:	2301      	movs	r3, #1
 800074c:	e006      	b.n	800075c <I_CreateInstructionStruct+0x44>
	}
	// Si no devuelve una instruccion NOPE
	else {
		pMovOut->instruction = I_NOPE;
 800074e:	2200      	movs	r2, #0
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	701a      	strb	r2, [r3, #0]
		pMovOut->duration = I_MAX_TIME_EXECUTION;
 8000754:	2264      	movs	r2, #100	; 0x64
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	705a      	strb	r2, [r3, #1]
		return 0;
 800075a:	2300      	movs	r3, #0
	}
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f001 f81c 	bl	80017aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f85d 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 fa27 	bl	8000bc8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800077a:	f000 f8bb 	bl	80008f4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800077e:	f000 f8f1 	bl	8000964 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000782:	f000 f92f 	bl	80009e4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000786:	f000 f953 	bl	8000a30 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800078a:	f000 f9bf 	bl	8000b0c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800078e:	f000 f9ed 	bl	8000b6c <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000792:	f000 f98b 	bl	8000aac <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000796:	f004 ff55 	bl	8005644 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreSerial */
  xSemaphoreSerialHandle = osSemaphoreNew(1, 1, &xSemaphoreSerial_attributes);
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <main+0x94>)
 800079c:	2101      	movs	r1, #1
 800079e:	2001      	movs	r0, #1
 80007a0:	f005 f847 	bl	8005832 <osSemaphoreNew>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <main+0x98>)
 80007a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  CreateSerialObjects();
 80007aa:	f7ff ff89 	bl	80006c0 <CreateSerialObjects>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of instructionQueue */
  instructionQueueHandle = osMessageQueueNew (100, sizeof(MovementInstruction_t), &instructionQueue_attributes);
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <main+0x9c>)
 80007b0:	2102      	movs	r1, #2
 80007b2:	2064      	movs	r0, #100	; 0x64
 80007b4:	f005 f8c6 	bl	8005944 <osMessageQueueNew>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <main+0xa0>)
 80007bc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <main+0xa4>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <main+0xa8>)
 80007c4:	f004 ff88 	bl	80056d8 <osThreadNew>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <main+0xac>)
 80007cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(serialRxTask, "tareaRxSerial", 128, NULL, 1, &serialRxTaskHandle);
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <main+0xb0>)
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	2300      	movs	r3, #0
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	4910      	ldr	r1, [pc, #64]	; (800081c <main+0xb4>)
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <main+0xb8>)
 80007de:	f006 f96c 	bl	8006aba <xTaskCreate>
  xTaskCreate(serialTxTask, "tareaTxSerial", 128, NULL, 1, &serialTxTaskHandle);
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <main+0xbc>)
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	2301      	movs	r3, #1
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2300      	movs	r3, #0
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <main+0xc0>)
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <main+0xc4>)
 80007f2:	f006 f962 	bl	8006aba <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007f6:	f004 ff49 	bl	800568c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <main+0x92>
 80007fc:	08009c5c 	.word	0x08009c5c
 8000800:	200006d4 	.word	0x200006d4
 8000804:	08009c44 	.word	0x08009c44
 8000808:	200006d0 	.word	0x200006d0
 800080c:	08009c20 	.word	0x08009c20
 8000810:	08000f0d 	.word	0x08000f0d
 8000814:	200006cc 	.word	0x200006cc
 8000818:	200006d8 	.word	0x200006d8
 800081c:	08009be8 	.word	0x08009be8
 8000820:	0800061d 	.word	0x0800061d
 8000824:	200006dc 	.word	0x200006dc
 8000828:	08009bf8 	.word	0x08009bf8
 800082c:	08000691 	.word	0x08000691

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b096      	sub	sp, #88	; 0x58
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2244      	movs	r2, #68	; 0x44
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f008 f9ce 	bl	8008be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000852:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000856:	f001 fe65 	bl	8002524 <HAL_PWREx_ControlVoltageScaling>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000860:	f000 fb6e 	bl	8000f40 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000864:	f001 fe40 	bl	80024e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <SystemClock_Config+0xc0>)
 800086a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086e:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <SystemClock_Config+0xc0>)
 8000870:	f023 0318 	bic.w	r3, r3, #24
 8000874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000878:	2314      	movs	r3, #20
 800087a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000888:	2360      	movs	r3, #96	; 0x60
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000890:	2301      	movs	r3, #1
 8000892:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000898:	2328      	movs	r3, #40	; 0x28
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800089c:	2307      	movs	r3, #7
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 ff5b 	bl	8002768 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008b8:	f000 fb42 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2303      	movs	r3, #3
 80008c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	2104      	movs	r1, #4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fb2f 	bl	8002f38 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008e0:	f000 fb2e 	bl	8000f40 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008e4:	f003 f84a 	bl	800397c <HAL_RCCEx_EnableMSIPLLMode>
}
 80008e8:	bf00      	nop
 80008ea:	3758      	adds	r7, #88	; 0x58
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000

080008f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_DFSDM1_Init+0x68>)
 80008fa:	4a19      	ldr	r2, [pc, #100]	; (8000960 <MX_DFSDM1_Init+0x6c>)
 80008fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_DFSDM1_Init+0x68>)
 8000900:	2201      	movs	r2, #1
 8000902:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_DFSDM1_Init+0x68>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_DFSDM1_Init+0x68>)
 800090c:	2202      	movs	r2, #2
 800090e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_DFSDM1_Init+0x68>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_DFSDM1_Init+0x68>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_DFSDM1_Init+0x68>)
 800091e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000922:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_DFSDM1_Init+0x68>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_DFSDM1_Init+0x68>)
 800092c:	2204      	movs	r2, #4
 800092e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_DFSDM1_Init+0x68>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_DFSDM1_Init+0x68>)
 8000938:	2201      	movs	r2, #1
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_DFSDM1_Init+0x68>)
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_DFSDM1_Init+0x68>)
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_DFSDM1_Init+0x68>)
 800094a:	f001 f86d 	bl	8001a28 <HAL_DFSDM_ChannelInit>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000954:	f000 faf4 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000090 	.word	0x20000090
 8000960:	40016020 	.word	0x40016020

08000964 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_I2C2_Init+0x74>)
 800096a:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <MX_I2C2_Init+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <MX_I2C2_Init+0x7c>)
 8000972:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_I2C2_Init+0x74>)
 800097c:	2201      	movs	r2, #1
 800097e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <MX_I2C2_Init+0x74>)
 80009a0:	f001 fb33 	bl	800200a <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009aa:	f000 fac9 	bl	8000f40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4809      	ldr	r0, [pc, #36]	; (80009d8 <MX_I2C2_Init+0x74>)
 80009b2:	f001 fbb9 	bl	8002128 <HAL_I2CEx_ConfigAnalogFilter>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009bc:	f000 fac0 	bl	8000f40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_I2C2_Init+0x74>)
 80009c4:	f001 fbfb 	bl	80021be <HAL_I2CEx_ConfigDigitalFilter>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 fab7 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000c8 	.word	0x200000c8
 80009dc:	40005800 	.word	0x40005800
 80009e0:	10909cec 	.word	0x10909cec

080009e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <MX_QUADSPI_Init+0x48>)
 80009ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 80009fc:	2210      	movs	r2, #16
 80009fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a02:	2217      	movs	r2, #23
 8000a04:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_QUADSPI_Init+0x44>)
 8000a14:	f001 fdec 	bl	80025f0 <HAL_QSPI_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a1e:	f000 fa8f 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000114 	.word	0x20000114
 8000a2c:	a0001000 	.word	0xa0001000

08000a30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_SPI3_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a7e:	2207      	movs	r2, #7
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_SPI3_Init+0x74>)
 8000a90:	f003 f956 	bl	8003d40 <HAL_SPI_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a9a:	f000 fa51 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000158 	.word	0x20000158
 8000aa8:	40003c00 	.word	0x40003c00

08000aac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_UART4_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_UART4_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_UART4_Init+0x58>)
 8000ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000abc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_UART4_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_UART4_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_UART4_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_UART4_Init+0x58>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_UART4_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_UART4_Init+0x58>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_UART4_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_UART4_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_UART4_Init+0x58>)
 8000af0:	f003 fc9a 	bl	8004428 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 fa21 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001bc 	.word	0x200001bc
 8000b08:	40004c00 	.word	0x40004c00

08000b0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_USART1_UART_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART1_UART_Init+0x58>)
 8000b50:	f003 fc6a 	bl	8004428 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 f9f1 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000240 	.word	0x20000240
 8000b68:	40013800 	.word	0x40013800

08000b6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7a:	2206      	movs	r2, #6
 8000b7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	f001 fb51 	bl	8002256 <HAL_PCD_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 f9c1 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200002c4 	.word	0x200002c4

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bde:	4bbc      	ldr	r3, [pc, #752]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	4abb      	ldr	r2, [pc, #748]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000be4:	f043 0310 	orr.w	r3, r3, #16
 8000be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bea:	4bb9      	ldr	r3, [pc, #740]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4bb6      	ldr	r3, [pc, #728]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4ab5      	ldr	r2, [pc, #724]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4bb3      	ldr	r3, [pc, #716]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4bb0      	ldr	r3, [pc, #704]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4aaf      	ldr	r2, [pc, #700]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4bad      	ldr	r3, [pc, #692]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4baa      	ldr	r3, [pc, #680]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4aa9      	ldr	r2, [pc, #676]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4ba7      	ldr	r3, [pc, #668]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4ba4      	ldr	r3, [pc, #656]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4aa3      	ldr	r2, [pc, #652]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4ba1      	ldr	r3, [pc, #644]	; (8000ed0 <MX_GPIO_Init+0x308>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000c5c:	489d      	ldr	r0, [pc, #628]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000c5e:	f001 f999 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f248 1104 	movw	r1, #33028	; 0x8104
 8000c68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6c:	f001 f992 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c70:	2200      	movs	r2, #0
 8000c72:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000c76:	4898      	ldr	r0, [pc, #608]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000c78:	f001 f98c 	bl	8001f94 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000c82:	4896      	ldr	r0, [pc, #600]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c84:	f001 f986 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	4893      	ldr	r0, [pc, #588]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c90:	f001 f980 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000c9a:	4891      	ldr	r0, [pc, #580]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000c9c:	f001 f97a 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	488c      	ldr	r0, [pc, #560]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000ca6:	f001 f975 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2101      	movs	r1, #1
 8000cae:	4889      	ldr	r0, [pc, #548]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000cb0:	f001 f970 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cb4:	f240 1315 	movw	r3, #277	; 0x115
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4881      	ldr	r0, [pc, #516]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000cce:	f000 ffb7 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000cd2:	236a      	movs	r3, #106	; 0x6a
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	487b      	ldr	r0, [pc, #492]	; (8000ed4 <MX_GPIO_Init+0x30c>)
 8000ce8:	f000 ffaa 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4877      	ldr	r0, [pc, #476]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000d04:	f000 ff9c 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d08:	233f      	movs	r3, #63	; 0x3f
 8000d0a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4871      	ldr	r0, [pc, #452]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000d1c:	f000 ff90 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d20:	f248 1304 	movw	r3, #33028	; 0x8104
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f000 ff80 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d40:	2308      	movs	r3, #8
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d50:	2301      	movs	r3, #1
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f000 ff6f 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000d62:	23e0      	movs	r3, #224	; 0xe0
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d72:	2305      	movs	r3, #5
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f000 ff5e 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	484f      	ldr	r0, [pc, #316]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000d9a:	f000 ff51 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000da2:	230b      	movs	r3, #11
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4849      	ldr	r0, [pc, #292]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000db2:	f000 ff45 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000db6:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000dba:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4842      	ldr	r0, [pc, #264]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000dd0:	f000 ff36 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000dd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de6:	2307      	movs	r3, #7
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	483a      	ldr	r0, [pc, #232]	; (8000edc <MX_GPIO_Init+0x314>)
 8000df2:	f000 ff25 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000df6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000dfa:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4833      	ldr	r0, [pc, #204]	; (8000edc <MX_GPIO_Init+0x314>)
 8000e0e:	f000 ff17 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e12:	f243 0381 	movw	r3, #12417	; 0x3081
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	482c      	ldr	r0, [pc, #176]	; (8000edc <MX_GPIO_Init+0x314>)
 8000e2c:	f000 ff08 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e30:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4825      	ldr	r0, [pc, #148]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000e4a:	f000 fef9 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000e66:	f000 feeb 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4815      	ldr	r0, [pc, #84]	; (8000edc <MX_GPIO_Init+0x314>)
 8000e86:	f000 fedb 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PD5 PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|GPIO_PIN_5|PMOD_UART2_RX_Pin;
 8000e8a:	2378      	movs	r3, #120	; 0x78
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_GPIO_Init+0x314>)
 8000ea6:	f000 fecb 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb0:	2312      	movs	r3, #18
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_GPIO_Init+0x310>)
 8000ec8:	f000 feba 	bl	8001c40 <HAL_GPIO_Init>
 8000ecc:	e00a      	b.n	8000ee4 <MX_GPIO_Init+0x31c>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48001000 	.word	0x48001000
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	48000c00 	.word	0x48000c00
 8000ee0:	48000800 	.word	0x48000800

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	2017      	movs	r0, #23
 8000eea:	f000 fd73 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eee:	2017      	movs	r0, #23
 8000ef0:	f000 fd8c 	bl	8001a0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2105      	movs	r1, #5
 8000ef8:	2028      	movs	r0, #40	; 0x28
 8000efa:	f000 fd6b 	bl	80019d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000efe:	2028      	movs	r0, #40	; 0x28
 8000f00:	f000 fd84 	bl	8001a0c <HAL_NVIC_EnableIRQ>

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f004 fc71 	bl	80057fc <osDelay>
 8000f1a:	e7fb      	b.n	8000f14 <StartDefaultTask+0x8>

08000f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f2e:	f000 fc55 	bl	80017dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40000800 	.word	0x40000800

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_MspInit+0x4c>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	210f      	movs	r1, #15
 8000f86:	f06f 0001 	mvn.w	r0, #1
 8000f8a:	f000 fd23 	bl	80019d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0ac      	sub	sp, #176	; 0xb0
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2288      	movs	r2, #136	; 0x88
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 fe0f 	bl	8008be0 <memset>
  if(DFSDM1_Init == 0)
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d142      	bne.n	8001050 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f002 f9e4 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000fe6:	f7ff ffab 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ff0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ff4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800101a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800101e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001034:	2306      	movs	r3, #6
 8001036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001042:	f000 fdfd 	bl	8001c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a02      	ldr	r2, [pc, #8]	; (8001058 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800104e:	6013      	str	r3, [r2, #0]
  }

}
 8001050:	bf00      	nop
 8001052:	37b0      	adds	r7, #176	; 0xb0
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200006e0 	.word	0x200006e0
 800105c:	40021000 	.word	0x40021000
 8001060:	48001000 	.word	0x48001000

08001064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ac      	sub	sp, #176	; 0xb0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2288      	movs	r2, #136	; 0x88
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f007 fdab 	bl	8008be0 <memset>
  if(hi2c->Instance==I2C2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a21      	ldr	r2, [pc, #132]	; (8001114 <HAL_I2C_MspInit+0xb0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d13b      	bne.n	800110c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 f981 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010ac:	f7ff ff48 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d0:	2312      	movs	r3, #18
 80010d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010e2:	2304      	movs	r3, #4
 80010e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ec:	4619      	mov	r1, r3
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <HAL_I2C_MspInit+0xb8>)
 80010f0:	f000 fda6 	bl	8001c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	37b0      	adds	r7, #176	; 0xb0
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40005800 	.word	0x40005800
 8001118:	40021000 	.word	0x40021000
 800111c:	48000400 	.word	0x48000400

08001120 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_QSPI_MspInit+0x7c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d128      	bne.n	8001194 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6513      	str	r3, [r2, #80]	; 0x50
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001172:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001176:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001184:	230a      	movs	r3, #10
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_QSPI_MspInit+0x84>)
 8001190:	f000 fd56 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	a0001000 	.word	0xa0001000
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48001000 	.word	0x48001000

080011a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_SPI_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d128      	bne.n	800121c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800120c:	2306      	movs	r3, #6
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_SPI_MspInit+0x84>)
 8001218:	f000 fd12 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40003c00 	.word	0x40003c00
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ae      	sub	sp, #184	; 0xb8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2288      	movs	r2, #136	; 0x88
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fcc5 	bl	8008be0 <memset>
  if(huart->Instance==UART4)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a42      	ldr	r2, [pc, #264]	; (8001364 <HAL_UART_MspInit+0x134>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d13c      	bne.n	80012da <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001260:	2308      	movs	r3, #8
 8001262:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001264:	2300      	movs	r3, #0
 8001266:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4618      	mov	r0, r3
 800126e:	f002 f89b 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001278:	f7ff fe62 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800127c:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <HAL_UART_MspInit+0x138>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	4a39      	ldr	r2, [pc, #228]	; (8001368 <HAL_UART_MspInit+0x138>)
 8001282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001286:	6593      	str	r3, [r2, #88]	; 0x58
 8001288:	4b37      	ldr	r3, [pc, #220]	; (8001368 <HAL_UART_MspInit+0x138>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_UART_MspInit+0x138>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	4a33      	ldr	r2, [pc, #204]	; (8001368 <HAL_UART_MspInit+0x138>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_UART_MspInit+0x138>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80012ac:	2303      	movs	r3, #3
 80012ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012c4:	2308      	movs	r3, #8
 80012c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f000 fcb4 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012d8:	e03f      	b.n	800135a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <HAL_UART_MspInit+0x13c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d13a      	bne.n	800135a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012e8:	2300      	movs	r3, #0
 80012ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 f859 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80012fc:	f7ff fe20 	bl	8000f40 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_UART_MspInit+0x138>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001304:	4a18      	ldr	r2, [pc, #96]	; (8001368 <HAL_UART_MspInit+0x138>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130a:	6613      	str	r3, [r2, #96]	; 0x60
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_UART_MspInit+0x138>)
 800130e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_UART_MspInit+0x138>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_UART_MspInit+0x138>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_UART_MspInit+0x138>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|ST_LINK_UART1_RX_Pin;
 8001330:	23c0      	movs	r3, #192	; 0xc0
 8001332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001348:	2307      	movs	r3, #7
 800134a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001352:	4619      	mov	r1, r3
 8001354:	4806      	ldr	r0, [pc, #24]	; (8001370 <HAL_UART_MspInit+0x140>)
 8001356:	f000 fc73 	bl	8001c40 <HAL_GPIO_Init>
}
 800135a:	bf00      	nop
 800135c:	37b8      	adds	r7, #184	; 0xb8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40004c00 	.word	0x40004c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40013800 	.word	0x40013800
 8001370:	48000400 	.word	0x48000400

08001374 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0ac      	sub	sp, #176	; 0xb0
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2288      	movs	r2, #136	; 0x88
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f007 fc23 	bl	8008be0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013a2:	d17c      	bne.n	800149e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013ba:	2318      	movs	r3, #24
 80013bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013be:	2307      	movs	r3, #7
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80013ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4618      	mov	r0, r3
 80013d6:	f001 ffe7 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80013e0:	f7ff fdae 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141a:	f000 fc11 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800141e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001438:	230a      	movs	r3, #10
 800143a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f000 fbfa 	bl	8001c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 8001452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d114      	bne.n	800149a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147a:	6593      	str	r3, [r2, #88]	; 0x58
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001488:	f001 f8a2 	bl	80025d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_PCD_MspInit+0x134>)
 8001492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001496:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001498:	e001      	b.n	800149e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800149a:	f001 f899 	bl	80025d0 <HAL_PWREx_EnableVddUSB>
}
 800149e:	bf00      	nop
 80014a0:	37b0      	adds	r7, #176	; 0xb0
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	201e      	movs	r0, #30
 80014c2:	f000 fa87 	bl	80019d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014c6:	201e      	movs	r0, #30
 80014c8:	f000 faa0 	bl	8001a0c <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <HAL_InitTick+0x9c>)
 80014ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d0:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <HAL_InitTick+0x9c>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6593      	str	r3, [r2, #88]	; 0x58
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_InitTick+0x9c>)
 80014da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e4:	f107 0210 	add.w	r2, r7, #16
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fec8 	bl	8003284 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014f4:	f001 fe9a 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80014f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	4a13      	ldr	r2, [pc, #76]	; (800154c <HAL_InitTick+0xa0>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	3b01      	subs	r3, #1
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_InitTick+0xa4>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <HAL_InitTick+0xa8>)
 800150c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_InitTick+0xa4>)
 8001510:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001514:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_InitTick+0xa4>)
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_InitTick+0xa4>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_InitTick+0xa4>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <HAL_InitTick+0xa4>)
 800152a:	f002 fcac 	bl	8003e86 <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d104      	bne.n	800153e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <HAL_InitTick+0xa4>)
 8001536:	f002 fd07 	bl	8003f48 <HAL_TIM_Base_Start_IT>
 800153a:	4603      	mov	r3, r0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3730      	adds	r7, #48	; 0x30
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	431bde83 	.word	0x431bde83
 8001550:	200006e4 	.word	0x200006e4
 8001554:	40000800 	.word	0x40000800

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001588:	2020      	movs	r0, #32
 800158a:	f000 fd1b 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800158e:	2040      	movs	r0, #64	; 0x40
 8001590:	f000 fd18 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001594:	2080      	movs	r0, #128	; 0x80
 8001596:	f000 fd15 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800159a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800159e:	f000 fd11 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM4_IRQHandler+0x10>)
 80015ae:	f002 fd3b 	bl	8004028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200006e4 	.word	0x200006e4

080015bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80015c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015c4:	f000 fcfe 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80015c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015cc:	f000 fcfa 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80015d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015d4:	f000 fcf6 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80015d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015dc:	f000 fcf2 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80015e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015e4:	f000 fcee 	bl	8001fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015fe:	f7fe fff5 	bl	80005ec <__io_getchar>
 8001602:	4601      	mov	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
	}

return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e009      	b.n	800164c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ffbd 	bl	80005c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf1      	blt.n	8001638 <_write+0x12>
	}
	return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_close>:

int _close(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	return -1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001686:	605a      	str	r2, [r3, #4]
	return 0;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_isatty>:

int _isatty(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	return 1;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f007 f930 	bl	800895c <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20018000 	.word	0x20018000
 8001728:	00000400 	.word	0x00000400
 800172c:	20000730 	.word	0x20000730
 8001730:	20002138 	.word	0x20002138

08001734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800175c:	f7ff ffea 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f007 f9e5 	bl	8008b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7fe ffed 	bl	8000768 <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800179c:	08009d5c 	.word	0x08009d5c
  ldr r2, =_sbss
 80017a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017a4:	20002134 	.word	0x20002134

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>

080017aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f902 	bl	80019be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ba:	200f      	movs	r0, #15
 80017bc:	f7ff fe76 	bl	80014ac <HAL_InitTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	e001      	b.n	80017d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017cc:	f7ff fbbe 	bl	8000f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x20>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x24>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <HAL_IncTick+0x24>)
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	20000734 	.word	0x20000734

08001804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetTick+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000734 	.word	0x20000734

0800181c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001824:	f7ff ffee 	bl	8001804 <HAL_GetTick>
 8001828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d005      	beq.n	8001842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_Delay+0x44>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001842:	bf00      	nop
 8001844:	f7ff ffde 	bl	8001804 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8f7      	bhi.n	8001844 <HAL_Delay+0x28>
  {
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000008 	.word	0x20000008

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4907      	ldr	r1, [pc, #28]	; (8001900 <__NVIC_EnableIRQ+0x38>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000e100 	.word	0xe000e100

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff4c 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e6:	f7ff ff61 	bl	80018ac <__NVIC_GetPriorityGrouping>
 80019ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	6978      	ldr	r0, [r7, #20]
 80019f2:	f7ff ffb1 	bl	8001958 <NVIC_EncodePriority>
 80019f6:	4602      	mov	r2, r0
 80019f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff80 	bl	8001904 <__NVIC_SetPriority>
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff54 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0ac      	b.n	8001b94 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f8b2 	bl	8001ba8 <DFSDM_GetChannelFromInstance>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <HAL_DFSDM_ChannelInit+0x174>)
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e09f      	b.n	8001b94 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff faa1 	bl	8000f9c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a5a:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <HAL_DFSDM_ChannelInit+0x178>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a4f      	ldr	r2, [pc, #316]	; (8001ba0 <HAL_DFSDM_ChannelInit+0x178>)
 8001a62:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a64:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <HAL_DFSDM_ChannelInit+0x178>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d125      	bne.n	8001ab8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a76:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4948      	ldr	r1, [pc, #288]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a46      	ldr	r2, [pc, #280]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a8c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001a90:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	791b      	ldrb	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d108      	bne.n	8001aac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a9a:	4b42      	ldr	r3, [pc, #264]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	041b      	lsls	r3, r3, #16
 8001aa6:	493f      	ldr	r1, [pc, #252]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001aac:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a3c      	ldr	r2, [pc, #240]	; (8001ba4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ab6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001ac6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6819      	ldr	r1, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ad6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001adc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 020f 	bic.w	r2, r2, #15
 8001af4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b1c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f002 0207 	and.w	r2, r2, #7
 8001b48:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b74:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f810 	bl	8001ba8 <DFSDM_GetChannelFromInstance>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4904      	ldr	r1, [pc, #16]	; (8001b9c <HAL_DFSDM_ChannelInit+0x174>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000073c 	.word	0x2000073c
 8001ba0:	20000738 	.word	0x20000738
 8001ba4:	40016000 	.word	0x40016000

08001ba8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <DFSDM_GetChannelFromInstance+0x7c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d102      	bne.n	8001bbe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e02b      	b.n	8001c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <DFSDM_GetChannelFromInstance+0x80>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d102      	bne.n	8001bcc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e024      	b.n	8001c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <DFSDM_GetChannelFromInstance+0x84>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d102      	bne.n	8001bda <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e01d      	b.n	8001c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <DFSDM_GetChannelFromInstance+0x88>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d102      	bne.n	8001be8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001be2:	2304      	movs	r3, #4
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e016      	b.n	8001c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <DFSDM_GetChannelFromInstance+0x8c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d102      	bne.n	8001bf6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001bf0:	2305      	movs	r3, #5
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e00f      	b.n	8001c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <DFSDM_GetChannelFromInstance+0x90>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d102      	bne.n	8001c04 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001bfe:	2306      	movs	r3, #6
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e008      	b.n	8001c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <DFSDM_GetChannelFromInstance+0x94>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d102      	bne.n	8001c12 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e001      	b.n	8001c16 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001c12:	2303      	movs	r3, #3
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40016000 	.word	0x40016000
 8001c28:	40016020 	.word	0x40016020
 8001c2c:	40016040 	.word	0x40016040
 8001c30:	40016080 	.word	0x40016080
 8001c34:	400160a0 	.word	0x400160a0
 8001c38:	400160c0 	.word	0x400160c0
 8001c3c:	400160e0 	.word	0x400160e0

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	e17f      	b.n	8001f50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8171 	beq.w	8001f4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d005      	beq.n	8001c80 <HAL_GPIO_Init+0x40>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d130      	bne.n	8001ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 0201 	and.w	r2, r3, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d118      	bne.n	8001d20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	08db      	lsrs	r3, r3, #3
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d017      	beq.n	8001d5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	6939      	ldr	r1, [r7, #16]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ac 	beq.w	8001f4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df6:	4a5e      	ldr	r2, [pc, #376]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <HAL_GPIO_Init+0x330>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x242>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4f      	ldr	r2, [pc, #316]	; (8001f78 <HAL_GPIO_Init+0x338>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x23e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4e      	ldr	r2, [pc, #312]	; (8001f7c <HAL_GPIO_Init+0x33c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x23a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4d      	ldr	r2, [pc, #308]	; (8001f80 <HAL_GPIO_Init+0x340>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x236>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4c      	ldr	r2, [pc, #304]	; (8001f84 <HAL_GPIO_Init+0x344>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x232>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <HAL_GPIO_Init+0x348>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x22e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_GPIO_Init+0x34c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x22a>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e82:	2300      	movs	r3, #0
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e94:	4937      	ldr	r1, [pc, #220]	; (8001f74 <HAL_GPIO_Init+0x334>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec6:	4a32      	ldr	r2, [pc, #200]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f1a:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f44:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_GPIO_Init+0x350>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f ae78 	bne.w	8001c50 <HAL_GPIO_Init+0x10>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	48000800 	.word	0x48000800
 8001f80:	48000c00 	.word	0x48000c00
 8001f84:	48001000 	.word	0x48001000
 8001f88:	48001400 	.word	0x48001400
 8001f8c:	48001800 	.word	0x48001800
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 f806 	bl	8001ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40010400 	.word	0x40010400

08001ff4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e081      	b.n	8002120 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff f817 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2224      	movs	r2, #36	; 0x24
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800205a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800206a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	e006      	b.n	8002092 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002090:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d104      	bne.n	80020a4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69d9      	ldr	r1, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	d138      	bne.n	80021b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002148:	2302      	movs	r3, #2
 800214a:	e032      	b.n	80021b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2224      	movs	r2, #36	; 0x24
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800217a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6819      	ldr	r1, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d139      	bne.n	8002248 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021de:	2302      	movs	r3, #2
 80021e0:	e033      	b.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2224      	movs	r2, #36	; 0x24
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002210:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002258:	b08f      	sub	sp, #60	; 0x3c
 800225a:	af0a      	add	r7, sp, #40	; 0x28
 800225c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e116      	b.n	8002496 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff f876 	bl	8001374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2203      	movs	r2, #3
 800228c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 ff05 	bl	80050b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	687e      	ldr	r6, [r7, #4]
 80022b4:	466d      	mov	r5, sp
 80022b6:	f106 0410 	add.w	r4, r6, #16
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ca:	1d33      	adds	r3, r6, #4
 80022cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	f002 fec5 	bl	800505e <USB_CoreInit>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0d7      	b.n	8002496 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 fef3 	bl	80050d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e04a      	b.n	800238e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	333d      	adds	r3, #61	; 0x3d
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	333c      	adds	r3, #60	; 0x3c
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b298      	uxth	r0, r3
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3342      	adds	r3, #66	; 0x42
 8002334:	4602      	mov	r2, r0
 8002336:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	333f      	adds	r3, #63	; 0x3f
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3344      	adds	r3, #68	; 0x44
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3348      	adds	r3, #72	; 0x48
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3350      	adds	r3, #80	; 0x50
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3af      	bcc.n	80022f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e044      	b.n	8002428 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3301      	adds	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3b5      	bcc.n	800239e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	687e      	ldr	r6, [r7, #4]
 800243a:	466d      	mov	r5, sp
 800243c:	f106 0410 	add.w	r4, r6, #16
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002448:	e894 0003 	ldmia.w	r4, {r0, r1}
 800244c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002450:	1d33      	adds	r3, r6, #4
 8002452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f002 fe8b 	bl	8005170 <USB_DevInit>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e014      	b.n	8002496 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f80a 	bl	800249e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 f833 	bl	80054fa <USB_DevDisconnect>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800249e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	f043 0303 	orr.w	r3, r3, #3
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40007000 	.word	0x40007000

08002508 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <HAL_PWREx_GetVoltageRange+0x18>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000

08002524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002532:	d130      	bne.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d038      	beq.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800254a:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2232      	movs	r2, #50	; 0x32
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	4a1b      	ldr	r2, [pc, #108]	; (80025cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	0c9b      	lsrs	r3, r3, #18
 8002564:	3301      	adds	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002568:	e002      	b.n	8002570 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3b01      	subs	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257c:	d102      	bne.n	8002584 <HAL_PWREx_ControlVoltageScaling+0x60>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f2      	bne.n	800256a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002590:	d110      	bne.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e00f      	b.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800259e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a2:	d007      	beq.n	80025b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025ac:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40007000 	.word	0x40007000
 80025c8:	20000000 	.word	0x20000000
 80025cc:	431bde83 	.word	0x431bde83

080025d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80025da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025de:	6053      	str	r3, [r2, #4]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000

080025f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff f904 	bl	8001804 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e063      	b.n	80026d0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7fe fd7f 	bl	8001120 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002622:	f241 3188 	movw	r1, #5000	; 0x1388
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f858 	bl	80026dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	3b01      	subs	r3, #1
 800263c:	021a      	lsls	r2, r3, #8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	2120      	movs	r1, #32
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f850 	bl	80026f8 <QSPI_WaitFlagStateUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800265c:	7afb      	ldrb	r3, [r7, #11]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d131      	bne.n	80026c6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800266c:	f023 0310 	bic.w	r3, r3, #16
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6852      	ldr	r2, [r2, #4]
 8002674:	0611      	lsls	r1, r2, #24
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	430b      	orrs	r3, r1
 8002682:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <HAL_QSPI_Init+0xe8>)
 800268c:	4013      	ands	r3, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6912      	ldr	r2, [r2, #16]
 8002692:	0411      	lsls	r1, r2, #16
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6952      	ldr	r2, [r2, #20]
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6992      	ldr	r2, [r2, #24]
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80026ce:	7afb      	ldrb	r3, [r7, #11]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	ffe0f8fe 	.word	0xffe0f8fe

080026dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002708:	e01a      	b.n	8002740 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d016      	beq.n	8002740 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002712:	f7ff f877 	bl	8001804 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2204      	movs	r2, #4
 800272c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e00e      	b.n	800275e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	429a      	cmp	r2, r3
 800275a:	d1d6      	bne.n	800270a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e3d8      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	4b97      	ldr	r3, [pc, #604]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002784:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80e4 	beq.w	8002964 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4a>
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	f040 808b 	bne.w	80028c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 8087 	bne.w	80028c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b2:	4b89      	ldr	r3, [pc, #548]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e3b0      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1a      	ldr	r2, [r3, #32]
 80027ce:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <HAL_RCC_OscConfig+0x7c>
 80027da:	4b7f      	ldr	r3, [pc, #508]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e2:	e005      	b.n	80027f0 <HAL_RCC_OscConfig+0x88>
 80027e4:	4b7c      	ldr	r3, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d223      	bcs.n	800283c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fd75 	bl	80032e8 <RCC_SetFlashLatencyFromMSIRange>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e391      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002808:	4b73      	ldr	r3, [pc, #460]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a72      	ldr	r2, [pc, #456]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	496d      	ldr	r1, [pc, #436]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002826:	4b6c      	ldr	r3, [pc, #432]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	4968      	ldr	r1, [pc, #416]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
 800283a:	e025      	b.n	8002888 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283c:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002842:	f043 0308 	orr.w	r3, r3, #8
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4960      	ldr	r1, [pc, #384]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285a:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	495b      	ldr	r1, [pc, #364]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fd35 	bl	80032e8 <RCC_SetFlashLatencyFromMSIRange>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e351      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002888:	f000 fc38 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b52      	ldr	r3, [pc, #328]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	4950      	ldr	r1, [pc, #320]	; (80029dc <HAL_RCC_OscConfig+0x274>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	4a4e      	ldr	r2, [pc, #312]	; (80029e0 <HAL_RCC_OscConfig+0x278>)
 80028a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028a8:	4b4e      	ldr	r3, [pc, #312]	; (80029e4 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe fdfd 	bl	80014ac <HAL_InitTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d052      	beq.n	8002962 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	e335      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d032      	beq.n	800292e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a42      	ldr	r2, [pc, #264]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d4:	f7fe ff96 	bl	8001804 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028dc:	f7fe ff92 	bl	8001804 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e31e      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ee:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a36      	ldr	r2, [pc, #216]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4931      	ldr	r1, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	492c      	ldr	r1, [pc, #176]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	e01a      	b.n	8002964 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a29      	ldr	r2, [pc, #164]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800293a:	f7fe ff63 	bl	8001804 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002942:	f7fe ff5f 	bl	8001804 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e2eb      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f0      	bne.n	8002942 <HAL_RCC_OscConfig+0x1da>
 8002960:	e000      	b.n	8002964 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002962:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d074      	beq.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x21a>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d10e      	bne.n	800299a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d10b      	bne.n	800299a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d064      	beq.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d160      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e2c8      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x24a>
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	e026      	b.n	8002a00 <HAL_RCC_OscConfig+0x298>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029ba:	d115      	bne.n	80029e8 <HAL_RCC_OscConfig+0x280>
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a02      	ldr	r2, [pc, #8]	; (80029d8 <HAL_RCC_OscConfig+0x270>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e014      	b.n	8002a00 <HAL_RCC_OscConfig+0x298>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08009c6c 	.word	0x08009c6c
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004
 80029e8:	4ba0      	ldr	r3, [pc, #640]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a9f      	ldr	r2, [pc, #636]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b9d      	ldr	r3, [pc, #628]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a9c      	ldr	r2, [pc, #624]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fefc 	bl	8001804 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fef8 	bl	8001804 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b64      	cmp	r3, #100	; 0x64
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e284      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a22:	4b92      	ldr	r3, [pc, #584]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2a8>
 8002a2e:	e014      	b.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fee8 	bl	8001804 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe fee4 	bl	8001804 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e270      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4a:	4b88      	ldr	r3, [pc, #544]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2d0>
 8002a56:	e000      	b.n	8002a5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d060      	beq.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_OscConfig+0x310>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d119      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d116      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a78:	4b7c      	ldr	r3, [pc, #496]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x328>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e24d      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	4973      	ldr	r1, [pc, #460]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa4:	e040      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d023      	beq.n	8002af6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aae:	4b6f      	ldr	r3, [pc, #444]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6e      	ldr	r2, [pc, #440]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7fe fea3 	bl	8001804 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fe9f 	bl	8001804 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e22b      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad4:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b62      	ldr	r3, [pc, #392]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	495f      	ldr	r1, [pc, #380]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e018      	b.n	8002b28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	4b5d      	ldr	r3, [pc, #372]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a5c      	ldr	r2, [pc, #368]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe fe7f 	bl	8001804 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fe7b 	bl	8001804 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e207      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b1c:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d03c      	beq.n	8002bae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01c      	beq.n	8002b76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3c:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b42:	4a4a      	ldr	r2, [pc, #296]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fe5a 	bl	8001804 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe fe56 	bl	8001804 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1e2      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0ef      	beq.n	8002b54 <HAL_RCC_OscConfig+0x3ec>
 8002b74:	e01b      	b.n	8002bae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b76:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7c:	4a3b      	ldr	r2, [pc, #236]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fe3d 	bl	8001804 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fe39 	bl	8001804 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e1c5      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba0:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ef      	bne.n	8002b8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80a6 	beq.w	8002d08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc0:	4b2a      	ldr	r3, [pc, #168]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be8:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <HAL_RCC_OscConfig+0x508>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d118      	bne.n	8002c26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_RCC_OscConfig+0x508>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_RCC_OscConfig+0x508>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c00:	f7fe fe00 	bl	8001804 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c08:	f7fe fdfc 	bl	8001804 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e188      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_RCC_OscConfig+0x508>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4d8>
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c34:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c3e:	e029      	b.n	8002c94 <HAL_RCC_OscConfig+0x52c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d115      	bne.n	8002c74 <HAL_RCC_OscConfig+0x50c>
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	4a03      	ldr	r2, [pc, #12]	; (8002c6c <HAL_RCC_OscConfig+0x504>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c68:	e014      	b.n	8002c94 <HAL_RCC_OscConfig+0x52c>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40007000 	.word	0x40007000
 8002c74:	4b91      	ldr	r3, [pc, #580]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a90      	ldr	r2, [pc, #576]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c84:	4b8d      	ldr	r3, [pc, #564]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	4a8c      	ldr	r2, [pc, #560]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d016      	beq.n	8002cca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe fdb2 	bl	8001804 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fdae 	bl	8001804 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e138      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cba:	4b80      	ldr	r3, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ed      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x53c>
 8002cc8:	e015      	b.n	8002cf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cca:	f7fe fd9b 	bl	8001804 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe fd97 	bl	8001804 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e121      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce8:	4b74      	ldr	r3, [pc, #464]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ed      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfc:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	4a6e      	ldr	r2, [pc, #440]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 810c 	beq.w	8002f2a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	f040 80d4 	bne.w	8002ec4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d1c:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0203 	and.w	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d130      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d127      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d11f      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d5c:	2a07      	cmp	r2, #7
 8002d5e:	bf14      	ite	ne
 8002d60:	2201      	movne	r2, #1
 8002d62:	2200      	moveq	r2, #0
 8002d64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d113      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d06e      	beq.n	8002e70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d069      	beq.n	8002e6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d98:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002da4:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0bb      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db4:	4b41      	ldr	r3, [pc, #260]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a40      	ldr	r2, [pc, #256]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc0:	f7fe fd20 	bl	8001804 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fd1c 	bl	8001804 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0a8      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dda:	4b38      	ldr	r3, [pc, #224]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de6:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <HAL_RCC_OscConfig+0x758>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002df6:	3a01      	subs	r2, #1
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e00:	0212      	lsls	r2, r2, #8
 8002e02:	4311      	orrs	r1, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0552      	lsls	r2, r2, #21
 8002e0e:	4311      	orrs	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e14:	0852      	lsrs	r2, r2, #1
 8002e16:	3a01      	subs	r2, #1
 8002e18:	0652      	lsls	r2, r2, #25
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e20:	0912      	lsrs	r2, r2, #4
 8002e22:	0452      	lsls	r2, r2, #17
 8002e24:	430a      	orrs	r2, r1
 8002e26:	4925      	ldr	r1, [pc, #148]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e44:	f7fe fcde 	bl	8001804 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fcda 	bl	8001804 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e066      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6a:	e05e      	b.n	8002f2a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e05d      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d156      	bne.n	8002f2a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e94:	f7fe fcb6 	bl	8001804 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe fcb2 	bl	8001804 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e03e      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eae:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_RCC_OscConfig+0x754>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x734>
 8002eba:	e036      	b.n	8002f2a <HAL_RCC_OscConfig+0x7c2>
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d02d      	beq.n	8002f26 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_RCC_OscConfig+0x7cc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_RCC_OscConfig+0x7cc>)
 8002ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_RCC_OscConfig+0x7cc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_RCC_OscConfig+0x7cc>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_RCC_OscConfig+0x7cc>)
 8002ee8:	f023 0303 	bic.w	r3, r3, #3
 8002eec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_OscConfig+0x7cc>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <HAL_RCC_OscConfig+0x7cc>)
 8002ef4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7fe fc81 	bl	8001804 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fe fc7d 	bl	8001804 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e009      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x7cc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x79e>
 8002f24:	e001      	b.n	8002f2a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0c8      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b66      	ldr	r3, [pc, #408]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d910      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4961      	ldr	r1, [pc, #388]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b5f      	ldr	r3, [pc, #380]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b0      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d04c      	beq.n	8003022 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f90:	4b56      	ldr	r3, [pc, #344]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d121      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e09e      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d115      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e092      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e086      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd0:	4b46      	ldr	r3, [pc, #280]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e07e      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe0:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 0203 	bic.w	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	493f      	ldr	r1, [pc, #252]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff2:	f7fe fc07 	bl	8001804 <HAL_GetTick>
 8002ff6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	f7fe fc03 	bl	8001804 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e066      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 020c 	and.w	r2, r3, #12
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	429a      	cmp	r2, r3
 8003020:	d1eb      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	492c      	ldr	r1, [pc, #176]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003040:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d210      	bcs.n	8003070 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 0207 	bic.w	r2, r3, #7
 8003056:	4924      	ldr	r1, [pc, #144]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e036      	b.n	80030de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4918      	ldr	r1, [pc, #96]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d009      	beq.n	80030ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4910      	ldr	r1, [pc, #64]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ae:	f000 f825 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <HAL_RCC_ClockConfig+0x1b4>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	490c      	ldr	r1, [pc, #48]	; (80030f0 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe f9ea 	bl	80014ac <HAL_InitTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	72fb      	strb	r3, [r7, #11]

  return status;
 80030dc:	7afb      	ldrb	r3, [r7, #11]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08009c6c 	.word	0x08009c6c
 80030f4:	20000000 	.word	0x20000000
 80030f8:	20000004 	.word	0x20000004

080030fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310a:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003114:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x34>
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d121      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d11e      	bne.n	800316e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003130:	4b34      	ldr	r3, [pc, #208]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d107      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003142:	0a1b      	lsrs	r3, r3, #8
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e005      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800314c:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003158:	4a2b      	ldr	r2, [pc, #172]	; (8003208 <HAL_RCC_GetSysClockFreq+0x10c>)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d102      	bne.n	800317a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003174:	4b25      	ldr	r3, [pc, #148]	; (800320c <HAL_RCC_GetSysClockFreq+0x110>)
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	e004      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d101      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <HAL_RCC_GetSysClockFreq+0x114>)
 8003182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d134      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d003      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d003      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0xac>
 80031a0:	e005      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_RCC_GetSysClockFreq+0x110>)
 80031a4:	617b      	str	r3, [r7, #20]
      break;
 80031a6:	e005      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_RCC_GetSysClockFreq+0x114>)
 80031aa:	617b      	str	r3, [r7, #20]
      break;
 80031ac:	e002      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	617b      	str	r3, [r7, #20]
      break;
 80031b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b4:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	3301      	adds	r3, #1
 80031c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	fb03 f202 	mul.w	r2, r3, r2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_GetSysClockFreq+0x108>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	0e5b      	lsrs	r3, r3, #25
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	3301      	adds	r3, #1
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031f4:	69bb      	ldr	r3, [r7, #24]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40021000 	.word	0x40021000
 8003208:	08009c84 	.word	0x08009c84
 800320c:	00f42400 	.word	0x00f42400
 8003210:	007a1200 	.word	0x007a1200

08003214 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCC_GetHCLKFreq+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000000 	.word	0x20000000

0800322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003230:	f7ff fff0 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4904      	ldr	r1, [pc, #16]	; (8003254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	08009c7c 	.word	0x08009c7c

08003258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800325c:	f7ff ffda 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0adb      	lsrs	r3, r3, #11
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4904      	ldr	r1, [pc, #16]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003278:	4618      	mov	r0, r3
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	08009c7c 	.word	0x08009c7c

08003284 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	220f      	movs	r2, #15
 8003292:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003294:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_GetClockConfig+0x5c>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0203 	and.w	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_RCC_GetClockConfig+0x5c>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <HAL_RCC_GetClockConfig+0x5c>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_GetClockConfig+0x5c>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	08db      	lsrs	r3, r3, #3
 80032be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_RCC_GetClockConfig+0x60>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0207 	and.w	r2, r3, #7
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	601a      	str	r2, [r3, #0]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40022000 	.word	0x40022000

080032e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003300:	f7ff f902 	bl	8002508 <HAL_PWREx_GetVoltageRange>
 8003304:	6178      	str	r0, [r7, #20]
 8003306:	e014      	b.n	8003332 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	4a24      	ldr	r2, [pc, #144]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	6593      	str	r3, [r2, #88]	; 0x58
 8003314:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003320:	f7ff f8f2 	bl	8002508 <HAL_PWREx_GetVoltageRange>
 8003324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003330:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003338:	d10b      	bne.n	8003352 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b80      	cmp	r3, #128	; 0x80
 800333e:	d919      	bls.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2ba0      	cmp	r3, #160	; 0xa0
 8003344:	d902      	bls.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003346:	2302      	movs	r3, #2
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e013      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800334c:	2301      	movs	r3, #1
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	e010      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b80      	cmp	r3, #128	; 0x80
 8003356:	d902      	bls.n	800335e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003358:	2303      	movs	r3, #3
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	e00a      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d102      	bne.n	800336a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003364:	2302      	movs	r3, #2
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	e004      	b.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b70      	cmp	r3, #112	; 0x70
 800336e:	d101      	bne.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003370:	2301      	movs	r3, #1
 8003372:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f023 0207 	bic.w	r2, r3, #7
 800337c:	4909      	ldr	r1, [pc, #36]	; (80033a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	429a      	cmp	r2, r3
 8003390:	d001      	beq.n	8003396 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40022000 	.word	0x40022000

080033a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033b0:	2300      	movs	r3, #0
 80033b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b4:	2300      	movs	r3, #0
 80033b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d041      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033cc:	d02a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033d2:	d824      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d8:	d008      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033de:	d81e      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e8:	d010      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ea:	e018      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033ec:	4b86      	ldr	r3, [pc, #536]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a85      	ldr	r2, [pc, #532]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f8:	e015      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f000 facb 	bl	800399c <RCCEx_PLLSAI1_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800340a:	e00c      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3320      	adds	r3, #32
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fbb6 	bl	8003b84 <RCCEx_PLLSAI2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	74fb      	strb	r3, [r7, #19]
      break;
 8003422:	e000      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800342c:	4b76      	ldr	r3, [pc, #472]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800343a:	4973      	ldr	r1, [pc, #460]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003442:	e001      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d041      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003458:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800345c:	d02a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800345e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003462:	d824      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003468:	d008      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800346a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800346e:	d81e      	bhi.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003478:	d010      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800347a:	e018      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800347c:	4b62      	ldr	r3, [pc, #392]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a61      	ldr	r2, [pc, #388]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003486:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003488:	e015      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fa83 	bl	800399c <RCCEx_PLLSAI1_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800349a:	e00c      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3320      	adds	r3, #32
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fb6e 	bl	8003b84 <RCCEx_PLLSAI2_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ac:	e003      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	74fb      	strb	r3, [r7, #19]
      break;
 80034b2:	e000      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034bc:	4b52      	ldr	r3, [pc, #328]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ca:	494f      	ldr	r1, [pc, #316]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034d2:	e001      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a0 	beq.w	8003626 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ea:	4b47      	ldr	r3, [pc, #284]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	4b41      	ldr	r3, [pc, #260]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	4a40      	ldr	r2, [pc, #256]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	6593      	str	r3, [r2, #88]	; 0x58
 800350c:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003518:	2301      	movs	r3, #1
 800351a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800351c:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a3a      	ldr	r2, [pc, #232]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003526:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003528:	f7fe f96c 	bl	8001804 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800352e:	e009      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003530:	f7fe f968 	bl	8001804 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d902      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	74fb      	strb	r3, [r7, #19]
        break;
 8003542:	e005      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003544:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ef      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d15c      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003556:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003560:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01f      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d019      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003574:	4b24      	ldr	r3, [pc, #144]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003580:	4b21      	ldr	r3, [pc, #132]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003586:	4a20      	ldr	r2, [pc, #128]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d016      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe f927 	bl	8001804 <HAL_GetTick>
 80035b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b8:	e00b      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe f923 	bl	8001804 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d902      	bls.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	74fb      	strb	r3, [r7, #19]
            break;
 80035d0:	e006      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ec      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f6:	4904      	ldr	r1, [pc, #16]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035fe:	e009      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
 8003604:	e006      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003614:	7c7b      	ldrb	r3, [r7, #17]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361a:	4b9e      	ldr	r3, [pc, #632]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	4a9d      	ldr	r2, [pc, #628]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003632:	4b98      	ldr	r3, [pc, #608]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f023 0203 	bic.w	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	4994      	ldr	r1, [pc, #592]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003654:	4b8f      	ldr	r3, [pc, #572]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f023 020c 	bic.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	498c      	ldr	r1, [pc, #560]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003676:	4b87      	ldr	r3, [pc, #540]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4983      	ldr	r1, [pc, #524]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	497b      	ldr	r1, [pc, #492]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ba:	4b76      	ldr	r3, [pc, #472]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	4972      	ldr	r1, [pc, #456]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036dc:	4b6d      	ldr	r3, [pc, #436]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	496a      	ldr	r1, [pc, #424]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036fe:	4b65      	ldr	r3, [pc, #404]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	4961      	ldr	r1, [pc, #388]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003720:	4b5c      	ldr	r3, [pc, #368]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372e:	4959      	ldr	r1, [pc, #356]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003742:	4b54      	ldr	r3, [pc, #336]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	4950      	ldr	r1, [pc, #320]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003764:	4b4b      	ldr	r3, [pc, #300]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	4948      	ldr	r1, [pc, #288]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003786:	4b43      	ldr	r3, [pc, #268]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	493f      	ldr	r1, [pc, #252]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d028      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a8:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b6:	4937      	ldr	r1, [pc, #220]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c6:	d106      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c8:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a31      	ldr	r2, [pc, #196]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	e011      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037de:	d10c      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f8d8 	bl	800399c <RCCEx_PLLSAI1_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d028      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	491f      	ldr	r1, [pc, #124]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003824:	d106      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003830:	60d3      	str	r3, [r2, #12]
 8003832:	e011      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800383c:	d10c      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	2101      	movs	r1, #1
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f8a9 	bl	800399c <RCCEx_PLLSAI1_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384e:	7cfb      	ldrb	r3, [r7, #19]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02b      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003882:	d109      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a02      	ldr	r2, [pc, #8]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388e:	60d3      	str	r3, [r2, #12]
 8003890:	e014      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2101      	movs	r1, #1
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f877 	bl	800399c <RCCEx_PLLSAI1_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038b8:	7cfb      	ldrb	r3, [r7, #19]
 80038ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d02f      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d6:	4928      	ldr	r1, [pc, #160]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e6:	d10d      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3304      	adds	r3, #4
 80038ec:	2102      	movs	r1, #2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 f854 	bl	800399c <RCCEx_PLLSAI1_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d014      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	74bb      	strb	r3, [r7, #18]
 8003902:	e011      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3320      	adds	r3, #32
 8003912:	2102      	movs	r1, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f935 	bl	8003b84 <RCCEx_PLLSAI2_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003934:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003942:	490d      	ldr	r1, [pc, #52]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003966:	4904      	ldr	r1, [pc, #16]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800396e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000

0800397c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000

0800399c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039aa:	4b75      	ldr	r3, [pc, #468]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d018      	beq.n	80039e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039b6:	4b72      	ldr	r3, [pc, #456]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0203 	and.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d10d      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
       ||
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039ce:	4b6c      	ldr	r3, [pc, #432]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
       ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d047      	beq.n	8003a72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
 80039e6:	e044      	b.n	8003a72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d018      	beq.n	8003a22 <RCCEx_PLLSAI1_Config+0x86>
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d825      	bhi.n	8003a40 <RCCEx_PLLSAI1_Config+0xa4>
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d002      	beq.n	80039fe <RCCEx_PLLSAI1_Config+0x62>
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d009      	beq.n	8003a10 <RCCEx_PLLSAI1_Config+0x74>
 80039fc:	e020      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039fe:	4b60      	ldr	r3, [pc, #384]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11d      	bne.n	8003a46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0e:	e01a      	b.n	8003a46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a10:	4b5b      	ldr	r3, [pc, #364]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d116      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a20:	e013      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a22:	4b57      	ldr	r3, [pc, #348]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a3e:	e006      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
      break;
 8003a44:	e004      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a56:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	4944      	ldr	r1, [pc, #272]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d17d      	bne.n	8003b74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a78:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a40      	ldr	r2, [pc, #256]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a84:	f7fd febe 	bl	8001804 <HAL_GetTick>
 8003a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a8a:	e009      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a8c:	f7fd feba 	bl	8001804 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d902      	bls.n	8003aa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9e:	e005      	b.n	8003aac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aa0:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1ef      	bne.n	8003a8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d160      	bne.n	8003b74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d111      	bne.n	8003adc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab8:	4b31      	ldr	r3, [pc, #196]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68d2      	ldr	r2, [r2, #12]
 8003ace:	0912      	lsrs	r2, r2, #4
 8003ad0:	0452      	lsls	r2, r2, #17
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	492a      	ldr	r1, [pc, #168]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	610b      	str	r3, [r1, #16]
 8003ada:	e027      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d112      	bne.n	8003b08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae2:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003aea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6892      	ldr	r2, [r2, #8]
 8003af2:	0211      	lsls	r1, r2, #8
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6912      	ldr	r2, [r2, #16]
 8003af8:	0852      	lsrs	r2, r2, #1
 8003afa:	3a01      	subs	r2, #1
 8003afc:	0552      	lsls	r2, r2, #21
 8003afe:	430a      	orrs	r2, r1
 8003b00:	491f      	ldr	r1, [pc, #124]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	610b      	str	r3, [r1, #16]
 8003b06:	e011      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6892      	ldr	r2, [r2, #8]
 8003b18:	0211      	lsls	r1, r2, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6952      	ldr	r2, [r2, #20]
 8003b1e:	0852      	lsrs	r2, r2, #1
 8003b20:	3a01      	subs	r2, #1
 8003b22:	0652      	lsls	r2, r2, #25
 8003b24:	430a      	orrs	r2, r1
 8003b26:	4916      	ldr	r1, [pc, #88]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd fe64 	bl	8001804 <HAL_GetTick>
 8003b3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b3e:	e009      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b40:	f7fd fe60 	bl	8001804 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d902      	bls.n	8003b54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	73fb      	strb	r3, [r7, #15]
          break;
 8003b52:	e005      	b.n	8003b60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ef      	beq.n	8003b40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	4904      	ldr	r1, [pc, #16]	; (8003b80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000

08003b84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b92:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b9e:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0203 	and.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d10d      	bne.n	8003bca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bb6:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d047      	beq.n	8003c5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	e044      	b.n	8003c5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d018      	beq.n	8003c0a <RCCEx_PLLSAI2_Config+0x86>
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d825      	bhi.n	8003c28 <RCCEx_PLLSAI2_Config+0xa4>
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d002      	beq.n	8003be6 <RCCEx_PLLSAI2_Config+0x62>
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d009      	beq.n	8003bf8 <RCCEx_PLLSAI2_Config+0x74>
 8003be4:	e020      	b.n	8003c28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003be6:	4b55      	ldr	r3, [pc, #340]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d11d      	bne.n	8003c2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf6:	e01a      	b.n	8003c2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bf8:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d116      	bne.n	8003c32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c08:	e013      	b.n	8003c32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10f      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c26:	e006      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c2c:	e004      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e002      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c32:	bf00      	nop
 8003c34:	e000      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c3e:	4b3f      	ldr	r3, [pc, #252]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	430b      	orrs	r3, r1
 8003c54:	4939      	ldr	r1, [pc, #228]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d167      	bne.n	8003d30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c60:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a35      	ldr	r2, [pc, #212]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fd fdca 	bl	8001804 <HAL_GetTick>
 8003c70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c72:	e009      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c74:	f7fd fdc6 	bl	8001804 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d902      	bls.n	8003c88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	73fb      	strb	r3, [r7, #15]
        break;
 8003c86:	e005      	b.n	8003c94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ef      	bne.n	8003c74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d14a      	bne.n	8003d30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d111      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	0912      	lsrs	r2, r2, #4
 8003cb8:	0452      	lsls	r2, r2, #17
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	491f      	ldr	r1, [pc, #124]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	614b      	str	r3, [r1, #20]
 8003cc2:	e011      	b.n	8003ce8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ccc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6892      	ldr	r2, [r2, #8]
 8003cd4:	0211      	lsls	r1, r2, #8
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6912      	ldr	r2, [r2, #16]
 8003cda:	0852      	lsrs	r2, r2, #1
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0652      	lsls	r2, r2, #25
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4916      	ldr	r1, [pc, #88]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fd86 	bl	8001804 <HAL_GetTick>
 8003cf8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cfa:	e009      	b.n	8003d10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cfc:	f7fd fd82 	bl	8001804 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d902      	bls.n	8003d10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d0e:	e005      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ef      	beq.n	8003cfc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	4904      	ldr	r1, [pc, #16]	; (8003d3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000

08003d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e095      	b.n	8003e7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d108      	bne.n	8003d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d62:	d009      	beq.n	8003d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	61da      	str	r2, [r3, #28]
 8003d6a:	e005      	b.n	8003d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd fa08 	bl	80011a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db8:	d902      	bls.n	8003dc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	e002      	b.n	8003dc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003dce:	d007      	beq.n	8003de0 <HAL_SPI_Init+0xa0>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e22:	ea42 0103 	orr.w	r1, r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	f003 0204 	and.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e5c:	ea42 0103 	orr.w	r1, r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b082      	sub	sp, #8
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e049      	b.n	8003f2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d106      	bne.n	8003eb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f841 	bl	8003f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f000 f9f7 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d001      	beq.n	8003f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e04f      	b.n	8004000 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	; (800400c <HAL_TIM_Base_Start_IT+0xc4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01d      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x76>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8a:	d018      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x76>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x76>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1e      	ldr	r2, [pc, #120]	; (8004014 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x76>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x76>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_TIM_Base_Start_IT+0x76>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d115      	bne.n	8003fea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	4b17      	ldr	r3, [pc, #92]	; (8004024 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b06      	cmp	r3, #6
 8003fce:	d015      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0xb4>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd6:	d011      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	e008      	b.n	8003ffc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e000      	b.n	8003ffe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40000c00 	.word	0x40000c00
 800401c:	40013400 	.word	0x40013400
 8004020:	40014000 	.word	0x40014000
 8004024:	00010007 	.word	0x00010007

08004028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b02      	cmp	r3, #2
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b02      	cmp	r3, #2
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0202 	mvn.w	r2, #2
 8004054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f905 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8f7 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f908 	bl	800428e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b04      	cmp	r3, #4
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0204 	mvn.w	r2, #4
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8db 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8cd 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f8de 	bl	800428e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0208 	mvn.w	r2, #8
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2204      	movs	r2, #4
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8b1 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8a3 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f8b4 	bl	800428e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b10      	cmp	r3, #16
 8004138:	d122      	bne.n	8004180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b10      	cmp	r3, #16
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0210 	mvn.w	r2, #16
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2208      	movs	r2, #8
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f887 	bl	800427a <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f879 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f88a 	bl	800428e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10e      	bne.n	80041ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0201 	mvn.w	r2, #1
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc feb8 	bl	8000f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f914 	bl	8004400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e6:	d10e      	bne.n	8004206 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d107      	bne.n	8004206 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f907 	bl	8004414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d10e      	bne.n	8004232 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d107      	bne.n	8004232 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f838 	bl	80042a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b20      	cmp	r3, #32
 800423e:	d10e      	bne.n	800425e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b20      	cmp	r3, #32
 800424c:	d107      	bne.n	800425e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f06f 0220 	mvn.w	r2, #32
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8c7 	bl	80043ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a40      	ldr	r2, [pc, #256]	; (80043cc <TIM_Base_SetConfig+0x114>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d013      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d6:	d00f      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3d      	ldr	r2, [pc, #244]	; (80043d0 <TIM_Base_SetConfig+0x118>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00b      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3c      	ldr	r2, [pc, #240]	; (80043d4 <TIM_Base_SetConfig+0x11c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d007      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3b      	ldr	r2, [pc, #236]	; (80043d8 <TIM_Base_SetConfig+0x120>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a3a      	ldr	r2, [pc, #232]	; (80043dc <TIM_Base_SetConfig+0x124>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d108      	bne.n	800430a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <TIM_Base_SetConfig+0x114>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01f      	beq.n	8004352 <TIM_Base_SetConfig+0x9a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004318:	d01b      	beq.n	8004352 <TIM_Base_SetConfig+0x9a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <TIM_Base_SetConfig+0x118>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d017      	beq.n	8004352 <TIM_Base_SetConfig+0x9a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2b      	ldr	r2, [pc, #172]	; (80043d4 <TIM_Base_SetConfig+0x11c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <TIM_Base_SetConfig+0x9a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <TIM_Base_SetConfig+0x120>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00f      	beq.n	8004352 <TIM_Base_SetConfig+0x9a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a29      	ldr	r2, [pc, #164]	; (80043dc <TIM_Base_SetConfig+0x124>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00b      	beq.n	8004352 <TIM_Base_SetConfig+0x9a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <TIM_Base_SetConfig+0x128>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d007      	beq.n	8004352 <TIM_Base_SetConfig+0x9a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <TIM_Base_SetConfig+0x12c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d003      	beq.n	8004352 <TIM_Base_SetConfig+0x9a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a26      	ldr	r2, [pc, #152]	; (80043e8 <TIM_Base_SetConfig+0x130>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d108      	bne.n	8004364 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <TIM_Base_SetConfig+0x114>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00f      	beq.n	80043b0 <TIM_Base_SetConfig+0xf8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <TIM_Base_SetConfig+0x124>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00b      	beq.n	80043b0 <TIM_Base_SetConfig+0xf8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <TIM_Base_SetConfig+0x128>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d007      	beq.n	80043b0 <TIM_Base_SetConfig+0xf8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a10      	ldr	r2, [pc, #64]	; (80043e4 <TIM_Base_SetConfig+0x12c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_Base_SetConfig+0xf8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <TIM_Base_SetConfig+0x130>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d103      	bne.n	80043b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	615a      	str	r2, [r3, #20]
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40013400 	.word	0x40013400
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40014400 	.word	0x40014400
 80043e8:	40014800 	.word	0x40014800

080043ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e040      	b.n	80044bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc fef0 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	; 0x24
 8004454:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f992 	bl	8004790 <UART_SetConfig>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e022      	b.n	80044bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fc3e 	bl	8004d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fcc5 	bl	8004e44 <UART_CheckIdleState>
 80044ba:	4603      	mov	r3, r0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044d8:	2b20      	cmp	r3, #32
 80044da:	f040 8082 	bne.w	80045e2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_UART_Transmit+0x26>
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e07a      	b.n	80045e4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_UART_Transmit+0x38>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e073      	b.n	80045e4 <HAL_UART_Transmit+0x120>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2221      	movs	r2, #33	; 0x21
 8004510:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004512:	f7fd f977 	bl	8001804 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004530:	d108      	bne.n	8004544 <HAL_UART_Transmit+0x80>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	e003      	b.n	800454c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004554:	e02d      	b.n	80045b2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	2180      	movs	r1, #128	; 0x80
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fcb8 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e039      	b.n	80045e4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	881a      	ldrh	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004582:	b292      	uxth	r2, r2
 8004584:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	3302      	adds	r3, #2
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e008      	b.n	80045a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b292      	uxth	r2, r2
 8004598:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3301      	adds	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1cb      	bne.n	8004556 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2140      	movs	r1, #64	; 0x40
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fc84 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e005      	b.n	80045e4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004600:	2b20      	cmp	r3, #32
 8004602:	f040 80bf 	bne.w	8004784 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_UART_Receive+0x26>
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0b7      	b.n	8004786 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_UART_Receive+0x38>
 8004620:	2302      	movs	r3, #2
 8004622:	e0b0      	b.n	8004786 <HAL_UART_Receive+0x19a>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2222      	movs	r2, #34	; 0x22
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004640:	f7fd f8e0 	bl	8001804 <HAL_GetTick>
 8004644:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	d10e      	bne.n	800467e <HAL_UART_Receive+0x92>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d105      	bne.n	8004674 <HAL_UART_Receive+0x88>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800466e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004672:	e02d      	b.n	80046d0 <HAL_UART_Receive+0xe4>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	22ff      	movs	r2, #255	; 0xff
 8004678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800467c:	e028      	b.n	80046d0 <HAL_UART_Receive+0xe4>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10d      	bne.n	80046a2 <HAL_UART_Receive+0xb6>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <HAL_UART_Receive+0xac>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	22ff      	movs	r2, #255	; 0xff
 8004692:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004696:	e01b      	b.n	80046d0 <HAL_UART_Receive+0xe4>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	227f      	movs	r2, #127	; 0x7f
 800469c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046a0:	e016      	b.n	80046d0 <HAL_UART_Receive+0xe4>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046aa:	d10d      	bne.n	80046c8 <HAL_UART_Receive+0xdc>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d104      	bne.n	80046be <HAL_UART_Receive+0xd2>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	227f      	movs	r2, #127	; 0x7f
 80046b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046bc:	e008      	b.n	80046d0 <HAL_UART_Receive+0xe4>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	223f      	movs	r2, #63	; 0x3f
 80046c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c6:	e003      	b.n	80046d0 <HAL_UART_Receive+0xe4>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046d6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e0:	d108      	bne.n	80046f4 <HAL_UART_Receive+0x108>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	e003      	b.n	80046fc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004704:	e033      	b.n	800476e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2200      	movs	r2, #0
 800470e:	2120      	movs	r1, #32
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fbe0 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e032      	b.n	8004786 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800472c:	b29a      	uxth	r2, r3
 800472e:	8a7b      	ldrh	r3, [r7, #18]
 8004730:	4013      	ands	r3, r2
 8004732:	b29a      	uxth	r2, r3
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	3302      	adds	r3, #2
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	e00d      	b.n	800475c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004746:	b29b      	uxth	r3, r3
 8004748:	b2da      	uxtb	r2, r3
 800474a:	8a7b      	ldrh	r3, [r7, #18]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	4013      	ands	r3, r2
 8004750:	b2da      	uxtb	r2, r3
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	3301      	adds	r3, #1
 800475a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1c5      	bne.n	8004706 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e000      	b.n	8004786 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
  }
}
 8004786:	4618      	mov	r0, r3
 8004788:	3720      	adds	r7, #32
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b08a      	sub	sp, #40	; 0x28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4ba4      	ldr	r3, [pc, #656]	; (8004a50 <UART_SetConfig+0x2c0>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a99      	ldr	r2, [pc, #612]	; (8004a54 <UART_SetConfig+0x2c4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	4313      	orrs	r3, r2
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a90      	ldr	r2, [pc, #576]	; (8004a58 <UART_SetConfig+0x2c8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d126      	bne.n	8004868 <UART_SetConfig+0xd8>
 800481a:	4b90      	ldr	r3, [pc, #576]	; (8004a5c <UART_SetConfig+0x2cc>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d81b      	bhi.n	8004860 <UART_SetConfig+0xd0>
 8004828:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <UART_SetConfig+0xa0>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004841 	.word	0x08004841
 8004834:	08004851 	.word	0x08004851
 8004838:	08004849 	.word	0x08004849
 800483c:	08004859 	.word	0x08004859
 8004840:	2301      	movs	r3, #1
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e116      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004848:	2302      	movs	r3, #2
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e112      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004850:	2304      	movs	r3, #4
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004856:	e10e      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004858:	2308      	movs	r3, #8
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485e:	e10a      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004866:	e106      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a7c      	ldr	r2, [pc, #496]	; (8004a60 <UART_SetConfig+0x2d0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d138      	bne.n	80048e4 <UART_SetConfig+0x154>
 8004872:	4b7a      	ldr	r3, [pc, #488]	; (8004a5c <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d82d      	bhi.n	80048dc <UART_SetConfig+0x14c>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0xf8>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048dd 	.word	0x080048dd
 8004890:	080048dd 	.word	0x080048dd
 8004894:	080048dd 	.word	0x080048dd
 8004898:	080048cd 	.word	0x080048cd
 800489c:	080048dd 	.word	0x080048dd
 80048a0:	080048dd 	.word	0x080048dd
 80048a4:	080048dd 	.word	0x080048dd
 80048a8:	080048c5 	.word	0x080048c5
 80048ac:	080048dd 	.word	0x080048dd
 80048b0:	080048dd 	.word	0x080048dd
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048d5 	.word	0x080048d5
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e0d8      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048c4:	2302      	movs	r3, #2
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ca:	e0d4      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048cc:	2304      	movs	r3, #4
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d2:	e0d0      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048d4:	2308      	movs	r3, #8
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048da:	e0cc      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e2:	e0c8      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a5e      	ldr	r2, [pc, #376]	; (8004a64 <UART_SetConfig+0x2d4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d125      	bne.n	800493a <UART_SetConfig+0x1aa>
 80048ee:	4b5b      	ldr	r3, [pc, #364]	; (8004a5c <UART_SetConfig+0x2cc>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	d016      	beq.n	800492a <UART_SetConfig+0x19a>
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d818      	bhi.n	8004932 <UART_SetConfig+0x1a2>
 8004900:	2b20      	cmp	r3, #32
 8004902:	d00a      	beq.n	800491a <UART_SetConfig+0x18a>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d814      	bhi.n	8004932 <UART_SetConfig+0x1a2>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <UART_SetConfig+0x182>
 800490c:	2b10      	cmp	r3, #16
 800490e:	d008      	beq.n	8004922 <UART_SetConfig+0x192>
 8004910:	e00f      	b.n	8004932 <UART_SetConfig+0x1a2>
 8004912:	2300      	movs	r3, #0
 8004914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004918:	e0ad      	b.n	8004a76 <UART_SetConfig+0x2e6>
 800491a:	2302      	movs	r3, #2
 800491c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004920:	e0a9      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004922:	2304      	movs	r3, #4
 8004924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004928:	e0a5      	b.n	8004a76 <UART_SetConfig+0x2e6>
 800492a:	2308      	movs	r3, #8
 800492c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004930:	e0a1      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004932:	2310      	movs	r3, #16
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004938:	e09d      	b.n	8004a76 <UART_SetConfig+0x2e6>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <UART_SetConfig+0x2d8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d125      	bne.n	8004990 <UART_SetConfig+0x200>
 8004944:	4b45      	ldr	r3, [pc, #276]	; (8004a5c <UART_SetConfig+0x2cc>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800494e:	2bc0      	cmp	r3, #192	; 0xc0
 8004950:	d016      	beq.n	8004980 <UART_SetConfig+0x1f0>
 8004952:	2bc0      	cmp	r3, #192	; 0xc0
 8004954:	d818      	bhi.n	8004988 <UART_SetConfig+0x1f8>
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d00a      	beq.n	8004970 <UART_SetConfig+0x1e0>
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d814      	bhi.n	8004988 <UART_SetConfig+0x1f8>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <UART_SetConfig+0x1d8>
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d008      	beq.n	8004978 <UART_SetConfig+0x1e8>
 8004966:	e00f      	b.n	8004988 <UART_SetConfig+0x1f8>
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e082      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004970:	2302      	movs	r3, #2
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e07e      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e07a      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e076      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498e:	e072      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a35      	ldr	r2, [pc, #212]	; (8004a6c <UART_SetConfig+0x2dc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d12a      	bne.n	80049f0 <UART_SetConfig+0x260>
 800499a:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <UART_SetConfig+0x2cc>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a8:	d01a      	beq.n	80049e0 <UART_SetConfig+0x250>
 80049aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ae:	d81b      	bhi.n	80049e8 <UART_SetConfig+0x258>
 80049b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b4:	d00c      	beq.n	80049d0 <UART_SetConfig+0x240>
 80049b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ba:	d815      	bhi.n	80049e8 <UART_SetConfig+0x258>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <UART_SetConfig+0x238>
 80049c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c4:	d008      	beq.n	80049d8 <UART_SetConfig+0x248>
 80049c6:	e00f      	b.n	80049e8 <UART_SetConfig+0x258>
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ce:	e052      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d6:	e04e      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049de:	e04a      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049e0:	2308      	movs	r3, #8
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e6:	e046      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ee:	e042      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a17      	ldr	r2, [pc, #92]	; (8004a54 <UART_SetConfig+0x2c4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d13a      	bne.n	8004a70 <UART_SetConfig+0x2e0>
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <UART_SetConfig+0x2cc>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a08:	d01a      	beq.n	8004a40 <UART_SetConfig+0x2b0>
 8004a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a0e:	d81b      	bhi.n	8004a48 <UART_SetConfig+0x2b8>
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a14:	d00c      	beq.n	8004a30 <UART_SetConfig+0x2a0>
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d815      	bhi.n	8004a48 <UART_SetConfig+0x2b8>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <UART_SetConfig+0x298>
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a24:	d008      	beq.n	8004a38 <UART_SetConfig+0x2a8>
 8004a26:	e00f      	b.n	8004a48 <UART_SetConfig+0x2b8>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2e:	e022      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a36:	e01e      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3e:	e01a      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a40:	2308      	movs	r3, #8
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	e016      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4e:	e012      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a50:	efff69f3 	.word	0xefff69f3
 8004a54:	40008000 	.word	0x40008000
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40004400 	.word	0x40004400
 8004a64:	40004800 	.word	0x40004800
 8004a68:	40004c00 	.word	0x40004c00
 8004a6c:	40005000 	.word	0x40005000
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a9f      	ldr	r2, [pc, #636]	; (8004cf8 <UART_SetConfig+0x568>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d17a      	bne.n	8004b76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d824      	bhi.n	8004ad2 <UART_SetConfig+0x342>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0x300>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004ad3 	.word	0x08004ad3
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004ad3 	.word	0x08004ad3
 8004aa0:	08004ac3 	.word	0x08004ac3
 8004aa4:	08004ad3 	.word	0x08004ad3
 8004aa8:	08004ad3 	.word	0x08004ad3
 8004aac:	08004ad3 	.word	0x08004ad3
 8004ab0:	08004acb 	.word	0x08004acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7fe fbba 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8004ab8:	61f8      	str	r0, [r7, #28]
        break;
 8004aba:	e010      	b.n	8004ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004abc:	4b8f      	ldr	r3, [pc, #572]	; (8004cfc <UART_SetConfig+0x56c>)
 8004abe:	61fb      	str	r3, [r7, #28]
        break;
 8004ac0:	e00d      	b.n	8004ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac2:	f7fe fb1b 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8004ac6:	61f8      	str	r0, [r7, #28]
        break;
 8004ac8:	e009      	b.n	8004ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ace:	61fb      	str	r3, [r7, #28]
        break;
 8004ad0:	e005      	b.n	8004ade <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80fb 	beq.w	8004cdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4413      	add	r3, r2
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d305      	bcc.n	8004b02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d903      	bls.n	8004b0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b08:	e0e8      	b.n	8004cdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	461c      	mov	r4, r3
 8004b10:	4615      	mov	r5, r2
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	022b      	lsls	r3, r5, #8
 8004b1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b20:	0222      	lsls	r2, r4, #8
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	6849      	ldr	r1, [r1, #4]
 8004b26:	0849      	lsrs	r1, r1, #1
 8004b28:	2000      	movs	r0, #0
 8004b2a:	4688      	mov	r8, r1
 8004b2c:	4681      	mov	r9, r0
 8004b2e:	eb12 0a08 	adds.w	sl, r2, r8
 8004b32:	eb43 0b09 	adc.w	fp, r3, r9
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b44:	4650      	mov	r0, sl
 8004b46:	4659      	mov	r1, fp
 8004b48:	f7fb fb92 	bl	8000270 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5a:	d308      	bcc.n	8004b6e <UART_SetConfig+0x3de>
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b62:	d204      	bcs.n	8004b6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	e0b6      	b.n	8004cdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b74:	e0b2      	b.n	8004cdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d15e      	bne.n	8004c3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d828      	bhi.n	8004bda <UART_SetConfig+0x44a>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x400>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bdb 	.word	0x08004bdb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7fe fb3a 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8004bb8:	61f8      	str	r0, [r7, #28]
        break;
 8004bba:	e014      	b.n	8004be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe fb4c 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	61f8      	str	r0, [r7, #28]
        break;
 8004bc2:	e010      	b.n	8004be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b4d      	ldr	r3, [pc, #308]	; (8004cfc <UART_SetConfig+0x56c>)
 8004bc6:	61fb      	str	r3, [r7, #28]
        break;
 8004bc8:	e00d      	b.n	8004be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7fe fa97 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8004bce:	61f8      	str	r0, [r7, #28]
        break;
 8004bd0:	e009      	b.n	8004be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	61fb      	str	r3, [r7, #28]
        break;
 8004bd8:	e005      	b.n	8004be6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d077      	beq.n	8004cdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	005a      	lsls	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	441a      	add	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b0f      	cmp	r3, #15
 8004c06:	d916      	bls.n	8004c36 <UART_SetConfig+0x4a6>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0e:	d212      	bcs.n	8004c36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f023 030f 	bic.w	r3, r3, #15
 8004c18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	8afb      	ldrh	r3, [r7, #22]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	8afa      	ldrh	r2, [r7, #22]
 8004c32:	60da      	str	r2, [r3, #12]
 8004c34:	e052      	b.n	8004cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c3c:	e04e      	b.n	8004cdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d827      	bhi.n	8004c96 <UART_SetConfig+0x506>
 8004c46:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x4bc>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c79 	.word	0x08004c79
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	08004c97 	.word	0x08004c97
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004c97 	.word	0x08004c97
 8004c68:	08004c97 	.word	0x08004c97
 8004c6c:	08004c8f 	.word	0x08004c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7fe fadc 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8004c74:	61f8      	str	r0, [r7, #28]
        break;
 8004c76:	e014      	b.n	8004ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c78:	f7fe faee 	bl	8003258 <HAL_RCC_GetPCLK2Freq>
 8004c7c:	61f8      	str	r0, [r7, #28]
        break;
 8004c7e:	e010      	b.n	8004ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <UART_SetConfig+0x56c>)
 8004c82:	61fb      	str	r3, [r7, #28]
        break;
 8004c84:	e00d      	b.n	8004ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c86:	f7fe fa39 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8004c8a:	61f8      	str	r0, [r7, #28]
        break;
 8004c8c:	e009      	b.n	8004ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c92:	61fb      	str	r3, [r7, #28]
        break;
 8004c94:	e005      	b.n	8004ca2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d019      	beq.n	8004cdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	085a      	lsrs	r2, r3, #1
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	d909      	bls.n	8004cd6 <UART_SetConfig+0x546>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc8:	d205      	bcs.n	8004cd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60da      	str	r2, [r3, #12]
 8004cd4:	e002      	b.n	8004cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3728      	adds	r7, #40	; 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40008000 	.word	0x40008000
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01a      	beq.n	8004e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfe:	d10a      	bne.n	8004e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e54:	f7fc fcd6 	bl	8001804 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d10e      	bne.n	8004e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f82d 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e023      	b.n	8004ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d10e      	bne.n	8004eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f817 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e00d      	b.n	8004ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b09c      	sub	sp, #112	; 0x70
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee6:	e0a5      	b.n	8005034 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	f000 80a1 	beq.w	8005034 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef2:	f7fc fc87 	bl	8001804 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d13e      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	663b      	str	r3, [r7, #96]	; 0x60
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e067      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d04f      	beq.n	8005034 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa2:	d147      	bne.n	8005034 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e6      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005000:	623a      	str	r2, [r7, #32]
 8005002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	61bb      	str	r3, [r7, #24]
   return(result);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e5      	bne.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e010      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4013      	ands	r3, r2
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	429a      	cmp	r2, r3
 8005050:	f43f af4a 	beq.w	8004ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3770      	adds	r7, #112	; 0x70
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800505e:	b084      	sub	sp, #16
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	f107 001c 	add.w	r0, r7, #28
 800506c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa6b 	bl	8005558 <USB_CoreReset>
 8005082:	4603      	mov	r3, r0
 8005084:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	639a      	str	r2, [r3, #56]	; 0x38
 8005098:	e005      	b.n	80050a6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050b2:	b004      	add	sp, #16
 80050b4:	4770      	bx	lr

080050b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d115      	bne.n	8005126 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005106:	2001      	movs	r0, #1
 8005108:	f7fc fb88 	bl	800181c <HAL_Delay>
      ms++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa12 	bl	800553c <USB_GetMode>
 8005118:	4603      	mov	r3, r0
 800511a:	2b01      	cmp	r3, #1
 800511c:	d01e      	beq.n	800515c <USB_SetCurrentMode+0x84>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b31      	cmp	r3, #49	; 0x31
 8005122:	d9f0      	bls.n	8005106 <USB_SetCurrentMode+0x2e>
 8005124:	e01a      	b.n	800515c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d115      	bne.n	8005158 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005138:	2001      	movs	r0, #1
 800513a:	f7fc fb6f 	bl	800181c <HAL_Delay>
      ms++;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3301      	adds	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f9f9 	bl	800553c <USB_GetMode>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <USB_SetCurrentMode+0x84>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b31      	cmp	r3, #49	; 0x31
 8005154:	d9f0      	bls.n	8005138 <USB_SetCurrentMode+0x60>
 8005156:	e001      	b.n	800515c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e005      	b.n	8005168 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b32      	cmp	r3, #50	; 0x32
 8005160:	d101      	bne.n	8005166 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005170:	b084      	sub	sp, #16
 8005172:	b580      	push	{r7, lr}
 8005174:	b086      	sub	sp, #24
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800517e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	e009      	b.n	80051a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	3340      	adds	r3, #64	; 0x40
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	2200      	movs	r2, #0
 800519c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	3301      	adds	r3, #1
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b0e      	cmp	r3, #14
 80051a8:	d9f2      	bls.n	8005190 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11c      	bne.n	80051ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051be:	f043 0302 	orr.w	r3, r3, #2
 80051c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e005      	b.n	80051f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005208:	4619      	mov	r1, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005210:	461a      	mov	r2, r3
 8005212:	680b      	ldr	r3, [r1, #0]
 8005214:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005216:	2103      	movs	r1, #3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f955 	bl	80054c8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800521e:	2110      	movs	r1, #16
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f8f1 	bl	8005408 <USB_FlushTxFifo>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f91b 	bl	800546c <USB_FlushRxFifo>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	461a      	mov	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	461a      	mov	r2, r3
 8005260:	2300      	movs	r3, #0
 8005262:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e043      	b.n	80052f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800527c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005280:	d118      	bne.n	80052b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	461a      	mov	r2, r3
 8005296:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	e013      	b.n	80052c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	461a      	mov	r2, r3
 80052ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	e008      	b.n	80052c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	461a      	mov	r2, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	461a      	mov	r2, r3
 80052d4:	2300      	movs	r3, #0
 80052d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	461a      	mov	r2, r3
 80052e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3301      	adds	r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d3b7      	bcc.n	800526a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e043      	b.n	8005388 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005316:	d118      	bne.n	800534a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	461a      	mov	r2, r3
 800532c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e013      	b.n	800535c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	461a      	mov	r2, r3
 8005342:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e008      	b.n	800535c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005356:	461a      	mov	r2, r3
 8005358:	2300      	movs	r3, #0
 800535a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537a:	461a      	mov	r2, r3
 800537c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005380:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	3301      	adds	r3, #1
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	429a      	cmp	r2, r3
 800538e:	d3b7      	bcc.n	8005300 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f043 0210 	orr.w	r2, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <USB_DevInit+0x294>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f043 0208 	orr.w	r2, r3, #8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d107      	bne.n	80053f2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ea:	f043 0304 	orr.w	r3, r3, #4
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053fe:	b004      	add	sp, #16
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	803c3800 	.word	0x803c3800

08005408 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3301      	adds	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	4a12      	ldr	r2, [pc, #72]	; (8005468 <USB_FlushTxFifo+0x60>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e01a      	b.n	800545c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	daf3      	bge.n	8005416 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	019b      	lsls	r3, r3, #6
 8005436:	f043 0220 	orr.w	r2, r3, #32
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	4a08      	ldr	r2, [pc, #32]	; (8005468 <USB_FlushTxFifo+0x60>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e006      	b.n	800545c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d0f1      	beq.n	800543e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	00030d40 	.word	0x00030d40

0800546c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <USB_FlushRxFifo+0x58>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d901      	bls.n	8005488 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e017      	b.n	80054b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	daf3      	bge.n	8005478 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2210      	movs	r2, #16
 8005498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <USB_FlushRxFifo+0x58>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e006      	b.n	80054b8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d0f1      	beq.n	800549a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00030d40 	.word	0x00030d40

080054c8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005514:	f023 0303 	bic.w	r3, r3, #3
 8005518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f003 0301 	and.w	r3, r3, #1
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	4a13      	ldr	r2, [pc, #76]	; (80055b8 <USB_CoreReset+0x60>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d901      	bls.n	8005574 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e01a      	b.n	80055aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	daf3      	bge.n	8005564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f043 0201 	orr.w	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <USB_CoreReset+0x60>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d901      	bls.n	800559c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e006      	b.n	80055aa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d0f1      	beq.n	800558c <USB_CoreReset+0x34>

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	00030d40 	.word	0x00030d40

080055bc <__NVIC_SetPriority>:
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	6039      	str	r1, [r7, #0]
 80055c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	db0a      	blt.n	80055e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	490c      	ldr	r1, [pc, #48]	; (8005608 <__NVIC_SetPriority+0x4c>)
 80055d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055da:	0112      	lsls	r2, r2, #4
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	440b      	add	r3, r1
 80055e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80055e4:	e00a      	b.n	80055fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4908      	ldr	r1, [pc, #32]	; (800560c <__NVIC_SetPriority+0x50>)
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	3b04      	subs	r3, #4
 80055f4:	0112      	lsls	r2, r2, #4
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	440b      	add	r3, r1
 80055fa:	761a      	strb	r2, [r3, #24]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	e000e100 	.word	0xe000e100
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <SysTick_Handler+0x1c>)
 8005616:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005618:	f002 f83a 	bl	8007690 <xTaskGetSchedulerState>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d001      	beq.n	8005626 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005622:	f002 ff21 	bl	8008468 <xPortSysTickHandler>
  }
}
 8005626:	bf00      	nop
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	e000e010 	.word	0xe000e010

08005630 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005634:	2100      	movs	r1, #0
 8005636:	f06f 0004 	mvn.w	r0, #4
 800563a:	f7ff ffbf 	bl	80055bc <__NVIC_SetPriority>
#endif
}
 800563e:	bf00      	nop
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564a:	f3ef 8305 	mrs	r3, IPSR
 800564e:	603b      	str	r3, [r7, #0]
  return(result);
 8005650:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005656:	f06f 0305 	mvn.w	r3, #5
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	e00c      	b.n	8005678 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800565e:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <osKernelInitialize+0x44>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d105      	bne.n	8005672 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <osKernelInitialize+0x44>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800566c:	2300      	movs	r3, #0
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	e002      	b.n	8005678 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005678:	687b      	ldr	r3, [r7, #4]
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	2000075c 	.word	0x2000075c

0800568c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005692:	f3ef 8305 	mrs	r3, IPSR
 8005696:	603b      	str	r3, [r7, #0]
  return(result);
 8005698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800569e:	f06f 0305 	mvn.w	r3, #5
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	e010      	b.n	80056c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <osKernelStart+0x48>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d109      	bne.n	80056c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056ae:	f7ff ffbf 	bl	8005630 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <osKernelStart+0x48>)
 80056b4:	2202      	movs	r2, #2
 80056b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056b8:	f001 fb8e 	bl	8006dd8 <vTaskStartScheduler>
      stat = osOK;
 80056bc:	2300      	movs	r3, #0
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	e002      	b.n	80056c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056c8:	687b      	ldr	r3, [r7, #4]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2000075c 	.word	0x2000075c

080056d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af04      	add	r7, sp, #16
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e8:	f3ef 8305 	mrs	r3, IPSR
 80056ec:	617b      	str	r3, [r7, #20]
  return(result);
 80056ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d17e      	bne.n	80057f2 <osThreadNew+0x11a>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d07b      	beq.n	80057f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056fe:	2318      	movs	r3, #24
 8005700:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d045      	beq.n	800579e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <osThreadNew+0x48>
        name = attr->name;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <osThreadNew+0x6e>
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b38      	cmp	r3, #56	; 0x38
 8005738:	d805      	bhi.n	8005746 <osThreadNew+0x6e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <osThreadNew+0x72>
        return (NULL);
 8005746:	2300      	movs	r3, #0
 8005748:	e054      	b.n	80057f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	089b      	lsrs	r3, r3, #2
 8005758:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00e      	beq.n	8005780 <osThreadNew+0xa8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2bbb      	cmp	r3, #187	; 0xbb
 8005768:	d90a      	bls.n	8005780 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800576e:	2b00      	cmp	r3, #0
 8005770:	d006      	beq.n	8005780 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <osThreadNew+0xa8>
        mem = 1;
 800577a:	2301      	movs	r3, #1
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e010      	b.n	80057a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <osThreadNew+0xca>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d108      	bne.n	80057a2 <osThreadNew+0xca>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <osThreadNew+0xca>
          mem = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	e001      	b.n	80057a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d110      	bne.n	80057ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057b0:	9202      	str	r2, [sp, #8]
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6a3a      	ldr	r2, [r7, #32]
 80057bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f001 f91e 	bl	8006a00 <xTaskCreateStatic>
 80057c4:	4603      	mov	r3, r0
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	e013      	b.n	80057f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d110      	bne.n	80057f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	f107 0310 	add.w	r3, r7, #16
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f001 f969 	bl	8006aba <xTaskCreate>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d001      	beq.n	80057f2 <osThreadNew+0x11a>
            hTask = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057f2:	693b      	ldr	r3, [r7, #16]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005804:	f3ef 8305 	mrs	r3, IPSR
 8005808:	60bb      	str	r3, [r7, #8]
  return(result);
 800580a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <osDelay+0x1c>
    stat = osErrorISR;
 8005810:	f06f 0305 	mvn.w	r3, #5
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e007      	b.n	8005828 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 faa4 	bl	8006d70 <vTaskDelay>
    }
  }

  return (stat);
 8005828:	68fb      	ldr	r3, [r7, #12]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005832:	b580      	push	{r7, lr}
 8005834:	b08a      	sub	sp, #40	; 0x28
 8005836:	af02      	add	r7, sp, #8
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005842:	f3ef 8305 	mrs	r3, IPSR
 8005846:	613b      	str	r3, [r7, #16]
  return(result);
 8005848:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800584a:	2b00      	cmp	r3, #0
 800584c:	d175      	bne.n	800593a <osSemaphoreNew+0x108>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d072      	beq.n	800593a <osSemaphoreNew+0x108>
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	429a      	cmp	r2, r3
 800585a:	d86e      	bhi.n	800593a <osSemaphoreNew+0x108>
    mem = -1;
 800585c:	f04f 33ff 	mov.w	r3, #4294967295
 8005860:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d015      	beq.n	8005894 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <osSemaphoreNew+0x4c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b4f      	cmp	r3, #79	; 0x4f
 8005876:	d902      	bls.n	800587e <osSemaphoreNew+0x4c>
        mem = 1;
 8005878:	2301      	movs	r3, #1
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e00c      	b.n	8005898 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <osSemaphoreNew+0x66>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <osSemaphoreNew+0x66>
          mem = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e001      	b.n	8005898 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589e:	d04c      	beq.n	800593a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d128      	bne.n	80058f8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d10a      	bne.n	80058c2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2203      	movs	r2, #3
 80058b2:	9200      	str	r2, [sp, #0]
 80058b4:	2200      	movs	r2, #0
 80058b6:	2100      	movs	r1, #0
 80058b8:	2001      	movs	r0, #1
 80058ba:	f000 fa07 	bl	8005ccc <xQueueGenericCreateStatic>
 80058be:	61f8      	str	r0, [r7, #28]
 80058c0:	e005      	b.n	80058ce <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80058c2:	2203      	movs	r2, #3
 80058c4:	2100      	movs	r1, #0
 80058c6:	2001      	movs	r0, #1
 80058c8:	f000 fa78 	bl	8005dbc <xQueueGenericCreate>
 80058cc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d022      	beq.n	800591a <osSemaphoreNew+0xe8>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01f      	beq.n	800591a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80058da:	2300      	movs	r3, #0
 80058dc:	2200      	movs	r2, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	69f8      	ldr	r0, [r7, #28]
 80058e2:	f000 fb33 	bl	8005f4c <xQueueGenericSend>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d016      	beq.n	800591a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80058ec:	69f8      	ldr	r0, [r7, #28]
 80058ee:	f000 feb3 	bl	8006658 <vQueueDelete>
            hSemaphore = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	e010      	b.n	800591a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d108      	bne.n	8005910 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	461a      	mov	r2, r3
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fab5 	bl	8005e76 <xQueueCreateCountingSemaphoreStatic>
 800590c:	61f8      	str	r0, [r7, #28]
 800590e:	e004      	b.n	800591a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fae6 	bl	8005ee4 <xQueueCreateCountingSemaphore>
 8005918:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00c      	beq.n	800593a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e001      	b.n	8005932 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005932:	6979      	ldr	r1, [r7, #20]
 8005934:	69f8      	ldr	r0, [r7, #28]
 8005936:	f000 ffdb 	bl	80068f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800593a:	69fb      	ldr	r3, [r7, #28]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005950:	2300      	movs	r3, #0
 8005952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005954:	f3ef 8305 	mrs	r3, IPSR
 8005958:	613b      	str	r3, [r7, #16]
  return(result);
 800595a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800595c:	2b00      	cmp	r3, #0
 800595e:	d15f      	bne.n	8005a20 <osMessageQueueNew+0xdc>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d05c      	beq.n	8005a20 <osMessageQueueNew+0xdc>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d059      	beq.n	8005a20 <osMessageQueueNew+0xdc>
    mem = -1;
 800596c:	f04f 33ff 	mov.w	r3, #4294967295
 8005970:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d029      	beq.n	80059cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <osMessageQueueNew+0x62>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2b4f      	cmp	r3, #79	; 0x4f
 8005986:	d90e      	bls.n	80059a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695a      	ldr	r2, [r3, #20]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	fb01 f303 	mul.w	r3, r1, r3
 800599c:	429a      	cmp	r2, r3
 800599e:	d302      	bcc.n	80059a6 <osMessageQueueNew+0x62>
        mem = 1;
 80059a0:	2301      	movs	r3, #1
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	e014      	b.n	80059d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d110      	bne.n	80059d0 <osMessageQueueNew+0x8c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10c      	bne.n	80059d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d108      	bne.n	80059d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d104      	bne.n	80059d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	e001      	b.n	80059d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10b      	bne.n	80059ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2100      	movs	r1, #0
 80059e0:	9100      	str	r1, [sp, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f971 	bl	8005ccc <xQueueGenericCreateStatic>
 80059ea:	61f8      	str	r0, [r7, #28]
 80059ec:	e008      	b.n	8005a00 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d105      	bne.n	8005a00 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80059f4:	2200      	movs	r2, #0
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f9df 	bl	8005dbc <xQueueGenericCreate>
 80059fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00c      	beq.n	8005a20 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e001      	b.n	8005a18 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a18:	6979      	ldr	r1, [r7, #20]
 8005a1a:	69f8      	ldr	r0, [r7, #28]
 8005a1c:	f000 ff68 	bl	80068f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a20:	69fb      	ldr	r3, [r7, #28]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4a07      	ldr	r2, [pc, #28]	; (8005a58 <vApplicationGetIdleTaskMemory+0x2c>)
 8005a3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a06      	ldr	r2, [pc, #24]	; (8005a5c <vApplicationGetIdleTaskMemory+0x30>)
 8005a42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	601a      	str	r2, [r3, #0]
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000760 	.word	0x20000760
 8005a5c:	2000081c 	.word	0x2000081c

08005a60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a07      	ldr	r2, [pc, #28]	; (8005a8c <vApplicationGetTimerTaskMemory+0x2c>)
 8005a70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <vApplicationGetTimerTaskMemory+0x30>)
 8005a76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a7e:	601a      	str	r2, [r3, #0]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000a1c 	.word	0x20000a1c
 8005a90:	20000ad8 	.word	0x20000ad8

08005a94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f103 0208 	add.w	r2, r3, #8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f103 0208 	add.w	r2, r3, #8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f103 0208 	add.w	r2, r3, #8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	601a      	str	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b36:	b480      	push	{r7}
 8005b38:	b085      	sub	sp, #20
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d103      	bne.n	8005b56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	e00c      	b.n	8005b70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3308      	adds	r3, #8
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e002      	b.n	8005b64 <vListInsert+0x2e>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d2f6      	bcs.n	8005b5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6892      	ldr	r2, [r2, #8]
 8005bbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6852      	ldr	r2, [r2, #4]
 8005bc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d103      	bne.n	8005bdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	1e5a      	subs	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c26:	f002 fb8d 	bl	8008344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c32:	68f9      	ldr	r1, [r7, #12]
 8005c34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c36:	fb01 f303 	mul.w	r3, r1, r3
 8005c3a:	441a      	add	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	3b01      	subs	r3, #1
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	441a      	add	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	22ff      	movs	r2, #255	; 0xff
 8005c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	22ff      	movs	r2, #255	; 0xff
 8005c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d114      	bne.n	8005ca6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01a      	beq.n	8005cba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3310      	adds	r3, #16
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fb3f 	bl	800730c <xTaskRemoveFromEventList>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c94:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <xQueueGenericReset+0xcc>)
 8005c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	e009      	b.n	8005cba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3310      	adds	r3, #16
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fef2 	bl	8005a94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3324      	adds	r3, #36	; 0x24
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff feed 	bl	8005a94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cba:	f002 fb73 	bl	80083a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cbe:	2301      	movs	r3, #1
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08e      	sub	sp, #56	; 0x38
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <xQueueGenericCreateStatic+0x52>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <xQueueGenericCreateStatic+0x56>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <xQueueGenericCreateStatic+0x58>
 8005d22:	2300      	movs	r3, #0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	623b      	str	r3, [r7, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <xQueueGenericCreateStatic+0x7e>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <xQueueGenericCreateStatic+0x82>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <xQueueGenericCreateStatic+0x84>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	61fb      	str	r3, [r7, #28]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d6a:	2350      	movs	r3, #80	; 0x50
 8005d6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b50      	cmp	r3, #80	; 0x50
 8005d72:	d00a      	beq.n	8005d8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	61bb      	str	r3, [r7, #24]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	4613      	mov	r3, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f83f 	bl	8005e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3730      	adds	r7, #48	; 0x30
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	613b      	str	r3, [r7, #16]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	3350      	adds	r3, #80	; 0x50
 8005df4:	4618      	mov	r0, r3
 8005df6:	f002 fbc7 	bl	8008588 <pvPortMalloc>
 8005dfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d011      	beq.n	8005e26 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	3350      	adds	r3, #80	; 0x50
 8005e0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e14:	79fa      	ldrb	r2, [r7, #7]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f805 	bl	8005e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e26:	69bb      	ldr	r3, [r7, #24]
	}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e002      	b.n	8005e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e5e:	2101      	movs	r1, #1
 8005e60:	69b8      	ldr	r0, [r7, #24]
 8005e62:	f7ff fecb 	bl	8005bfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	78fa      	ldrb	r2, [r7, #3]
 8005e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b08a      	sub	sp, #40	; 0x28
 8005e7a:	af02      	add	r7, sp, #8
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	61bb      	str	r3, [r7, #24]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d90a      	bls.n	8005ebc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	617b      	str	r3, [r7, #20]
}
 8005eb8:	bf00      	nop
 8005eba:	e7fe      	b.n	8005eba <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff ff00 	bl	8005ccc <xQueueGenericCreateStatic>
 8005ecc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005eda:	69fb      	ldr	r3, [r7, #28]
	}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	613b      	str	r3, [r7, #16]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d90a      	bls.n	8005f28 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60fb      	str	r3, [r7, #12]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f28:	2202      	movs	r2, #2
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ff45 	bl	8005dbc <xQueueGenericCreate>
 8005f32:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005f40:	697b      	ldr	r3, [r7, #20]
	}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08e      	sub	sp, #56	; 0x38
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <xQueueGenericSend+0x32>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <xQueueGenericSend+0x40>
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <xQueueGenericSend+0x44>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <xQueueGenericSend+0x46>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <xQueueGenericSend+0x60>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d103      	bne.n	8005fba <xQueueGenericSend+0x6e>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <xQueueGenericSend+0x72>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <xQueueGenericSend+0x74>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <xQueueGenericSend+0x8e>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	623b      	str	r3, [r7, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fda:	f001 fb59 	bl	8007690 <xTaskGetSchedulerState>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <xQueueGenericSend+0x9e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <xQueueGenericSend+0xa2>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <xQueueGenericSend+0xa4>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <xQueueGenericSend+0xbe>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	61fb      	str	r3, [r7, #28]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800600a:	f002 f99b 	bl	8008344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	429a      	cmp	r2, r3
 8006018:	d302      	bcc.n	8006020 <xQueueGenericSend+0xd4>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b02      	cmp	r3, #2
 800601e:	d129      	bne.n	8006074 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006026:	f000 fb52 	bl	80066ce <prvCopyDataToQueue>
 800602a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	d010      	beq.n	8006056 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	3324      	adds	r3, #36	; 0x24
 8006038:	4618      	mov	r0, r3
 800603a:	f001 f967 	bl	800730c <xTaskRemoveFromEventList>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d013      	beq.n	800606c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006044:	4b3f      	ldr	r3, [pc, #252]	; (8006144 <xQueueGenericSend+0x1f8>)
 8006046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	e00a      	b.n	800606c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800605c:	4b39      	ldr	r3, [pc, #228]	; (8006144 <xQueueGenericSend+0x1f8>)
 800605e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800606c:	f002 f99a 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 8006070:	2301      	movs	r3, #1
 8006072:	e063      	b.n	800613c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d103      	bne.n	8006082 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800607a:	f002 f993 	bl	80083a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800607e:	2300      	movs	r3, #0
 8006080:	e05c      	b.n	800613c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006084:	2b00      	cmp	r3, #0
 8006086:	d106      	bne.n	8006096 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	4618      	mov	r0, r3
 800608e:	f001 f9a1 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006096:	f002 f985 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800609a:	f000 ff0d 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800609e:	f002 f951 	bl	8008344 <vPortEnterCritical>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d103      	bne.n	80060b8 <xQueueGenericSend+0x16c>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060be:	b25b      	sxtb	r3, r3
 80060c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c4:	d103      	bne.n	80060ce <xQueueGenericSend+0x182>
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ce:	f002 f969 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060d2:	1d3a      	adds	r2, r7, #4
 80060d4:	f107 0314 	add.w	r3, r7, #20
 80060d8:	4611      	mov	r1, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 f990 	bl	8007400 <xTaskCheckForTimeOut>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d124      	bne.n	8006130 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e8:	f000 fbe9 	bl	80068be <prvIsQueueFull>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d018      	beq.n	8006124 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	3310      	adds	r3, #16
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 f8b6 	bl	800726c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006102:	f000 fb74 	bl	80067ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006106:	f000 fee5 	bl	8006ed4 <xTaskResumeAll>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	f47f af7c 	bne.w	800600a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006112:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <xQueueGenericSend+0x1f8>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	e772      	b.n	800600a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006126:	f000 fb62 	bl	80067ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800612a:	f000 fed3 	bl	8006ed4 <xTaskResumeAll>
 800612e:	e76c      	b.n	800600a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006132:	f000 fb5c 	bl	80067ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006136:	f000 fecd 	bl	8006ed4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800613a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800613c:	4618      	mov	r0, r3
 800613e:	3738      	adds	r7, #56	; 0x38
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b090      	sub	sp, #64	; 0x40
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <xQueueGenericSendFromISR+0x3c>
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <xQueueGenericSendFromISR+0x40>
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <xQueueGenericSendFromISR+0x42>
 8006188:	2300      	movs	r3, #0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d103      	bne.n	80061b2 <xQueueGenericSendFromISR+0x6a>
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <xQueueGenericSendFromISR+0x6e>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <xQueueGenericSendFromISR+0x70>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	623b      	str	r3, [r7, #32]
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061d2:	f002 f999 	bl	8008508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061d6:	f3ef 8211 	mrs	r2, BASEPRI
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	61fa      	str	r2, [r7, #28]
 80061ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80061ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <xQueueGenericSendFromISR+0xbc>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d12f      	bne.n	8006264 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800620a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800621a:	f000 fa58 	bl	80066ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800621e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d112      	bne.n	800624e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d016      	beq.n	800625e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	3324      	adds	r3, #36	; 0x24
 8006234:	4618      	mov	r0, r3
 8006236:	f001 f869 	bl	800730c <xTaskRemoveFromEventList>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00e      	beq.n	800625e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e007      	b.n	800625e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800624e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006252:	3301      	adds	r3, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	b25a      	sxtb	r2, r3
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800625e:	2301      	movs	r3, #1
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006262:	e001      	b.n	8006268 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006264:	2300      	movs	r3, #0
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006272:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006276:	4618      	mov	r0, r3
 8006278:	3740      	adds	r7, #64	; 0x40
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08c      	sub	sp, #48	; 0x30
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <xQueueReceive+0x30>
	__asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	623b      	str	r3, [r7, #32]
}
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <xQueueReceive+0x3e>
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <xQueueReceive+0x42>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueReceive+0x44>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueReceive+0x5e>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	61fb      	str	r3, [r7, #28]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062de:	f001 f9d7 	bl	8007690 <xTaskGetSchedulerState>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <xQueueReceive+0x6e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <xQueueReceive+0x72>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueReceive+0x74>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xQueueReceive+0x8e>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	61bb      	str	r3, [r7, #24]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800630e:	f002 f819 	bl	8008344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01f      	beq.n	800635e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006322:	f000 fa3e 	bl	80067a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	1e5a      	subs	r2, r3, #1
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00f      	beq.n	8006356 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	3310      	adds	r3, #16
 800633a:	4618      	mov	r0, r3
 800633c:	f000 ffe6 	bl	800730c <xTaskRemoveFromEventList>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006346:	4b3d      	ldr	r3, [pc, #244]	; (800643c <xQueueReceive+0x1bc>)
 8006348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006356:	f002 f825 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 800635a:	2301      	movs	r3, #1
 800635c:	e069      	b.n	8006432 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d103      	bne.n	800636c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006364:	f002 f81e 	bl	80083a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006368:	2300      	movs	r3, #0
 800636a:	e062      	b.n	8006432 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006372:	f107 0310 	add.w	r3, r7, #16
 8006376:	4618      	mov	r0, r3
 8006378:	f001 f82c 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800637c:	2301      	movs	r3, #1
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006380:	f002 f810 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006384:	f000 fd98 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006388:	f001 ffdc 	bl	8008344 <vPortEnterCritical>
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006392:	b25b      	sxtb	r3, r3
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d103      	bne.n	80063a2 <xQueueReceive+0x122>
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063a8:	b25b      	sxtb	r3, r3
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d103      	bne.n	80063b8 <xQueueReceive+0x138>
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b8:	f001 fff4 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063bc:	1d3a      	adds	r2, r7, #4
 80063be:	f107 0310 	add.w	r3, r7, #16
 80063c2:	4611      	mov	r1, r2
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 f81b 	bl	8007400 <xTaskCheckForTimeOut>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d123      	bne.n	8006418 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063d2:	f000 fa5e 	bl	8006892 <prvIsQueueEmpty>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d017      	beq.n	800640c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	3324      	adds	r3, #36	; 0x24
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 ff41 	bl	800726c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ec:	f000 f9ff 	bl	80067ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063f0:	f000 fd70 	bl	8006ed4 <xTaskResumeAll>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d189      	bne.n	800630e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80063fa:	4b10      	ldr	r3, [pc, #64]	; (800643c <xQueueReceive+0x1bc>)
 80063fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	e780      	b.n	800630e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800640c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800640e:	f000 f9ee 	bl	80067ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006412:	f000 fd5f 	bl	8006ed4 <xTaskResumeAll>
 8006416:	e77a      	b.n	800630e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641a:	f000 f9e8 	bl	80067ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800641e:	f000 fd59 	bl	8006ed4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006424:	f000 fa35 	bl	8006892 <prvIsQueueEmpty>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	f43f af6f 	beq.w	800630e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006430:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006432:	4618      	mov	r0, r3
 8006434:	3730      	adds	r7, #48	; 0x30
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	e000ed04 	.word	0xe000ed04

08006440 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08e      	sub	sp, #56	; 0x38
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800644a:	2300      	movs	r3, #0
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	623b      	str	r3, [r7, #32]
}
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	61fb      	str	r3, [r7, #28]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006490:	f001 f8fe 	bl	8007690 <xTaskGetSchedulerState>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <xQueueSemaphoreTake+0x60>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <xQueueSemaphoreTake+0x64>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <xQueueSemaphoreTake+0x66>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10a      	bne.n	80064c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	61bb      	str	r3, [r7, #24]
}
 80064bc:	bf00      	nop
 80064be:	e7fe      	b.n	80064be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064c0:	f001 ff40 	bl	8008344 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d024      	beq.n	800651a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	1e5a      	subs	r2, r3, #1
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80064e0:	f001 fa4c 	bl	800797c <pvTaskIncrementMutexHeldCount>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00f      	beq.n	8006512 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	3310      	adds	r3, #16
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 ff08 	bl	800730c <xTaskRemoveFromEventList>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006502:	4b54      	ldr	r3, [pc, #336]	; (8006654 <xQueueSemaphoreTake+0x214>)
 8006504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006512:	f001 ff47 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 8006516:	2301      	movs	r3, #1
 8006518:	e097      	b.n	800664a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d111      	bne.n	8006544 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	617b      	str	r3, [r7, #20]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800653c:	f001 ff32 	bl	80083a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006540:	2300      	movs	r3, #0
 8006542:	e082      	b.n	800664a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800654a:	f107 030c 	add.w	r3, r7, #12
 800654e:	4618      	mov	r0, r3
 8006550:	f000 ff40 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006554:	2301      	movs	r3, #1
 8006556:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006558:	f001 ff24 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800655c:	f000 fcac 	bl	8006eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006560:	f001 fef0 	bl	8008344 <vPortEnterCritical>
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800656a:	b25b      	sxtb	r3, r3
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006570:	d103      	bne.n	800657a <xQueueSemaphoreTake+0x13a>
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006580:	b25b      	sxtb	r3, r3
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d103      	bne.n	8006590 <xQueueSemaphoreTake+0x150>
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006590:	f001 ff08 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006594:	463a      	mov	r2, r7
 8006596:	f107 030c 	add.w	r3, r7, #12
 800659a:	4611      	mov	r1, r2
 800659c:	4618      	mov	r0, r3
 800659e:	f000 ff2f 	bl	8007400 <xTaskCheckForTimeOut>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d132      	bne.n	800660e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065aa:	f000 f972 	bl	8006892 <prvIsQueueEmpty>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d026      	beq.n	8006602 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80065bc:	f001 fec2 	bl	8008344 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 f881 	bl	80076cc <xTaskPriorityInherit>
 80065ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80065cc:	f001 feea 	bl	80083a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	3324      	adds	r3, #36	; 0x24
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	4611      	mov	r1, r2
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fe47 	bl	800726c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065e0:	f000 f905 	bl	80067ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065e4:	f000 fc76 	bl	8006ed4 <xTaskResumeAll>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f47f af68 	bne.w	80064c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80065f0:	4b18      	ldr	r3, [pc, #96]	; (8006654 <xQueueSemaphoreTake+0x214>)
 80065f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	e75e      	b.n	80064c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006604:	f000 f8f3 	bl	80067ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006608:	f000 fc64 	bl	8006ed4 <xTaskResumeAll>
 800660c:	e758      	b.n	80064c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800660e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006610:	f000 f8ed 	bl	80067ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006614:	f000 fc5e 	bl	8006ed4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800661a:	f000 f93a 	bl	8006892 <prvIsQueueEmpty>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	f43f af4d 	beq.w	80064c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00d      	beq.n	8006648 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800662c:	f001 fe8a 	bl	8008344 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006632:	f000 f834 	bl	800669e <prvGetDisinheritPriorityAfterTimeout>
 8006636:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f91a 	bl	8007878 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006644:	f001 feae 	bl	80083a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006648:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800664a:	4618      	mov	r0, r3
 800664c:	3738      	adds	r7, #56	; 0x38
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <vQueueDelete+0x28>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	60bb      	str	r3, [r7, #8]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f95f 	bl	8006944 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800668c:	2b00      	cmp	r3, #0
 800668e:	d102      	bne.n	8006696 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f002 f845 	bl	8008720 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006696:	bf00      	nop
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e001      	b.n	80066c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80066c0:	68fb      	ldr	r3, [r7, #12]
	}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10d      	bne.n	8006708 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d14d      	bne.n	8006790 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 f84f 	bl	800779c <xTaskPriorityDisinherit>
 80066fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	609a      	str	r2, [r3, #8]
 8006706:	e043      	b.n	8006790 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d119      	bne.n	8006742 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6858      	ldr	r0, [r3, #4]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	461a      	mov	r2, r3
 8006718:	68b9      	ldr	r1, [r7, #8]
 800671a:	f002 fa53 	bl	8008bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	441a      	add	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	d32b      	bcc.n	8006790 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	e026      	b.n	8006790 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	68d8      	ldr	r0, [r3, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	461a      	mov	r2, r3
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	f002 fa39 	bl	8008bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	425b      	negs	r3, r3
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d207      	bcs.n	800677e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	425b      	negs	r3, r3
 8006778:	441a      	add	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d105      	bne.n	8006790 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3b01      	subs	r3, #1
 800678e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006798:	697b      	ldr	r3, [r7, #20]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d018      	beq.n	80067e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d303      	bcc.n	80067d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68d9      	ldr	r1, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	461a      	mov	r2, r3
 80067e0:	6838      	ldr	r0, [r7, #0]
 80067e2:	f002 f9ef 	bl	8008bc4 <memcpy>
	}
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067f6:	f001 fda5 	bl	8008344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006800:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006802:	e011      	b.n	8006828 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d012      	beq.n	8006832 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3324      	adds	r3, #36	; 0x24
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fd7b 	bl	800730c <xTaskRemoveFromEventList>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800681c:	f000 fe52 	bl	80074c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	3b01      	subs	r3, #1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682c:	2b00      	cmp	r3, #0
 800682e:	dce9      	bgt.n	8006804 <prvUnlockQueue+0x16>
 8006830:	e000      	b.n	8006834 <prvUnlockQueue+0x46>
					break;
 8006832:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	22ff      	movs	r2, #255	; 0xff
 8006838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800683c:	f001 fdb2 	bl	80083a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006840:	f001 fd80 	bl	8008344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800684a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800684c:	e011      	b.n	8006872 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d012      	beq.n	800687c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3310      	adds	r3, #16
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fd56 	bl	800730c <xTaskRemoveFromEventList>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006866:	f000 fe2d 	bl	80074c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	3b01      	subs	r3, #1
 800686e:	b2db      	uxtb	r3, r3
 8006870:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	dce9      	bgt.n	800684e <prvUnlockQueue+0x60>
 800687a:	e000      	b.n	800687e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800687c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	22ff      	movs	r2, #255	; 0xff
 8006882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006886:	f001 fd8d 	bl	80083a4 <vPortExitCritical>
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800689a:	f001 fd53 	bl	8008344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068a6:	2301      	movs	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e001      	b.n	80068b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068b0:	f001 fd78 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 80068b4:	68fb      	ldr	r3, [r7, #12]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068c6:	f001 fd3d 	bl	8008344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d102      	bne.n	80068dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068d6:	2301      	movs	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e001      	b.n	80068e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068e0:	f001 fd60 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 80068e4:	68fb      	ldr	r3, [r7, #12]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e014      	b.n	800692a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006900:	4a0f      	ldr	r2, [pc, #60]	; (8006940 <vQueueAddToRegistry+0x50>)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800690c:	490c      	ldr	r1, [pc, #48]	; (8006940 <vQueueAddToRegistry+0x50>)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006916:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <vQueueAddToRegistry+0x50>)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	4413      	add	r3, r2
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006922:	e006      	b.n	8006932 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b07      	cmp	r3, #7
 800692e:	d9e7      	bls.n	8006900 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000ed8 	.word	0x20000ed8

08006944 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e016      	b.n	8006980 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006952:	4a10      	ldr	r2, [pc, #64]	; (8006994 <vQueueUnregisterQueue+0x50>)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4413      	add	r3, r2
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	429a      	cmp	r2, r3
 8006960:	d10b      	bne.n	800697a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006962:	4a0c      	ldr	r2, [pc, #48]	; (8006994 <vQueueUnregisterQueue+0x50>)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2100      	movs	r1, #0
 8006968:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <vQueueUnregisterQueue+0x50>)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4413      	add	r3, r2
 8006974:	2200      	movs	r2, #0
 8006976:	605a      	str	r2, [r3, #4]
				break;
 8006978:	e006      	b.n	8006988 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b07      	cmp	r3, #7
 8006984:	d9e5      	bls.n	8006952 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20000ed8 	.word	0x20000ed8

08006998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069a8:	f001 fccc 	bl	8008344 <vPortEnterCritical>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d103      	bne.n	80069c2 <vQueueWaitForMessageRestricted+0x2a>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ce:	d103      	bne.n	80069d8 <vQueueWaitForMessageRestricted+0x40>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069d8:	f001 fce4 	bl	80083a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	3324      	adds	r3, #36	; 0x24
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fc61 	bl	80072b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f7ff fefb 	bl	80067ee <prvUnlockQueue>
	}
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	; 0x38
 8006a04:	af04      	add	r7, sp, #16
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	623b      	str	r3, [r7, #32]
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61fb      	str	r3, [r7, #28]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a46:	23bc      	movs	r3, #188	; 0xbc
 8006a48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	2bbc      	cmp	r3, #188	; 0xbc
 8006a4e:	d00a      	beq.n	8006a66 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	61bb      	str	r3, [r7, #24]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d01e      	beq.n	8006aac <xTaskCreateStatic+0xac>
 8006a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01b      	beq.n	8006aac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	2202      	movs	r2, #2
 8006a82:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a86:	2300      	movs	r3, #0
 8006a88:	9303      	str	r3, [sp, #12]
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	9302      	str	r3, [sp, #8]
 8006a8e:	f107 0314 	add.w	r3, r7, #20
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f850 	bl	8006b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aa6:	f000 f8f3 	bl	8006c90 <prvAddNewTaskToReadyList>
 8006aaa:	e001      	b.n	8006ab0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ab0:	697b      	ldr	r3, [r7, #20]
	}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3728      	adds	r7, #40	; 0x28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b08c      	sub	sp, #48	; 0x30
 8006abe:	af04      	add	r7, sp, #16
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 fd5a 	bl	8008588 <pvPortMalloc>
 8006ad4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00e      	beq.n	8006afa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006adc:	20bc      	movs	r0, #188	; 0xbc
 8006ade:	f001 fd53 	bl	8008588 <pvPortMalloc>
 8006ae2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30
 8006af0:	e005      	b.n	8006afe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006af2:	6978      	ldr	r0, [r7, #20]
 8006af4:	f001 fe14 	bl	8008720 <vPortFree>
 8006af8:	e001      	b.n	8006afe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d017      	beq.n	8006b34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9303      	str	r3, [sp, #12]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	9302      	str	r3, [sp, #8]
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f80e 	bl	8006b44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b28:	69f8      	ldr	r0, [r7, #28]
 8006b2a:	f000 f8b1 	bl	8006c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	e002      	b.n	8006b3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b34:	f04f 33ff 	mov.w	r3, #4294967295
 8006b38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b088      	sub	sp, #32
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	21a5      	movs	r1, #165	; 0xa5
 8006b5e:	f002 f83f 	bl	8008be0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f023 0307 	bic.w	r3, r3, #7
 8006b7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	617b      	str	r3, [r7, #20]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01f      	beq.n	8006be2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	e012      	b.n	8006bce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	7819      	ldrb	r1, [r3, #0]
 8006bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3334      	adds	r3, #52	; 0x34
 8006bb8:	460a      	mov	r2, r1
 8006bba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d006      	beq.n	8006bd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	2b0f      	cmp	r3, #15
 8006bd2:	d9e9      	bls.n	8006ba8 <prvInitialiseNewTask+0x64>
 8006bd4:	e000      	b.n	8006bd8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006bd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006be0:	e003      	b.n	8006bea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	2b37      	cmp	r3, #55	; 0x37
 8006bee:	d901      	bls.n	8006bf4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bf0:	2337      	movs	r3, #55	; 0x37
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	2200      	movs	r2, #0
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe ff62 	bl	8005ad4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	3318      	adds	r3, #24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe ff5d 	bl	8005ad4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	3354      	adds	r3, #84	; 0x54
 8006c44:	2260      	movs	r2, #96	; 0x60
 8006c46:	2100      	movs	r1, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 ffc9 	bl	8008be0 <memset>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	4a0c      	ldr	r2, [pc, #48]	; (8006c84 <prvInitialiseNewTask+0x140>)
 8006c52:	659a      	str	r2, [r3, #88]	; 0x58
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	4a0c      	ldr	r2, [pc, #48]	; (8006c88 <prvInitialiseNewTask+0x144>)
 8006c58:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	4a0b      	ldr	r2, [pc, #44]	; (8006c8c <prvInitialiseNewTask+0x148>)
 8006c5e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	69b8      	ldr	r0, [r7, #24]
 8006c66:	f001 fa3f 	bl	80080e8 <pxPortInitialiseStack>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c7c:	bf00      	nop
 8006c7e:	3720      	adds	r7, #32
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	08009cd4 	.word	0x08009cd4
 8006c88:	08009cf4 	.word	0x08009cf4
 8006c8c:	08009cb4 	.word	0x08009cb4

08006c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c98:	f001 fb54 	bl	8008344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c9c:	4b2d      	ldr	r3, [pc, #180]	; (8006d54 <prvAddNewTaskToReadyList+0xc4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	4a2c      	ldr	r2, [pc, #176]	; (8006d54 <prvAddNewTaskToReadyList+0xc4>)
 8006ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ca6:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <prvAddNewTaskToReadyList+0xc8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cae:	4a2a      	ldr	r2, [pc, #168]	; (8006d58 <prvAddNewTaskToReadyList+0xc8>)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cb4:	4b27      	ldr	r3, [pc, #156]	; (8006d54 <prvAddNewTaskToReadyList+0xc4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d110      	bne.n	8006cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cbc:	f000 fc26 	bl	800750c <prvInitialiseTaskLists>
 8006cc0:	e00d      	b.n	8006cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cc2:	4b26      	ldr	r3, [pc, #152]	; (8006d5c <prvAddNewTaskToReadyList+0xcc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cca:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <prvAddNewTaskToReadyList+0xc8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d802      	bhi.n	8006cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cd8:	4a1f      	ldr	r2, [pc, #124]	; (8006d58 <prvAddNewTaskToReadyList+0xc8>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cde:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <prvAddNewTaskToReadyList+0xd0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	4a1e      	ldr	r2, [pc, #120]	; (8006d60 <prvAddNewTaskToReadyList+0xd0>)
 8006ce6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <prvAddNewTaskToReadyList+0xd0>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	4b1b      	ldr	r3, [pc, #108]	; (8006d64 <prvAddNewTaskToReadyList+0xd4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d903      	bls.n	8006d04 <prvAddNewTaskToReadyList+0x74>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a18      	ldr	r2, [pc, #96]	; (8006d64 <prvAddNewTaskToReadyList+0xd4>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <prvAddNewTaskToReadyList+0xd8>)
 8006d12:	441a      	add	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe fee7 	bl	8005aee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d20:	f001 fb40 	bl	80083a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d24:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <prvAddNewTaskToReadyList+0xcc>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00e      	beq.n	8006d4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d2c:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <prvAddNewTaskToReadyList+0xc8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d207      	bcs.n	8006d4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d3a:	4b0c      	ldr	r3, [pc, #48]	; (8006d6c <prvAddNewTaskToReadyList+0xdc>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	200013ec 	.word	0x200013ec
 8006d58:	20000f18 	.word	0x20000f18
 8006d5c:	200013f8 	.word	0x200013f8
 8006d60:	20001408 	.word	0x20001408
 8006d64:	200013f4 	.word	0x200013f4
 8006d68:	20000f1c 	.word	0x20000f1c
 8006d6c:	e000ed04 	.word	0xe000ed04

08006d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d017      	beq.n	8006db2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d82:	4b13      	ldr	r3, [pc, #76]	; (8006dd0 <vTaskDelay+0x60>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <vTaskDelay+0x30>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	60bb      	str	r3, [r7, #8]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006da0:	f000 f88a 	bl	8006eb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006da4:	2100      	movs	r1, #0
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fdfc 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dac:	f000 f892 	bl	8006ed4 <xTaskResumeAll>
 8006db0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d107      	bne.n	8006dc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <vTaskDelay+0x64>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20001414 	.word	0x20001414
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08a      	sub	sp, #40	; 0x28
 8006ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006de6:	463a      	mov	r2, r7
 8006de8:	1d39      	adds	r1, r7, #4
 8006dea:	f107 0308 	add.w	r3, r7, #8
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fe1c 	bl	8005a2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	9202      	str	r2, [sp, #8]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	460a      	mov	r2, r1
 8006e06:	4924      	ldr	r1, [pc, #144]	; (8006e98 <vTaskStartScheduler+0xc0>)
 8006e08:	4824      	ldr	r0, [pc, #144]	; (8006e9c <vTaskStartScheduler+0xc4>)
 8006e0a:	f7ff fdf9 	bl	8006a00 <xTaskCreateStatic>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4a23      	ldr	r2, [pc, #140]	; (8006ea0 <vTaskStartScheduler+0xc8>)
 8006e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e14:	4b22      	ldr	r3, [pc, #136]	; (8006ea0 <vTaskStartScheduler+0xc8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	e001      	b.n	8006e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d102      	bne.n	8006e32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e2c:	f000 fe0e 	bl	8007a4c <xTimerCreateTimerTask>
 8006e30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d11b      	bne.n	8006e70 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	613b      	str	r3, [r7, #16]
}
 8006e4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e4c:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <vTaskStartScheduler+0xcc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3354      	adds	r3, #84	; 0x54
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <vTaskStartScheduler+0xd0>)
 8006e54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <vTaskStartScheduler+0xd4>)
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <vTaskStartScheduler+0xd8>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e64:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <vTaskStartScheduler+0xdc>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e6a:	f001 f9c9 	bl	8008200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e6e:	e00e      	b.n	8006e8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e76:	d10a      	bne.n	8006e8e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	60fb      	str	r3, [r7, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <vTaskStartScheduler+0xb4>
}
 8006e8e:	bf00      	nop
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	08009c08 	.word	0x08009c08
 8006e9c:	080074dd 	.word	0x080074dd
 8006ea0:	20001410 	.word	0x20001410
 8006ea4:	20000f18 	.word	0x20000f18
 8006ea8:	20000010 	.word	0x20000010
 8006eac:	2000140c 	.word	0x2000140c
 8006eb0:	200013f8 	.word	0x200013f8
 8006eb4:	200013f0 	.word	0x200013f0

08006eb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <vTaskSuspendAll+0x18>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	4a03      	ldr	r2, [pc, #12]	; (8006ed0 <vTaskSuspendAll+0x18>)
 8006ec4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ec6:	bf00      	nop
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20001414 	.word	0x20001414

08006ed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ee2:	4b42      	ldr	r3, [pc, #264]	; (8006fec <xTaskResumeAll+0x118>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	603b      	str	r3, [r7, #0]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f00:	f001 fa20 	bl	8008344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f04:	4b39      	ldr	r3, [pc, #228]	; (8006fec <xTaskResumeAll+0x118>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	4a38      	ldr	r2, [pc, #224]	; (8006fec <xTaskResumeAll+0x118>)
 8006f0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f0e:	4b37      	ldr	r3, [pc, #220]	; (8006fec <xTaskResumeAll+0x118>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d162      	bne.n	8006fdc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f16:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <xTaskResumeAll+0x11c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d05e      	beq.n	8006fdc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f1e:	e02f      	b.n	8006f80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f20:	4b34      	ldr	r3, [pc, #208]	; (8006ff4 <xTaskResumeAll+0x120>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fe3b 	bl	8005ba8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fe36 	bl	8005ba8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	4b2d      	ldr	r3, [pc, #180]	; (8006ff8 <xTaskResumeAll+0x124>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d903      	bls.n	8006f50 <xTaskResumeAll+0x7c>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <xTaskResumeAll+0x124>)
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <xTaskResumeAll+0x128>)
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f7fe fdc1 	bl	8005aee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f70:	4b23      	ldr	r3, [pc, #140]	; (8007000 <xTaskResumeAll+0x12c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d302      	bcc.n	8006f80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <xTaskResumeAll+0x130>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f80:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <xTaskResumeAll+0x120>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1cb      	bne.n	8006f20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f8e:	f000 fb5f 	bl	8007650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f92:	4b1d      	ldr	r3, [pc, #116]	; (8007008 <xTaskResumeAll+0x134>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d010      	beq.n	8006fc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f9e:	f000 f847 	bl	8007030 <xTaskIncrementTick>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fa8:	4b16      	ldr	r3, [pc, #88]	; (8007004 <xTaskResumeAll+0x130>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f1      	bne.n	8006f9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <xTaskResumeAll+0x134>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fc0:	4b10      	ldr	r3, [pc, #64]	; (8007004 <xTaskResumeAll+0x130>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d009      	beq.n	8006fdc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fcc:	4b0f      	ldr	r3, [pc, #60]	; (800700c <xTaskResumeAll+0x138>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fdc:	f001 f9e2 	bl	80083a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20001414 	.word	0x20001414
 8006ff0:	200013ec 	.word	0x200013ec
 8006ff4:	200013ac 	.word	0x200013ac
 8006ff8:	200013f4 	.word	0x200013f4
 8006ffc:	20000f1c 	.word	0x20000f1c
 8007000:	20000f18 	.word	0x20000f18
 8007004:	20001400 	.word	0x20001400
 8007008:	200013fc 	.word	0x200013fc
 800700c:	e000ed04 	.word	0xe000ed04

08007010 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <xTaskGetTickCount+0x1c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800701c:	687b      	ldr	r3, [r7, #4]
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	200013f0 	.word	0x200013f0

08007030 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703a:	4b4f      	ldr	r3, [pc, #316]	; (8007178 <xTaskIncrementTick+0x148>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f040 808f 	bne.w	8007162 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007044:	4b4d      	ldr	r3, [pc, #308]	; (800717c <xTaskIncrementTick+0x14c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800704c:	4a4b      	ldr	r2, [pc, #300]	; (800717c <xTaskIncrementTick+0x14c>)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d120      	bne.n	800709a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007058:	4b49      	ldr	r3, [pc, #292]	; (8007180 <xTaskIncrementTick+0x150>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <xTaskIncrementTick+0x48>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	603b      	str	r3, [r7, #0]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xTaskIncrementTick+0x46>
 8007078:	4b41      	ldr	r3, [pc, #260]	; (8007180 <xTaskIncrementTick+0x150>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	4b41      	ldr	r3, [pc, #260]	; (8007184 <xTaskIncrementTick+0x154>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a3f      	ldr	r2, [pc, #252]	; (8007180 <xTaskIncrementTick+0x150>)
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4a3f      	ldr	r2, [pc, #252]	; (8007184 <xTaskIncrementTick+0x154>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <xTaskIncrementTick+0x158>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	4a3d      	ldr	r2, [pc, #244]	; (8007188 <xTaskIncrementTick+0x158>)
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	f000 fadb 	bl	8007650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800709a:	4b3c      	ldr	r3, [pc, #240]	; (800718c <xTaskIncrementTick+0x15c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d349      	bcc.n	8007138 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070a4:	4b36      	ldr	r3, [pc, #216]	; (8007180 <xTaskIncrementTick+0x150>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	4b37      	ldr	r3, [pc, #220]	; (800718c <xTaskIncrementTick+0x15c>)
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295
 80070b4:	601a      	str	r2, [r3, #0]
					break;
 80070b6:	e03f      	b.n	8007138 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b8:	4b31      	ldr	r3, [pc, #196]	; (8007180 <xTaskIncrementTick+0x150>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d203      	bcs.n	80070d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070d0:	4a2e      	ldr	r2, [pc, #184]	; (800718c <xTaskIncrementTick+0x15c>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070d6:	e02f      	b.n	8007138 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3304      	adds	r3, #4
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fd63 	bl	8005ba8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3318      	adds	r3, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fe fd5a 	bl	8005ba8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	4b25      	ldr	r3, [pc, #148]	; (8007190 <xTaskIncrementTick+0x160>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d903      	bls.n	8007108 <xTaskIncrementTick+0xd8>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a22      	ldr	r2, [pc, #136]	; (8007190 <xTaskIncrementTick+0x160>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <xTaskIncrementTick+0x164>)
 8007116:	441a      	add	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fe fce5 	bl	8005aee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <xTaskIncrementTick+0x168>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	429a      	cmp	r2, r3
 8007130:	d3b8      	bcc.n	80070a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007132:	2301      	movs	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007136:	e7b5      	b.n	80070a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <xTaskIncrementTick+0x168>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	4915      	ldr	r1, [pc, #84]	; (8007194 <xTaskIncrementTick+0x164>)
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d901      	bls.n	8007154 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007150:	2301      	movs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007154:	4b11      	ldr	r3, [pc, #68]	; (800719c <xTaskIncrementTick+0x16c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d007      	beq.n	800716c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e004      	b.n	800716c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007162:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <xTaskIncrementTick+0x170>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	4a0d      	ldr	r2, [pc, #52]	; (80071a0 <xTaskIncrementTick+0x170>)
 800716a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800716c:	697b      	ldr	r3, [r7, #20]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20001414 	.word	0x20001414
 800717c:	200013f0 	.word	0x200013f0
 8007180:	200013a4 	.word	0x200013a4
 8007184:	200013a8 	.word	0x200013a8
 8007188:	20001404 	.word	0x20001404
 800718c:	2000140c 	.word	0x2000140c
 8007190:	200013f4 	.word	0x200013f4
 8007194:	20000f1c 	.word	0x20000f1c
 8007198:	20000f18 	.word	0x20000f18
 800719c:	20001400 	.word	0x20001400
 80071a0:	200013fc 	.word	0x200013fc

080071a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071aa:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <vTaskSwitchContext+0xb0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071b2:	4b29      	ldr	r3, [pc, #164]	; (8007258 <vTaskSwitchContext+0xb4>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071b8:	e046      	b.n	8007248 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80071ba:	4b27      	ldr	r3, [pc, #156]	; (8007258 <vTaskSwitchContext+0xb4>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c0:	4b26      	ldr	r3, [pc, #152]	; (800725c <vTaskSwitchContext+0xb8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e010      	b.n	80071ea <vTaskSwitchContext+0x46>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <vTaskSwitchContext+0x3e>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	491d      	ldr	r1, [pc, #116]	; (8007260 <vTaskSwitchContext+0xbc>)
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0e4      	beq.n	80071c8 <vTaskSwitchContext+0x24>
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4a15      	ldr	r2, [pc, #84]	; (8007260 <vTaskSwitchContext+0xbc>)
 800720a:	4413      	add	r3, r2
 800720c:	60bb      	str	r3, [r7, #8]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	3308      	adds	r3, #8
 8007220:	429a      	cmp	r2, r3
 8007222:	d104      	bne.n	800722e <vTaskSwitchContext+0x8a>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4a0b      	ldr	r2, [pc, #44]	; (8007264 <vTaskSwitchContext+0xc0>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <vTaskSwitchContext+0xb8>)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800723e:	4b09      	ldr	r3, [pc, #36]	; (8007264 <vTaskSwitchContext+0xc0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3354      	adds	r3, #84	; 0x54
 8007244:	4a08      	ldr	r2, [pc, #32]	; (8007268 <vTaskSwitchContext+0xc4>)
 8007246:	6013      	str	r3, [r2, #0]
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	20001414 	.word	0x20001414
 8007258:	20001400 	.word	0x20001400
 800725c:	200013f4 	.word	0x200013f4
 8007260:	20000f1c 	.word	0x20000f1c
 8007264:	20000f18 	.word	0x20000f18
 8007268:	20000010 	.word	0x20000010

0800726c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	60fb      	str	r3, [r7, #12]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <vTaskPlaceOnEventList+0x44>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3318      	adds	r3, #24
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fe fc4b 	bl	8005b36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072a0:	2101      	movs	r1, #1
 80072a2:	6838      	ldr	r0, [r7, #0]
 80072a4:	f000 fb7e 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000f18 	.word	0x20000f18

080072b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	617b      	str	r3, [r7, #20]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <vTaskPlaceOnEventListRestricted+0x54>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3318      	adds	r3, #24
 80072e2:	4619      	mov	r1, r3
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7fe fc02 	bl	8005aee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072f0:	f04f 33ff 	mov.w	r3, #4294967295
 80072f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	68b8      	ldr	r0, [r7, #8]
 80072fa:	f000 fb53 	bl	80079a4 <prvAddCurrentTaskToDelayedList>
	}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000f18 	.word	0x20000f18

0800730c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60fb      	str	r3, [r7, #12]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3318      	adds	r3, #24
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fc33 	bl	8005ba8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007342:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <xTaskRemoveFromEventList+0xb0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11d      	bne.n	8007386 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3304      	adds	r3, #4
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fc2a 	bl	8005ba8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	4b19      	ldr	r3, [pc, #100]	; (80073c0 <xTaskRemoveFromEventList+0xb4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	429a      	cmp	r2, r3
 800735e:	d903      	bls.n	8007368 <xTaskRemoveFromEventList+0x5c>
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <xTaskRemoveFromEventList+0xb4>)
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4a13      	ldr	r2, [pc, #76]	; (80073c4 <xTaskRemoveFromEventList+0xb8>)
 8007376:	441a      	add	r2, r3
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	3304      	adds	r3, #4
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f7fe fbb5 	bl	8005aee <vListInsertEnd>
 8007384:	e005      	b.n	8007392 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	3318      	adds	r3, #24
 800738a:	4619      	mov	r1, r3
 800738c:	480e      	ldr	r0, [pc, #56]	; (80073c8 <xTaskRemoveFromEventList+0xbc>)
 800738e:	f7fe fbae 	bl	8005aee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007396:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <xTaskRemoveFromEventList+0xc0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	429a      	cmp	r2, r3
 800739e:	d905      	bls.n	80073ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <xTaskRemoveFromEventList+0xc4>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e001      	b.n	80073b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073b0:	697b      	ldr	r3, [r7, #20]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	20001414 	.word	0x20001414
 80073c0:	200013f4 	.word	0x200013f4
 80073c4:	20000f1c 	.word	0x20000f1c
 80073c8:	200013ac 	.word	0x200013ac
 80073cc:	20000f18 	.word	0x20000f18
 80073d0:	20001400 	.word	0x20001400

080073d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <vTaskInternalSetTimeOutState+0x24>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <vTaskInternalSetTimeOutState+0x28>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	20001404 	.word	0x20001404
 80073fc:	200013f0 	.word	0x200013f0

08007400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60fb      	str	r3, [r7, #12]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007442:	f000 ff7f 	bl	8008344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <xTaskCheckForTimeOut+0xbc>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d102      	bne.n	8007466 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	e023      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <xTaskCheckForTimeOut+0xc0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d007      	beq.n	8007482 <xTaskCheckForTimeOut+0x82>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e015      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	429a      	cmp	r2, r3
 800748a:	d20b      	bcs.n	80074a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	1ad2      	subs	r2, r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ff9b 	bl	80073d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	e004      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074aa:	2301      	movs	r3, #1
 80074ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ae:	f000 ff79 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 80074b2:	69fb      	ldr	r3, [r7, #28]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200013f0 	.word	0x200013f0
 80074c0:	20001404 	.word	0x20001404

080074c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <vTaskMissedYield+0x14>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20001400 	.word	0x20001400

080074dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074e4:	f000 f852 	bl	800758c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074e8:	4b06      	ldr	r3, [pc, #24]	; (8007504 <prvIdleTask+0x28>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d9f9      	bls.n	80074e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <prvIdleTask+0x2c>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007500:	e7f0      	b.n	80074e4 <prvIdleTask+0x8>
 8007502:	bf00      	nop
 8007504:	20000f1c 	.word	0x20000f1c
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007512:	2300      	movs	r3, #0
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	e00c      	b.n	8007532 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4a12      	ldr	r2, [pc, #72]	; (800756c <prvInitialiseTaskLists+0x60>)
 8007524:	4413      	add	r3, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fab4 	bl	8005a94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3301      	adds	r3, #1
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b37      	cmp	r3, #55	; 0x37
 8007536:	d9ef      	bls.n	8007518 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007538:	480d      	ldr	r0, [pc, #52]	; (8007570 <prvInitialiseTaskLists+0x64>)
 800753a:	f7fe faab 	bl	8005a94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800753e:	480d      	ldr	r0, [pc, #52]	; (8007574 <prvInitialiseTaskLists+0x68>)
 8007540:	f7fe faa8 	bl	8005a94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007544:	480c      	ldr	r0, [pc, #48]	; (8007578 <prvInitialiseTaskLists+0x6c>)
 8007546:	f7fe faa5 	bl	8005a94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800754a:	480c      	ldr	r0, [pc, #48]	; (800757c <prvInitialiseTaskLists+0x70>)
 800754c:	f7fe faa2 	bl	8005a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007550:	480b      	ldr	r0, [pc, #44]	; (8007580 <prvInitialiseTaskLists+0x74>)
 8007552:	f7fe fa9f 	bl	8005a94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <prvInitialiseTaskLists+0x78>)
 8007558:	4a05      	ldr	r2, [pc, #20]	; (8007570 <prvInitialiseTaskLists+0x64>)
 800755a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <prvInitialiseTaskLists+0x7c>)
 800755e:	4a05      	ldr	r2, [pc, #20]	; (8007574 <prvInitialiseTaskLists+0x68>)
 8007560:	601a      	str	r2, [r3, #0]
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000f1c 	.word	0x20000f1c
 8007570:	2000137c 	.word	0x2000137c
 8007574:	20001390 	.word	0x20001390
 8007578:	200013ac 	.word	0x200013ac
 800757c:	200013c0 	.word	0x200013c0
 8007580:	200013d8 	.word	0x200013d8
 8007584:	200013a4 	.word	0x200013a4
 8007588:	200013a8 	.word	0x200013a8

0800758c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007592:	e019      	b.n	80075c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007594:	f000 fed6 	bl	8008344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007598:	4b10      	ldr	r3, [pc, #64]	; (80075dc <prvCheckTasksWaitingTermination+0x50>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe faff 	bl	8005ba8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <prvCheckTasksWaitingTermination+0x54>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <prvCheckTasksWaitingTermination+0x54>)
 80075b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075be:	f000 fef1 	bl	80083a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f810 	bl	80075e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e1      	bne.n	8007594 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200013c0 	.word	0x200013c0
 80075e0:	200013ec 	.word	0x200013ec
 80075e4:	200013d4 	.word	0x200013d4

080075e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3354      	adds	r3, #84	; 0x54
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 fc5f 	bl	8008eb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007600:	2b00      	cmp	r3, #0
 8007602:	d108      	bne.n	8007616 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	4618      	mov	r0, r3
 800760a:	f001 f889 	bl	8008720 <vPortFree>
				vPortFree( pxTCB );
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 f886 	bl	8008720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007614:	e018      	b.n	8007648 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800761c:	2b01      	cmp	r3, #1
 800761e:	d103      	bne.n	8007628 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 f87d 	bl	8008720 <vPortFree>
	}
 8007626:	e00f      	b.n	8007648 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800762e:	2b02      	cmp	r3, #2
 8007630:	d00a      	beq.n	8007648 <prvDeleteTCB+0x60>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60fb      	str	r3, [r7, #12]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <prvDeleteTCB+0x5e>
	}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007656:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <prvResetNextTaskUnblockTime+0x38>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <prvResetNextTaskUnblockTime+0x3c>)
 8007662:	f04f 32ff 	mov.w	r2, #4294967295
 8007666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007668:	e008      	b.n	800767c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766a:	4b07      	ldr	r3, [pc, #28]	; (8007688 <prvResetNextTaskUnblockTime+0x38>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4a04      	ldr	r2, [pc, #16]	; (800768c <prvResetNextTaskUnblockTime+0x3c>)
 800767a:	6013      	str	r3, [r2, #0]
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	200013a4 	.word	0x200013a4
 800768c:	2000140c 	.word	0x2000140c

08007690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007696:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <xTaskGetSchedulerState+0x34>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800769e:	2301      	movs	r3, #1
 80076a0:	607b      	str	r3, [r7, #4]
 80076a2:	e008      	b.n	80076b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a4:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <xTaskGetSchedulerState+0x38>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076ac:	2302      	movs	r3, #2
 80076ae:	607b      	str	r3, [r7, #4]
 80076b0:	e001      	b.n	80076b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076b2:	2300      	movs	r3, #0
 80076b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076b6:	687b      	ldr	r3, [r7, #4]
	}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	200013f8 	.word	0x200013f8
 80076c8:	20001414 	.word	0x20001414

080076cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d051      	beq.n	8007786 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e6:	4b2a      	ldr	r3, [pc, #168]	; (8007790 <xTaskPriorityInherit+0xc4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d241      	bcs.n	8007774 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	db06      	blt.n	8007706 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f8:	4b25      	ldr	r3, [pc, #148]	; (8007790 <xTaskPriorityInherit+0xc4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	6959      	ldr	r1, [r3, #20]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a1f      	ldr	r2, [pc, #124]	; (8007794 <xTaskPriorityInherit+0xc8>)
 8007718:	4413      	add	r3, r2
 800771a:	4299      	cmp	r1, r3
 800771c:	d122      	bne.n	8007764 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	3304      	adds	r3, #4
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fa40 	bl	8005ba8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007728:	4b19      	ldr	r3, [pc, #100]	; (8007790 <xTaskPriorityInherit+0xc4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007736:	4b18      	ldr	r3, [pc, #96]	; (8007798 <xTaskPriorityInherit+0xcc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d903      	bls.n	8007746 <xTaskPriorityInherit+0x7a>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <xTaskPriorityInherit+0xcc>)
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4a10      	ldr	r2, [pc, #64]	; (8007794 <xTaskPriorityInherit+0xc8>)
 8007754:	441a      	add	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3304      	adds	r3, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f7fe f9c6 	bl	8005aee <vListInsertEnd>
 8007762:	e004      	b.n	800776e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007764:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <xTaskPriorityInherit+0xc4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800776e:	2301      	movs	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	e008      	b.n	8007786 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <xTaskPriorityInherit+0xc4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	429a      	cmp	r2, r3
 8007780:	d201      	bcs.n	8007786 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007782:	2301      	movs	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007786:	68fb      	ldr	r3, [r7, #12]
	}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000f18 	.word	0x20000f18
 8007794:	20000f1c 	.word	0x20000f1c
 8007798:	200013f4 	.word	0x200013f4

0800779c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d056      	beq.n	8007860 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077b2:	4b2e      	ldr	r3, [pc, #184]	; (800786c <xTaskPriorityDisinherit+0xd0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d00a      	beq.n	80077d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	60bb      	str	r3, [r7, #8]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007802:	429a      	cmp	r2, r3
 8007804:	d02c      	beq.n	8007860 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780a:	2b00      	cmp	r3, #0
 800780c:	d128      	bne.n	8007860 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe f9c8 	bl	8005ba8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTaskPriorityDisinherit+0xd4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d903      	bls.n	8007840 <xTaskPriorityDisinherit+0xa4>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <xTaskPriorityDisinherit+0xd4>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4a09      	ldr	r2, [pc, #36]	; (8007874 <xTaskPriorityDisinherit+0xd8>)
 800784e:	441a      	add	r2, r3
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4610      	mov	r0, r2
 8007858:	f7fe f949 	bl	8005aee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007860:	697b      	ldr	r3, [r7, #20]
	}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000f18 	.word	0x20000f18
 8007870:	200013f4 	.word	0x200013f4
 8007874:	20000f1c 	.word	0x20000f1c

08007878 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007886:	2301      	movs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d06a      	beq.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d902      	bls.n	80078be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	61fb      	str	r3, [r7, #28]
 80078bc:	e002      	b.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d04b      	beq.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d146      	bne.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078d8:	4b25      	ldr	r3, [pc, #148]	; (8007970 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d10a      	bne.n	80078f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	60bb      	str	r3, [r7, #8]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	db04      	blt.n	8007916 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	6959      	ldr	r1, [r3, #20]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4a13      	ldr	r2, [pc, #76]	; (8007974 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007926:	4413      	add	r3, r2
 8007928:	4299      	cmp	r1, r3
 800792a:	d11c      	bne.n	8007966 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	3304      	adds	r3, #4
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe f939 	bl	8005ba8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d903      	bls.n	800794a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	4a0c      	ldr	r2, [pc, #48]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4a07      	ldr	r2, [pc, #28]	; (8007974 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007958:	441a      	add	r2, r3
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f7fe f8c4 	bl	8005aee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007966:	bf00      	nop
 8007968:	3720      	adds	r7, #32
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000f18 	.word	0x20000f18
 8007974:	20000f1c 	.word	0x20000f1c
 8007978:	200013f4 	.word	0x200013f4

0800797c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800798e:	3201      	adds	r2, #1
 8007990:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007992:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007994:	681b      	ldr	r3, [r3, #0]
	}
 8007996:	4618      	mov	r0, r3
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	20000f18 	.word	0x20000f18

080079a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079ae:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <prvAddCurrentTaskToDelayedList+0x90>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079b4:	4b20      	ldr	r3, [pc, #128]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3304      	adds	r3, #4
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fe f8f4 	bl	8005ba8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d10a      	bne.n	80079de <prvAddCurrentTaskToDelayedList+0x3a>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ce:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3304      	adds	r3, #4
 80079d4:	4619      	mov	r1, r3
 80079d6:	4819      	ldr	r0, [pc, #100]	; (8007a3c <prvAddCurrentTaskToDelayedList+0x98>)
 80079d8:	f7fe f889 	bl	8005aee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079dc:	e026      	b.n	8007a2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d209      	bcs.n	8007a0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f6:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fe f897 	bl	8005b36 <vListInsert>
}
 8007a08:	e010      	b.n	8007a2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a0a:	4b0e      	ldr	r3, [pc, #56]	; (8007a44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3304      	adds	r3, #4
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f7fe f88d 	bl	8005b36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d202      	bcs.n	8007a2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a26:	4a08      	ldr	r2, [pc, #32]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	6013      	str	r3, [r2, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	200013f0 	.word	0x200013f0
 8007a38:	20000f18 	.word	0x20000f18
 8007a3c:	200013d8 	.word	0x200013d8
 8007a40:	200013a8 	.word	0x200013a8
 8007a44:	200013a4 	.word	0x200013a4
 8007a48:	2000140c 	.word	0x2000140c

08007a4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a56:	f000 fb07 	bl	8008068 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a5a:	4b1c      	ldr	r3, [pc, #112]	; (8007acc <xTimerCreateTimerTask+0x80>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d021      	beq.n	8007aa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a6a:	1d3a      	adds	r2, r7, #4
 8007a6c:	f107 0108 	add.w	r1, r7, #8
 8007a70:	f107 030c 	add.w	r3, r7, #12
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fff3 	bl	8005a60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	9202      	str	r2, [sp, #8]
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	2302      	movs	r3, #2
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	4910      	ldr	r1, [pc, #64]	; (8007ad0 <xTimerCreateTimerTask+0x84>)
 8007a8e:	4811      	ldr	r0, [pc, #68]	; (8007ad4 <xTimerCreateTimerTask+0x88>)
 8007a90:	f7fe ffb6 	bl	8006a00 <xTaskCreateStatic>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <xTimerCreateTimerTask+0x8c>)
 8007a98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <xTimerCreateTimerTask+0x8c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	613b      	str	r3, [r7, #16]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ac2:	697b      	ldr	r3, [r7, #20]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20001448 	.word	0x20001448
 8007ad0:	08009c10 	.word	0x08009c10
 8007ad4:	08007c11 	.word	0x08007c11
 8007ad8:	2000144c 	.word	0x2000144c

08007adc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	; 0x28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	623b      	str	r3, [r7, #32]
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b0a:	4b1a      	ldr	r3, [pc, #104]	; (8007b74 <xTimerGenericCommand+0x98>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d02a      	beq.n	8007b68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b05      	cmp	r3, #5
 8007b22:	dc18      	bgt.n	8007b56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b24:	f7ff fdb4 	bl	8007690 <xTaskGetSchedulerState>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d109      	bne.n	8007b42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <xTimerGenericCommand+0x98>)
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f107 0110 	add.w	r1, r7, #16
 8007b36:	2300      	movs	r3, #0
 8007b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3a:	f7fe fa07 	bl	8005f4c <xQueueGenericSend>
 8007b3e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b40:	e012      	b.n	8007b68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b42:	4b0c      	ldr	r3, [pc, #48]	; (8007b74 <xTimerGenericCommand+0x98>)
 8007b44:	6818      	ldr	r0, [r3, #0]
 8007b46:	f107 0110 	add.w	r1, r7, #16
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f7fe f9fd 	bl	8005f4c <xQueueGenericSend>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24
 8007b54:	e008      	b.n	8007b68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <xTimerGenericCommand+0x98>)
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	f107 0110 	add.w	r1, r7, #16
 8007b5e:	2300      	movs	r3, #0
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	f7fe faf1 	bl	8006148 <xQueueGenericSendFromISR>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3728      	adds	r7, #40	; 0x28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20001448 	.word	0x20001448

08007b78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <prvProcessExpiredTimer+0x94>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe f809 	bl	8005ba8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d022      	beq.n	8007bea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	18d1      	adds	r1, r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	6978      	ldr	r0, [r7, #20]
 8007bb2:	f000 f8d1 	bl	8007d58 <prvInsertTimerInActiveList>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01f      	beq.n	8007bfc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6978      	ldr	r0, [r7, #20]
 8007bc8:	f7ff ff88 	bl	8007adc <xTimerGenericCommand>
 8007bcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d113      	bne.n	8007bfc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf0:	f023 0301 	bic.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	6978      	ldr	r0, [r7, #20]
 8007c02:	4798      	blx	r3
}
 8007c04:	bf00      	nop
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	20001440 	.word	0x20001440

08007c10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 f857 	bl	8007cd0 <prvGetNextExpireTime>
 8007c22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4619      	mov	r1, r3
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f803 	bl	8007c34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c2e:	f000 f8d5 	bl	8007ddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c32:	e7f1      	b.n	8007c18 <prvTimerTask+0x8>

08007c34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c3e:	f7ff f93b 	bl	8006eb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f866 	bl	8007d18 <prvSampleTimeNow>
 8007c4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d130      	bne.n	8007cb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <prvProcessTimerOrBlockTask+0x3c>
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d806      	bhi.n	8007c70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c62:	f7ff f937 	bl	8006ed4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff ff85 	bl	8007b78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c6e:	e024      	b.n	8007cba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d008      	beq.n	8007c88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <prvProcessTimerOrBlockTask+0x90>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <prvProcessTimerOrBlockTask+0x50>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <prvProcessTimerOrBlockTask+0x52>
 8007c84:	2300      	movs	r3, #0
 8007c86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c88:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <prvProcessTimerOrBlockTask+0x94>)
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4619      	mov	r1, r3
 8007c96:	f7fe fe7f 	bl	8006998 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c9a:	f7ff f91b 	bl	8006ed4 <xTaskResumeAll>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ca4:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <prvProcessTimerOrBlockTask+0x98>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
}
 8007cb4:	e001      	b.n	8007cba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cb6:	f7ff f90d 	bl	8006ed4 <xTaskResumeAll>
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20001444 	.word	0x20001444
 8007cc8:	20001448 	.word	0x20001448
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cd8:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <prvGetNextExpireTime+0x44>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <prvGetNextExpireTime+0x16>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	e000      	b.n	8007ce8 <prvGetNextExpireTime+0x18>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cf4:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <prvGetNextExpireTime+0x44>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	e001      	b.n	8007d04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d04:	68fb      	ldr	r3, [r7, #12]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20001440 	.word	0x20001440

08007d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d20:	f7ff f976 	bl	8007010 <xTaskGetTickCount>
 8007d24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <prvSampleTimeNow+0x3c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d205      	bcs.n	8007d3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d30:	f000 f936 	bl	8007fa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d42:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <prvSampleTimeNow+0x3c>)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20001450 	.word	0x20001450

08007d58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d812      	bhi.n	8007da4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d302      	bcc.n	8007d92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e01b      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d92:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <prvInsertTimerInActiveList+0x7c>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	f7fd feca 	bl	8005b36 <vListInsert>
 8007da2:	e012      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d206      	bcs.n	8007dba <prvInsertTimerInActiveList+0x62>
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d302      	bcc.n	8007dba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e007      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dba:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <prvInsertTimerInActiveList+0x80>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fd feb6 	bl	8005b36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007dca:	697b      	ldr	r3, [r7, #20]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20001444 	.word	0x20001444
 8007dd8:	20001440 	.word	0x20001440

08007ddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08e      	sub	sp, #56	; 0x38
 8007de0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007de2:	e0ca      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	da18      	bge.n	8007e1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dea:	1d3b      	adds	r3, r7, #4
 8007dec:	3304      	adds	r3, #4
 8007dee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	61fb      	str	r3, [r7, #28]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e12:	6850      	ldr	r0, [r2, #4]
 8007e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e16:	6892      	ldr	r2, [r2, #8]
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f2c0 80aa 	blt.w	8007f78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d004      	beq.n	8007e3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	3304      	adds	r3, #4
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fd feb7 	bl	8005ba8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e3a:	463b      	mov	r3, r7
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7ff ff6b 	bl	8007d18 <prvSampleTimeNow>
 8007e42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	f200 8097 	bhi.w	8007f7a <prvProcessReceivedCommands+0x19e>
 8007e4c:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <prvProcessReceivedCommands+0x78>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007e7d 	.word	0x08007e7d
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	08007ef1 	.word	0x08007ef1
 8007e64:	08007f05 	.word	0x08007f05
 8007e68:	08007f4f 	.word	0x08007f4f
 8007e6c:	08007e7d 	.word	0x08007e7d
 8007e70:	08007e7d 	.word	0x08007e7d
 8007e74:	08007ef1 	.word	0x08007ef1
 8007e78:	08007f05 	.word	0x08007f05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	18d1      	adds	r1, r2, r3
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e9c:	f7ff ff5c 	bl	8007d58 <prvInsertTimerInActiveList>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d069      	beq.n	8007f7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007eac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d05e      	beq.n	8007f7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	441a      	add	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ece:	f7ff fe05 	bl	8007adc <xTimerGenericCommand>
 8007ed2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d14f      	bne.n	8007f7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61bb      	str	r3, [r7, #24]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef6:	f023 0301 	bic.w	r3, r3, #1
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f02:	e03a      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	617b      	str	r3, [r7, #20]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	18d1      	adds	r1, r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f48:	f7ff ff06 	bl	8007d58 <prvInsertTimerInActiveList>
					break;
 8007f4c:	e015      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5e:	f000 fbdf 	bl	8008720 <vPortFree>
 8007f62:	e00a      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f6a:	f023 0301 	bic.w	r3, r3, #1
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f76:	e000      	b.n	8007f7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007f78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f7a:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <prvProcessReceivedCommands+0x1c0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	1d39      	adds	r1, r7, #4
 8007f80:	2200      	movs	r2, #0
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe f97c 	bl	8006280 <xQueueReceive>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f47f af2a 	bne.w	8007de4 <prvProcessReceivedCommands+0x8>
	}
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	3730      	adds	r7, #48	; 0x30
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20001448 	.word	0x20001448

08007fa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fa6:	e048      	b.n	800803a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fa8:	4b2d      	ldr	r3, [pc, #180]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb2:	4b2b      	ldr	r3, [pc, #172]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fd fdf1 	bl	8005ba8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02e      	beq.n	800803a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d90e      	bls.n	800800c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ffa:	4b19      	ldr	r3, [pc, #100]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3304      	adds	r3, #4
 8008002:	4619      	mov	r1, r3
 8008004:	4610      	mov	r0, r2
 8008006:	f7fd fd96 	bl	8005b36 <vListInsert>
 800800a:	e016      	b.n	800803a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800800c:	2300      	movs	r3, #0
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	2300      	movs	r3, #0
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	2100      	movs	r1, #0
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff fd60 	bl	8007adc <xTimerGenericCommand>
 800801c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	603b      	str	r3, [r7, #0]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <prvSwitchTimerLists+0xc0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1b1      	bne.n	8007fa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008044:	4b06      	ldr	r3, [pc, #24]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <prvSwitchTimerLists+0xc4>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a04      	ldr	r2, [pc, #16]	; (8008060 <prvSwitchTimerLists+0xc0>)
 8008050:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008052:	4a04      	ldr	r2, [pc, #16]	; (8008064 <prvSwitchTimerLists+0xc4>)
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	6013      	str	r3, [r2, #0]
}
 8008058:	bf00      	nop
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	20001440 	.word	0x20001440
 8008064:	20001444 	.word	0x20001444

08008068 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800806e:	f000 f969 	bl	8008344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <prvCheckForValidListAndQueue+0x60>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d120      	bne.n	80080bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800807a:	4814      	ldr	r0, [pc, #80]	; (80080cc <prvCheckForValidListAndQueue+0x64>)
 800807c:	f7fd fd0a 	bl	8005a94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008080:	4813      	ldr	r0, [pc, #76]	; (80080d0 <prvCheckForValidListAndQueue+0x68>)
 8008082:	f7fd fd07 	bl	8005a94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <prvCheckForValidListAndQueue+0x6c>)
 8008088:	4a10      	ldr	r2, [pc, #64]	; (80080cc <prvCheckForValidListAndQueue+0x64>)
 800808a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <prvCheckForValidListAndQueue+0x70>)
 800808e:	4a10      	ldr	r2, [pc, #64]	; (80080d0 <prvCheckForValidListAndQueue+0x68>)
 8008090:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008092:	2300      	movs	r3, #0
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4b11      	ldr	r3, [pc, #68]	; (80080dc <prvCheckForValidListAndQueue+0x74>)
 8008098:	4a11      	ldr	r2, [pc, #68]	; (80080e0 <prvCheckForValidListAndQueue+0x78>)
 800809a:	2110      	movs	r1, #16
 800809c:	200a      	movs	r0, #10
 800809e:	f7fd fe15 	bl	8005ccc <xQueueGenericCreateStatic>
 80080a2:	4603      	mov	r3, r0
 80080a4:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080a8:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080b0:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <prvCheckForValidListAndQueue+0x60>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	490b      	ldr	r1, [pc, #44]	; (80080e4 <prvCheckForValidListAndQueue+0x7c>)
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fc1a 	bl	80068f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080bc:	f000 f972 	bl	80083a4 <vPortExitCritical>
}
 80080c0:	bf00      	nop
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20001448 	.word	0x20001448
 80080cc:	20001418 	.word	0x20001418
 80080d0:	2000142c 	.word	0x2000142c
 80080d4:	20001440 	.word	0x20001440
 80080d8:	20001444 	.word	0x20001444
 80080dc:	200014f4 	.word	0x200014f4
 80080e0:	20001454 	.word	0x20001454
 80080e4:	08009c18 	.word	0x08009c18

080080e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3b04      	subs	r3, #4
 80080f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3b04      	subs	r3, #4
 8008106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3b04      	subs	r3, #4
 8008116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008118:	4a0c      	ldr	r2, [pc, #48]	; (800814c <pxPortInitialiseStack+0x64>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3b14      	subs	r3, #20
 8008122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b04      	subs	r3, #4
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f06f 0202 	mvn.w	r2, #2
 8008136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	3b20      	subs	r3, #32
 800813c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800813e:	68fb      	ldr	r3, [r7, #12]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	08008151 	.word	0x08008151

08008150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <prvTaskExitError+0x54>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d00a      	beq.n	800817a <prvTaskExitError+0x2a>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	60fb      	str	r3, [r7, #12]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <prvTaskExitError+0x28>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	60bb      	str	r3, [r7, #8]
}
 800818c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800818e:	bf00      	nop
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0fc      	beq.n	8008190 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008196:	bf00      	nop
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	2000000c 	.word	0x2000000c
	...

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	4770      	bx	lr
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst2>:
 80081d0:	20000f18 	.word	0x20000f18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081d8:	4808      	ldr	r0, [pc, #32]	; (80081fc <prvPortStartFirstTask+0x24>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8814 	msr	CONTROL, r0
 80081ea:	b662      	cpsie	i
 80081ec:	b661      	cpsie	f
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	df00      	svc	0
 80081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081fa:	bf00      	nop
 80081fc:	e000ed08 	.word	0xe000ed08

08008200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008206:	4b46      	ldr	r3, [pc, #280]	; (8008320 <xPortStartScheduler+0x120>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a46      	ldr	r2, [pc, #280]	; (8008324 <xPortStartScheduler+0x124>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10a      	bne.n	8008226 <xPortStartScheduler+0x26>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	613b      	str	r3, [r7, #16]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008226:	4b3e      	ldr	r3, [pc, #248]	; (8008320 <xPortStartScheduler+0x120>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <xPortStartScheduler+0x128>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d10a      	bne.n	8008246 <xPortStartScheduler+0x46>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60fb      	str	r3, [r7, #12]
}
 8008242:	bf00      	nop
 8008244:	e7fe      	b.n	8008244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008246:	4b39      	ldr	r3, [pc, #228]	; (800832c <xPortStartScheduler+0x12c>)
 8008248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	22ff      	movs	r2, #255	; 0xff
 8008256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008268:	b2da      	uxtb	r2, r3
 800826a:	4b31      	ldr	r3, [pc, #196]	; (8008330 <xPortStartScheduler+0x130>)
 800826c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800826e:	4b31      	ldr	r3, [pc, #196]	; (8008334 <xPortStartScheduler+0x134>)
 8008270:	2207      	movs	r2, #7
 8008272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008274:	e009      	b.n	800828a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008276:	4b2f      	ldr	r3, [pc, #188]	; (8008334 <xPortStartScheduler+0x134>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3b01      	subs	r3, #1
 800827c:	4a2d      	ldr	r2, [pc, #180]	; (8008334 <xPortStartScheduler+0x134>)
 800827e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	b2db      	uxtb	r3, r3
 8008288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d0ef      	beq.n	8008276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008296:	4b27      	ldr	r3, [pc, #156]	; (8008334 <xPortStartScheduler+0x134>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f1c3 0307 	rsb	r3, r3, #7
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d00a      	beq.n	80082b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60bb      	str	r3, [r7, #8]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082b8:	4b1e      	ldr	r3, [pc, #120]	; (8008334 <xPortStartScheduler+0x134>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <xPortStartScheduler+0x134>)
 80082c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082c2:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <xPortStartScheduler+0x134>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ca:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <xPortStartScheduler+0x134>)
 80082cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <xPortStartScheduler+0x138>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a17      	ldr	r2, [pc, #92]	; (8008338 <xPortStartScheduler+0x138>)
 80082dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082e2:	4b15      	ldr	r3, [pc, #84]	; (8008338 <xPortStartScheduler+0x138>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a14      	ldr	r2, [pc, #80]	; (8008338 <xPortStartScheduler+0x138>)
 80082e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082ee:	f000 f8dd 	bl	80084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <xPortStartScheduler+0x13c>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082f8:	f000 f8fc 	bl	80084f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082fc:	4b10      	ldr	r3, [pc, #64]	; (8008340 <xPortStartScheduler+0x140>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <xPortStartScheduler+0x140>)
 8008302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008308:	f7ff ff66 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800830c:	f7fe ff4a 	bl	80071a4 <vTaskSwitchContext>
	prvTaskExitError();
 8008310:	f7ff ff1e 	bl	8008150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	e000ed00 	.word	0xe000ed00
 8008324:	410fc271 	.word	0x410fc271
 8008328:	410fc270 	.word	0x410fc270
 800832c:	e000e400 	.word	0xe000e400
 8008330:	20001544 	.word	0x20001544
 8008334:	20001548 	.word	0x20001548
 8008338:	e000ed20 	.word	0xe000ed20
 800833c:	2000000c 	.word	0x2000000c
 8008340:	e000ef34 	.word	0xe000ef34

08008344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
}
 800835c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800835e:	4b0f      	ldr	r3, [pc, #60]	; (800839c <vPortEnterCritical+0x58>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3301      	adds	r3, #1
 8008364:	4a0d      	ldr	r2, [pc, #52]	; (800839c <vPortEnterCritical+0x58>)
 8008366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008368:	4b0c      	ldr	r3, [pc, #48]	; (800839c <vPortEnterCritical+0x58>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d10f      	bne.n	8008390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <vPortEnterCritical+0x5c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <vPortEnterCritical+0x4c>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	603b      	str	r3, [r7, #0]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <vPortEnterCritical+0x4a>
	}
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	2000000c 	.word	0x2000000c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <vPortExitCritical+0x50>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <vPortExitCritical+0x24>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	607b      	str	r3, [r7, #4]
}
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <vPortExitCritical+0x50>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <vPortExitCritical+0x50>)
 80083d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083d2:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <vPortExitCritical+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d105      	bne.n	80083e6 <vPortExitCritical+0x42>
 80083da:	2300      	movs	r3, #0
 80083dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	f383 8811 	msr	BASEPRI, r3
}
 80083e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	2000000c 	.word	0x2000000c
	...

08008400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008400:	f3ef 8009 	mrs	r0, PSP
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <pxCurrentTCBConst>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f01e 0f10 	tst.w	lr, #16
 8008410:	bf08      	it	eq
 8008412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	6010      	str	r0, [r2, #0]
 800841c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008424:	f380 8811 	msr	BASEPRI, r0
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f7fe feb8 	bl	80071a4 <vTaskSwitchContext>
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	f380 8811 	msr	BASEPRI, r0
 800843c:	bc09      	pop	{r0, r3}
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	6808      	ldr	r0, [r1, #0]
 8008442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	f01e 0f10 	tst.w	lr, #16
 800844a:	bf08      	it	eq
 800844c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008450:	f380 8809 	msr	PSP, r0
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst>:
 8008460:	20000f18 	.word	0x20000f18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008482:	f7fe fdd5 	bl	8007030 <xTaskIncrementTick>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <xPortSysTickHandler+0x40>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
}
 800849e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <vPortSetupTimerInterrupt+0x38>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <vPortSetupTimerInterrupt+0x3c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <vPortSetupTimerInterrupt+0x40>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <vPortSetupTimerInterrupt+0x44>)
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ce:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	e000e010 	.word	0xe000e010
 80084e4:	e000e018 	.word	0xe000e018
 80084e8:	20000000 	.word	0x20000000
 80084ec:	10624dd3 	.word	0x10624dd3
 80084f0:	e000e014 	.word	0xe000e014

080084f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008504 <vPortEnableVFP+0x10>
 80084f8:	6801      	ldr	r1, [r0, #0]
 80084fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084fe:	6001      	str	r1, [r0, #0]
 8008500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008502:	bf00      	nop
 8008504:	e000ed88 	.word	0xe000ed88

08008508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800850e:	f3ef 8305 	mrs	r3, IPSR
 8008512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d914      	bls.n	8008544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800851a:	4a17      	ldr	r2, [pc, #92]	; (8008578 <vPortValidateInterruptPriority+0x70>)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008524:	4b15      	ldr	r3, [pc, #84]	; (800857c <vPortValidateInterruptPriority+0x74>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	7afa      	ldrb	r2, [r7, #11]
 800852a:	429a      	cmp	r2, r3
 800852c:	d20a      	bcs.n	8008544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <vPortValidateInterruptPriority+0x78>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800854c:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <vPortValidateInterruptPriority+0x7c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d90a      	bls.n	800856a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	603b      	str	r3, [r7, #0]
}
 8008566:	bf00      	nop
 8008568:	e7fe      	b.n	8008568 <vPortValidateInterruptPriority+0x60>
	}
 800856a:	bf00      	nop
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	e000e3f0 	.word	0xe000e3f0
 800857c:	20001544 	.word	0x20001544
 8008580:	e000ed0c 	.word	0xe000ed0c
 8008584:	20001548 	.word	0x20001548

08008588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	; 0x28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008594:	f7fe fc90 	bl	8006eb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008598:	4b5b      	ldr	r3, [pc, #364]	; (8008708 <pvPortMalloc+0x180>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085a0:	f000 f920 	bl	80087e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085a4:	4b59      	ldr	r3, [pc, #356]	; (800870c <pvPortMalloc+0x184>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 8093 	bne.w	80086d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01d      	beq.n	80085f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085b8:	2208      	movs	r2, #8
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4413      	add	r3, r2
 80085be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d014      	beq.n	80085f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f023 0307 	bic.w	r3, r3, #7
 80085d0:	3308      	adds	r3, #8
 80085d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <pvPortMalloc+0x6c>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	617b      	str	r3, [r7, #20]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d06e      	beq.n	80086d8 <pvPortMalloc+0x150>
 80085fa:	4b45      	ldr	r3, [pc, #276]	; (8008710 <pvPortMalloc+0x188>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d869      	bhi.n	80086d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008604:	4b43      	ldr	r3, [pc, #268]	; (8008714 <pvPortMalloc+0x18c>)
 8008606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008608:	4b42      	ldr	r3, [pc, #264]	; (8008714 <pvPortMalloc+0x18c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800860e:	e004      	b.n	800861a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d903      	bls.n	800862c <pvPortMalloc+0xa4>
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f1      	bne.n	8008610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800862c:	4b36      	ldr	r3, [pc, #216]	; (8008708 <pvPortMalloc+0x180>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008632:	429a      	cmp	r2, r3
 8008634:	d050      	beq.n	80086d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2208      	movs	r2, #8
 800863c:	4413      	add	r3, r2
 800863e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	2308      	movs	r3, #8
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	429a      	cmp	r2, r3
 8008656:	d91f      	bls.n	8008698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4413      	add	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <pvPortMalloc+0xf8>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	613b      	str	r3, [r7, #16]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	1ad2      	subs	r2, r2, r3
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008692:	69b8      	ldr	r0, [r7, #24]
 8008694:	f000 f908 	bl	80088a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <pvPortMalloc+0x188>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	4a1b      	ldr	r2, [pc, #108]	; (8008710 <pvPortMalloc+0x188>)
 80086a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086a6:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <pvPortMalloc+0x188>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <pvPortMalloc+0x190>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d203      	bcs.n	80086ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086b2:	4b17      	ldr	r3, [pc, #92]	; (8008710 <pvPortMalloc+0x188>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a18      	ldr	r2, [pc, #96]	; (8008718 <pvPortMalloc+0x190>)
 80086b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	4b13      	ldr	r3, [pc, #76]	; (800870c <pvPortMalloc+0x184>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086ce:	4b13      	ldr	r3, [pc, #76]	; (800871c <pvPortMalloc+0x194>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3301      	adds	r3, #1
 80086d4:	4a11      	ldr	r2, [pc, #68]	; (800871c <pvPortMalloc+0x194>)
 80086d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086d8:	f7fe fbfc 	bl	8006ed4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	f003 0307 	and.w	r3, r3, #7
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <pvPortMalloc+0x174>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	60fb      	str	r3, [r7, #12]
}
 80086f8:	bf00      	nop
 80086fa:	e7fe      	b.n	80086fa <pvPortMalloc+0x172>
	return pvReturn;
 80086fc:	69fb      	ldr	r3, [r7, #28]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3728      	adds	r7, #40	; 0x28
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	2000210c 	.word	0x2000210c
 800870c:	20002120 	.word	0x20002120
 8008710:	20002110 	.word	0x20002110
 8008714:	20002104 	.word	0x20002104
 8008718:	20002114 	.word	0x20002114
 800871c:	20002118 	.word	0x20002118

08008720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d04d      	beq.n	80087ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008732:	2308      	movs	r3, #8
 8008734:	425b      	negs	r3, r3
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	4b24      	ldr	r3, [pc, #144]	; (80087d8 <vPortFree+0xb8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4013      	ands	r3, r2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <vPortFree+0x44>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	60fb      	str	r3, [r7, #12]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <vPortFree+0x62>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	60bb      	str	r3, [r7, #8]
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <vPortFree+0xb8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4013      	ands	r3, r2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01e      	beq.n	80087ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11a      	bne.n	80087ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <vPortFree+0xb8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	401a      	ands	r2, r3
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087a8:	f7fe fb86 	bl	8006eb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <vPortFree+0xbc>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4413      	add	r3, r2
 80087b6:	4a09      	ldr	r2, [pc, #36]	; (80087dc <vPortFree+0xbc>)
 80087b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ba:	6938      	ldr	r0, [r7, #16]
 80087bc:	f000 f874 	bl	80088a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <vPortFree+0xc0>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3301      	adds	r3, #1
 80087c6:	4a06      	ldr	r2, [pc, #24]	; (80087e0 <vPortFree+0xc0>)
 80087c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087ca:	f7fe fb83 	bl	8006ed4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087ce:	bf00      	nop
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20002120 	.word	0x20002120
 80087dc:	20002110 	.word	0x20002110
 80087e0:	2000211c 	.word	0x2000211c

080087e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80087ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087f0:	4b27      	ldr	r3, [pc, #156]	; (8008890 <prvHeapInit+0xac>)
 80087f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00c      	beq.n	8008818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3307      	adds	r3, #7
 8008802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <prvHeapInit+0xac>)
 8008814:	4413      	add	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <prvHeapInit+0xb0>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <prvHeapInit+0xb0>)
 8008824:	2200      	movs	r2, #0
 8008826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008830:	2208      	movs	r2, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a15      	ldr	r2, [pc, #84]	; (8008898 <prvHeapInit+0xb4>)
 8008844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <prvHeapInit+0xb4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800884e:	4b12      	ldr	r3, [pc, #72]	; (8008898 <prvHeapInit+0xb4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <prvHeapInit+0xb4>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <prvHeapInit+0xb8>)
 8008872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <prvHeapInit+0xbc>)
 800887a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <prvHeapInit+0xc0>)
 800887e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	2000154c 	.word	0x2000154c
 8008894:	20002104 	.word	0x20002104
 8008898:	2000210c 	.word	0x2000210c
 800889c:	20002114 	.word	0x20002114
 80088a0:	20002110 	.word	0x20002110
 80088a4:	20002120 	.word	0x20002120

080088a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088b0:	4b28      	ldr	r3, [pc, #160]	; (8008954 <prvInsertBlockIntoFreeList+0xac>)
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e002      	b.n	80088bc <prvInsertBlockIntoFreeList+0x14>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d8f7      	bhi.n	80088b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d108      	bne.n	80088ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	441a      	add	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d118      	bne.n	8008930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b15      	ldr	r3, [pc, #84]	; (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d00d      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e008      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008926:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e003      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d002      	beq.n	8008946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20002104 	.word	0x20002104
 8008958:	2000210c 	.word	0x2000210c

0800895c <__errno>:
 800895c:	4b01      	ldr	r3, [pc, #4]	; (8008964 <__errno+0x8>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000010 	.word	0x20000010

08008968 <std>:
 8008968:	2300      	movs	r3, #0
 800896a:	b510      	push	{r4, lr}
 800896c:	4604      	mov	r4, r0
 800896e:	e9c0 3300 	strd	r3, r3, [r0]
 8008972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008976:	6083      	str	r3, [r0, #8]
 8008978:	8181      	strh	r1, [r0, #12]
 800897a:	6643      	str	r3, [r0, #100]	; 0x64
 800897c:	81c2      	strh	r2, [r0, #14]
 800897e:	6183      	str	r3, [r0, #24]
 8008980:	4619      	mov	r1, r3
 8008982:	2208      	movs	r2, #8
 8008984:	305c      	adds	r0, #92	; 0x5c
 8008986:	f000 f92b 	bl	8008be0 <memset>
 800898a:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <std+0x38>)
 800898c:	6263      	str	r3, [r4, #36]	; 0x24
 800898e:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <std+0x3c>)
 8008990:	62a3      	str	r3, [r4, #40]	; 0x28
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <std+0x40>)
 8008994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008996:	4b05      	ldr	r3, [pc, #20]	; (80089ac <std+0x44>)
 8008998:	6224      	str	r4, [r4, #32]
 800899a:	6323      	str	r3, [r4, #48]	; 0x30
 800899c:	bd10      	pop	{r4, pc}
 800899e:	bf00      	nop
 80089a0:	08008fd1 	.word	0x08008fd1
 80089a4:	08008ff3 	.word	0x08008ff3
 80089a8:	0800902b 	.word	0x0800902b
 80089ac:	0800904f 	.word	0x0800904f

080089b0 <_cleanup_r>:
 80089b0:	4901      	ldr	r1, [pc, #4]	; (80089b8 <_cleanup_r+0x8>)
 80089b2:	f000 b8af 	b.w	8008b14 <_fwalk_reent>
 80089b6:	bf00      	nop
 80089b8:	08009329 	.word	0x08009329

080089bc <__sfmoreglue>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	2268      	movs	r2, #104	; 0x68
 80089c0:	1e4d      	subs	r5, r1, #1
 80089c2:	4355      	muls	r5, r2
 80089c4:	460e      	mov	r6, r1
 80089c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089ca:	f000 f97d 	bl	8008cc8 <_malloc_r>
 80089ce:	4604      	mov	r4, r0
 80089d0:	b140      	cbz	r0, 80089e4 <__sfmoreglue+0x28>
 80089d2:	2100      	movs	r1, #0
 80089d4:	e9c0 1600 	strd	r1, r6, [r0]
 80089d8:	300c      	adds	r0, #12
 80089da:	60a0      	str	r0, [r4, #8]
 80089dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089e0:	f000 f8fe 	bl	8008be0 <memset>
 80089e4:	4620      	mov	r0, r4
 80089e6:	bd70      	pop	{r4, r5, r6, pc}

080089e8 <__sfp_lock_acquire>:
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <__sfp_lock_acquire+0x8>)
 80089ea:	f000 b8d8 	b.w	8008b9e <__retarget_lock_acquire_recursive>
 80089ee:	bf00      	nop
 80089f0:	20002125 	.word	0x20002125

080089f4 <__sfp_lock_release>:
 80089f4:	4801      	ldr	r0, [pc, #4]	; (80089fc <__sfp_lock_release+0x8>)
 80089f6:	f000 b8d3 	b.w	8008ba0 <__retarget_lock_release_recursive>
 80089fa:	bf00      	nop
 80089fc:	20002125 	.word	0x20002125

08008a00 <__sinit_lock_acquire>:
 8008a00:	4801      	ldr	r0, [pc, #4]	; (8008a08 <__sinit_lock_acquire+0x8>)
 8008a02:	f000 b8cc 	b.w	8008b9e <__retarget_lock_acquire_recursive>
 8008a06:	bf00      	nop
 8008a08:	20002126 	.word	0x20002126

08008a0c <__sinit_lock_release>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	; (8008a14 <__sinit_lock_release+0x8>)
 8008a0e:	f000 b8c7 	b.w	8008ba0 <__retarget_lock_release_recursive>
 8008a12:	bf00      	nop
 8008a14:	20002126 	.word	0x20002126

08008a18 <__sinit>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	f7ff fff0 	bl	8008a00 <__sinit_lock_acquire>
 8008a20:	69a3      	ldr	r3, [r4, #24]
 8008a22:	b11b      	cbz	r3, 8008a2c <__sinit+0x14>
 8008a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a28:	f7ff bff0 	b.w	8008a0c <__sinit_lock_release>
 8008a2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a30:	6523      	str	r3, [r4, #80]	; 0x50
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <__sinit+0x68>)
 8008a34:	4a13      	ldr	r2, [pc, #76]	; (8008a84 <__sinit+0x6c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	bf04      	itt	eq
 8008a3e:	2301      	moveq	r3, #1
 8008a40:	61a3      	streq	r3, [r4, #24]
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 f820 	bl	8008a88 <__sfp>
 8008a48:	6060      	str	r0, [r4, #4]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f000 f81c 	bl	8008a88 <__sfp>
 8008a50:	60a0      	str	r0, [r4, #8]
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 f818 	bl	8008a88 <__sfp>
 8008a58:	2200      	movs	r2, #0
 8008a5a:	60e0      	str	r0, [r4, #12]
 8008a5c:	2104      	movs	r1, #4
 8008a5e:	6860      	ldr	r0, [r4, #4]
 8008a60:	f7ff ff82 	bl	8008968 <std>
 8008a64:	68a0      	ldr	r0, [r4, #8]
 8008a66:	2201      	movs	r2, #1
 8008a68:	2109      	movs	r1, #9
 8008a6a:	f7ff ff7d 	bl	8008968 <std>
 8008a6e:	68e0      	ldr	r0, [r4, #12]
 8008a70:	2202      	movs	r2, #2
 8008a72:	2112      	movs	r1, #18
 8008a74:	f7ff ff78 	bl	8008968 <std>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	61a3      	str	r3, [r4, #24]
 8008a7c:	e7d2      	b.n	8008a24 <__sinit+0xc>
 8008a7e:	bf00      	nop
 8008a80:	08009d14 	.word	0x08009d14
 8008a84:	080089b1 	.word	0x080089b1

08008a88 <__sfp>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	f7ff ffac 	bl	80089e8 <__sfp_lock_acquire>
 8008a90:	4b1e      	ldr	r3, [pc, #120]	; (8008b0c <__sfp+0x84>)
 8008a92:	681e      	ldr	r6, [r3, #0]
 8008a94:	69b3      	ldr	r3, [r6, #24]
 8008a96:	b913      	cbnz	r3, 8008a9e <__sfp+0x16>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ffbd 	bl	8008a18 <__sinit>
 8008a9e:	3648      	adds	r6, #72	; 0x48
 8008aa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	d503      	bpl.n	8008ab0 <__sfp+0x28>
 8008aa8:	6833      	ldr	r3, [r6, #0]
 8008aaa:	b30b      	cbz	r3, 8008af0 <__sfp+0x68>
 8008aac:	6836      	ldr	r6, [r6, #0]
 8008aae:	e7f7      	b.n	8008aa0 <__sfp+0x18>
 8008ab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ab4:	b9d5      	cbnz	r5, 8008aec <__sfp+0x64>
 8008ab6:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <__sfp+0x88>)
 8008ab8:	60e3      	str	r3, [r4, #12]
 8008aba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008abe:	6665      	str	r5, [r4, #100]	; 0x64
 8008ac0:	f000 f86c 	bl	8008b9c <__retarget_lock_init_recursive>
 8008ac4:	f7ff ff96 	bl	80089f4 <__sfp_lock_release>
 8008ac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008acc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ad0:	6025      	str	r5, [r4, #0]
 8008ad2:	61a5      	str	r5, [r4, #24]
 8008ad4:	2208      	movs	r2, #8
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008adc:	f000 f880 	bl	8008be0 <memset>
 8008ae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ae8:	4620      	mov	r0, r4
 8008aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aec:	3468      	adds	r4, #104	; 0x68
 8008aee:	e7d9      	b.n	8008aa4 <__sfp+0x1c>
 8008af0:	2104      	movs	r1, #4
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff ff62 	bl	80089bc <__sfmoreglue>
 8008af8:	4604      	mov	r4, r0
 8008afa:	6030      	str	r0, [r6, #0]
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d1d5      	bne.n	8008aac <__sfp+0x24>
 8008b00:	f7ff ff78 	bl	80089f4 <__sfp_lock_release>
 8008b04:	230c      	movs	r3, #12
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	e7ee      	b.n	8008ae8 <__sfp+0x60>
 8008b0a:	bf00      	nop
 8008b0c:	08009d14 	.word	0x08009d14
 8008b10:	ffff0001 	.word	0xffff0001

08008b14 <_fwalk_reent>:
 8008b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b18:	4606      	mov	r6, r0
 8008b1a:	4688      	mov	r8, r1
 8008b1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b20:	2700      	movs	r7, #0
 8008b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b26:	f1b9 0901 	subs.w	r9, r9, #1
 8008b2a:	d505      	bpl.n	8008b38 <_fwalk_reent+0x24>
 8008b2c:	6824      	ldr	r4, [r4, #0]
 8008b2e:	2c00      	cmp	r4, #0
 8008b30:	d1f7      	bne.n	8008b22 <_fwalk_reent+0xe>
 8008b32:	4638      	mov	r0, r7
 8008b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b38:	89ab      	ldrh	r3, [r5, #12]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d907      	bls.n	8008b4e <_fwalk_reent+0x3a>
 8008b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b42:	3301      	adds	r3, #1
 8008b44:	d003      	beq.n	8008b4e <_fwalk_reent+0x3a>
 8008b46:	4629      	mov	r1, r5
 8008b48:	4630      	mov	r0, r6
 8008b4a:	47c0      	blx	r8
 8008b4c:	4307      	orrs	r7, r0
 8008b4e:	3568      	adds	r5, #104	; 0x68
 8008b50:	e7e9      	b.n	8008b26 <_fwalk_reent+0x12>
	...

08008b54 <__libc_init_array>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4d0d      	ldr	r5, [pc, #52]	; (8008b8c <__libc_init_array+0x38>)
 8008b58:	4c0d      	ldr	r4, [pc, #52]	; (8008b90 <__libc_init_array+0x3c>)
 8008b5a:	1b64      	subs	r4, r4, r5
 8008b5c:	10a4      	asrs	r4, r4, #2
 8008b5e:	2600      	movs	r6, #0
 8008b60:	42a6      	cmp	r6, r4
 8008b62:	d109      	bne.n	8008b78 <__libc_init_array+0x24>
 8008b64:	4d0b      	ldr	r5, [pc, #44]	; (8008b94 <__libc_init_array+0x40>)
 8008b66:	4c0c      	ldr	r4, [pc, #48]	; (8008b98 <__libc_init_array+0x44>)
 8008b68:	f001 f814 	bl	8009b94 <_init>
 8008b6c:	1b64      	subs	r4, r4, r5
 8008b6e:	10a4      	asrs	r4, r4, #2
 8008b70:	2600      	movs	r6, #0
 8008b72:	42a6      	cmp	r6, r4
 8008b74:	d105      	bne.n	8008b82 <__libc_init_array+0x2e>
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7c:	4798      	blx	r3
 8008b7e:	3601      	adds	r6, #1
 8008b80:	e7ee      	b.n	8008b60 <__libc_init_array+0xc>
 8008b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b86:	4798      	blx	r3
 8008b88:	3601      	adds	r6, #1
 8008b8a:	e7f2      	b.n	8008b72 <__libc_init_array+0x1e>
 8008b8c:	08009d54 	.word	0x08009d54
 8008b90:	08009d54 	.word	0x08009d54
 8008b94:	08009d54 	.word	0x08009d54
 8008b98:	08009d58 	.word	0x08009d58

08008b9c <__retarget_lock_init_recursive>:
 8008b9c:	4770      	bx	lr

08008b9e <__retarget_lock_acquire_recursive>:
 8008b9e:	4770      	bx	lr

08008ba0 <__retarget_lock_release_recursive>:
 8008ba0:	4770      	bx	lr
	...

08008ba4 <malloc>:
 8008ba4:	4b02      	ldr	r3, [pc, #8]	; (8008bb0 <malloc+0xc>)
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	f000 b88d 	b.w	8008cc8 <_malloc_r>
 8008bae:	bf00      	nop
 8008bb0:	20000010 	.word	0x20000010

08008bb4 <free>:
 8008bb4:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <free+0xc>)
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	f000 b819 	b.w	8008bf0 <_free_r>
 8008bbe:	bf00      	nop
 8008bc0:	20000010 	.word	0x20000010

08008bc4 <memcpy>:
 8008bc4:	440a      	add	r2, r1
 8008bc6:	4291      	cmp	r1, r2
 8008bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bcc:	d100      	bne.n	8008bd0 <memcpy+0xc>
 8008bce:	4770      	bx	lr
 8008bd0:	b510      	push	{r4, lr}
 8008bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bda:	4291      	cmp	r1, r2
 8008bdc:	d1f9      	bne.n	8008bd2 <memcpy+0xe>
 8008bde:	bd10      	pop	{r4, pc}

08008be0 <memset>:
 8008be0:	4402      	add	r2, r0
 8008be2:	4603      	mov	r3, r0
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d100      	bne.n	8008bea <memset+0xa>
 8008be8:	4770      	bx	lr
 8008bea:	f803 1b01 	strb.w	r1, [r3], #1
 8008bee:	e7f9      	b.n	8008be4 <memset+0x4>

08008bf0 <_free_r>:
 8008bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bf2:	2900      	cmp	r1, #0
 8008bf4:	d044      	beq.n	8008c80 <_free_r+0x90>
 8008bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bfa:	9001      	str	r0, [sp, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8008c02:	bfb8      	it	lt
 8008c04:	18e4      	addlt	r4, r4, r3
 8008c06:	f000 fc43 	bl	8009490 <__malloc_lock>
 8008c0a:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <_free_r+0x94>)
 8008c0c:	9801      	ldr	r0, [sp, #4]
 8008c0e:	6813      	ldr	r3, [r2, #0]
 8008c10:	b933      	cbnz	r3, 8008c20 <_free_r+0x30>
 8008c12:	6063      	str	r3, [r4, #4]
 8008c14:	6014      	str	r4, [r2, #0]
 8008c16:	b003      	add	sp, #12
 8008c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c1c:	f000 bc3e 	b.w	800949c <__malloc_unlock>
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	d908      	bls.n	8008c36 <_free_r+0x46>
 8008c24:	6825      	ldr	r5, [r4, #0]
 8008c26:	1961      	adds	r1, r4, r5
 8008c28:	428b      	cmp	r3, r1
 8008c2a:	bf01      	itttt	eq
 8008c2c:	6819      	ldreq	r1, [r3, #0]
 8008c2e:	685b      	ldreq	r3, [r3, #4]
 8008c30:	1949      	addeq	r1, r1, r5
 8008c32:	6021      	streq	r1, [r4, #0]
 8008c34:	e7ed      	b.n	8008c12 <_free_r+0x22>
 8008c36:	461a      	mov	r2, r3
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	b10b      	cbz	r3, 8008c40 <_free_r+0x50>
 8008c3c:	42a3      	cmp	r3, r4
 8008c3e:	d9fa      	bls.n	8008c36 <_free_r+0x46>
 8008c40:	6811      	ldr	r1, [r2, #0]
 8008c42:	1855      	adds	r5, r2, r1
 8008c44:	42a5      	cmp	r5, r4
 8008c46:	d10b      	bne.n	8008c60 <_free_r+0x70>
 8008c48:	6824      	ldr	r4, [r4, #0]
 8008c4a:	4421      	add	r1, r4
 8008c4c:	1854      	adds	r4, r2, r1
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	6011      	str	r1, [r2, #0]
 8008c52:	d1e0      	bne.n	8008c16 <_free_r+0x26>
 8008c54:	681c      	ldr	r4, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	6053      	str	r3, [r2, #4]
 8008c5a:	4421      	add	r1, r4
 8008c5c:	6011      	str	r1, [r2, #0]
 8008c5e:	e7da      	b.n	8008c16 <_free_r+0x26>
 8008c60:	d902      	bls.n	8008c68 <_free_r+0x78>
 8008c62:	230c      	movs	r3, #12
 8008c64:	6003      	str	r3, [r0, #0]
 8008c66:	e7d6      	b.n	8008c16 <_free_r+0x26>
 8008c68:	6825      	ldr	r5, [r4, #0]
 8008c6a:	1961      	adds	r1, r4, r5
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	bf04      	itt	eq
 8008c70:	6819      	ldreq	r1, [r3, #0]
 8008c72:	685b      	ldreq	r3, [r3, #4]
 8008c74:	6063      	str	r3, [r4, #4]
 8008c76:	bf04      	itt	eq
 8008c78:	1949      	addeq	r1, r1, r5
 8008c7a:	6021      	streq	r1, [r4, #0]
 8008c7c:	6054      	str	r4, [r2, #4]
 8008c7e:	e7ca      	b.n	8008c16 <_free_r+0x26>
 8008c80:	b003      	add	sp, #12
 8008c82:	bd30      	pop	{r4, r5, pc}
 8008c84:	20002128 	.word	0x20002128

08008c88 <sbrk_aligned>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4e0e      	ldr	r6, [pc, #56]	; (8008cc4 <sbrk_aligned+0x3c>)
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	6831      	ldr	r1, [r6, #0]
 8008c90:	4605      	mov	r5, r0
 8008c92:	b911      	cbnz	r1, 8008c9a <sbrk_aligned+0x12>
 8008c94:	f000 f96c 	bl	8008f70 <_sbrk_r>
 8008c98:	6030      	str	r0, [r6, #0]
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 f967 	bl	8008f70 <_sbrk_r>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	d00a      	beq.n	8008cbc <sbrk_aligned+0x34>
 8008ca6:	1cc4      	adds	r4, r0, #3
 8008ca8:	f024 0403 	bic.w	r4, r4, #3
 8008cac:	42a0      	cmp	r0, r4
 8008cae:	d007      	beq.n	8008cc0 <sbrk_aligned+0x38>
 8008cb0:	1a21      	subs	r1, r4, r0
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f95c 	bl	8008f70 <_sbrk_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d101      	bne.n	8008cc0 <sbrk_aligned+0x38>
 8008cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	2000212c 	.word	0x2000212c

08008cc8 <_malloc_r>:
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	1ccd      	adds	r5, r1, #3
 8008cce:	f025 0503 	bic.w	r5, r5, #3
 8008cd2:	3508      	adds	r5, #8
 8008cd4:	2d0c      	cmp	r5, #12
 8008cd6:	bf38      	it	cc
 8008cd8:	250c      	movcc	r5, #12
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	4607      	mov	r7, r0
 8008cde:	db01      	blt.n	8008ce4 <_malloc_r+0x1c>
 8008ce0:	42a9      	cmp	r1, r5
 8008ce2:	d905      	bls.n	8008cf0 <_malloc_r+0x28>
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	2600      	movs	r6, #0
 8008cea:	4630      	mov	r0, r6
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf0:	4e2e      	ldr	r6, [pc, #184]	; (8008dac <_malloc_r+0xe4>)
 8008cf2:	f000 fbcd 	bl	8009490 <__malloc_lock>
 8008cf6:	6833      	ldr	r3, [r6, #0]
 8008cf8:	461c      	mov	r4, r3
 8008cfa:	bb34      	cbnz	r4, 8008d4a <_malloc_r+0x82>
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff ffc2 	bl	8008c88 <sbrk_aligned>
 8008d04:	1c43      	adds	r3, r0, #1
 8008d06:	4604      	mov	r4, r0
 8008d08:	d14d      	bne.n	8008da6 <_malloc_r+0xde>
 8008d0a:	6834      	ldr	r4, [r6, #0]
 8008d0c:	4626      	mov	r6, r4
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	d140      	bne.n	8008d94 <_malloc_r+0xcc>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	4631      	mov	r1, r6
 8008d16:	4638      	mov	r0, r7
 8008d18:	eb04 0803 	add.w	r8, r4, r3
 8008d1c:	f000 f928 	bl	8008f70 <_sbrk_r>
 8008d20:	4580      	cmp	r8, r0
 8008d22:	d13a      	bne.n	8008d9a <_malloc_r+0xd2>
 8008d24:	6821      	ldr	r1, [r4, #0]
 8008d26:	3503      	adds	r5, #3
 8008d28:	1a6d      	subs	r5, r5, r1
 8008d2a:	f025 0503 	bic.w	r5, r5, #3
 8008d2e:	3508      	adds	r5, #8
 8008d30:	2d0c      	cmp	r5, #12
 8008d32:	bf38      	it	cc
 8008d34:	250c      	movcc	r5, #12
 8008d36:	4629      	mov	r1, r5
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ffa5 	bl	8008c88 <sbrk_aligned>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	d02b      	beq.n	8008d9a <_malloc_r+0xd2>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	442b      	add	r3, r5
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	e00e      	b.n	8008d68 <_malloc_r+0xa0>
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	1b52      	subs	r2, r2, r5
 8008d4e:	d41e      	bmi.n	8008d8e <_malloc_r+0xc6>
 8008d50:	2a0b      	cmp	r2, #11
 8008d52:	d916      	bls.n	8008d82 <_malloc_r+0xba>
 8008d54:	1961      	adds	r1, r4, r5
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	6025      	str	r5, [r4, #0]
 8008d5a:	bf18      	it	ne
 8008d5c:	6059      	strne	r1, [r3, #4]
 8008d5e:	6863      	ldr	r3, [r4, #4]
 8008d60:	bf08      	it	eq
 8008d62:	6031      	streq	r1, [r6, #0]
 8008d64:	5162      	str	r2, [r4, r5]
 8008d66:	604b      	str	r3, [r1, #4]
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f104 060b 	add.w	r6, r4, #11
 8008d6e:	f000 fb95 	bl	800949c <__malloc_unlock>
 8008d72:	f026 0607 	bic.w	r6, r6, #7
 8008d76:	1d23      	adds	r3, r4, #4
 8008d78:	1af2      	subs	r2, r6, r3
 8008d7a:	d0b6      	beq.n	8008cea <_malloc_r+0x22>
 8008d7c:	1b9b      	subs	r3, r3, r6
 8008d7e:	50a3      	str	r3, [r4, r2]
 8008d80:	e7b3      	b.n	8008cea <_malloc_r+0x22>
 8008d82:	6862      	ldr	r2, [r4, #4]
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	bf0c      	ite	eq
 8008d88:	6032      	streq	r2, [r6, #0]
 8008d8a:	605a      	strne	r2, [r3, #4]
 8008d8c:	e7ec      	b.n	8008d68 <_malloc_r+0xa0>
 8008d8e:	4623      	mov	r3, r4
 8008d90:	6864      	ldr	r4, [r4, #4]
 8008d92:	e7b2      	b.n	8008cfa <_malloc_r+0x32>
 8008d94:	4634      	mov	r4, r6
 8008d96:	6876      	ldr	r6, [r6, #4]
 8008d98:	e7b9      	b.n	8008d0e <_malloc_r+0x46>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	603b      	str	r3, [r7, #0]
 8008d9e:	4638      	mov	r0, r7
 8008da0:	f000 fb7c 	bl	800949c <__malloc_unlock>
 8008da4:	e7a1      	b.n	8008cea <_malloc_r+0x22>
 8008da6:	6025      	str	r5, [r4, #0]
 8008da8:	e7de      	b.n	8008d68 <_malloc_r+0xa0>
 8008daa:	bf00      	nop
 8008dac:	20002128 	.word	0x20002128

08008db0 <_puts_r>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	460e      	mov	r6, r1
 8008db4:	4605      	mov	r5, r0
 8008db6:	b118      	cbz	r0, 8008dc0 <_puts_r+0x10>
 8008db8:	6983      	ldr	r3, [r0, #24]
 8008dba:	b90b      	cbnz	r3, 8008dc0 <_puts_r+0x10>
 8008dbc:	f7ff fe2c 	bl	8008a18 <__sinit>
 8008dc0:	69ab      	ldr	r3, [r5, #24]
 8008dc2:	68ac      	ldr	r4, [r5, #8]
 8008dc4:	b913      	cbnz	r3, 8008dcc <_puts_r+0x1c>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f7ff fe26 	bl	8008a18 <__sinit>
 8008dcc:	4b2c      	ldr	r3, [pc, #176]	; (8008e80 <_puts_r+0xd0>)
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	d120      	bne.n	8008e14 <_puts_r+0x64>
 8008dd2:	686c      	ldr	r4, [r5, #4]
 8008dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dd6:	07db      	lsls	r3, r3, #31
 8008dd8:	d405      	bmi.n	8008de6 <_puts_r+0x36>
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	0598      	lsls	r0, r3, #22
 8008dde:	d402      	bmi.n	8008de6 <_puts_r+0x36>
 8008de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008de2:	f7ff fedc 	bl	8008b9e <__retarget_lock_acquire_recursive>
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	0719      	lsls	r1, r3, #28
 8008dea:	d51d      	bpl.n	8008e28 <_puts_r+0x78>
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	b1db      	cbz	r3, 8008e28 <_puts_r+0x78>
 8008df0:	3e01      	subs	r6, #1
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	60a3      	str	r3, [r4, #8]
 8008dfc:	bb39      	cbnz	r1, 8008e4e <_puts_r+0x9e>
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	da38      	bge.n	8008e74 <_puts_r+0xc4>
 8008e02:	4622      	mov	r2, r4
 8008e04:	210a      	movs	r1, #10
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 f926 	bl	8009058 <__swbuf_r>
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	d011      	beq.n	8008e34 <_puts_r+0x84>
 8008e10:	250a      	movs	r5, #10
 8008e12:	e011      	b.n	8008e38 <_puts_r+0x88>
 8008e14:	4b1b      	ldr	r3, [pc, #108]	; (8008e84 <_puts_r+0xd4>)
 8008e16:	429c      	cmp	r4, r3
 8008e18:	d101      	bne.n	8008e1e <_puts_r+0x6e>
 8008e1a:	68ac      	ldr	r4, [r5, #8]
 8008e1c:	e7da      	b.n	8008dd4 <_puts_r+0x24>
 8008e1e:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <_puts_r+0xd8>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	bf08      	it	eq
 8008e24:	68ec      	ldreq	r4, [r5, #12]
 8008e26:	e7d5      	b.n	8008dd4 <_puts_r+0x24>
 8008e28:	4621      	mov	r1, r4
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f978 	bl	8009120 <__swsetup_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d0dd      	beq.n	8008df0 <_puts_r+0x40>
 8008e34:	f04f 35ff 	mov.w	r5, #4294967295
 8008e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e3a:	07da      	lsls	r2, r3, #31
 8008e3c:	d405      	bmi.n	8008e4a <_puts_r+0x9a>
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	059b      	lsls	r3, r3, #22
 8008e42:	d402      	bmi.n	8008e4a <_puts_r+0x9a>
 8008e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e46:	f7ff feab 	bl	8008ba0 <__retarget_lock_release_recursive>
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	da04      	bge.n	8008e5c <_puts_r+0xac>
 8008e52:	69a2      	ldr	r2, [r4, #24]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	dc06      	bgt.n	8008e66 <_puts_r+0xb6>
 8008e58:	290a      	cmp	r1, #10
 8008e5a:	d004      	beq.n	8008e66 <_puts_r+0xb6>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	6022      	str	r2, [r4, #0]
 8008e62:	7019      	strb	r1, [r3, #0]
 8008e64:	e7c5      	b.n	8008df2 <_puts_r+0x42>
 8008e66:	4622      	mov	r2, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f8f5 	bl	8009058 <__swbuf_r>
 8008e6e:	3001      	adds	r0, #1
 8008e70:	d1bf      	bne.n	8008df2 <_puts_r+0x42>
 8008e72:	e7df      	b.n	8008e34 <_puts_r+0x84>
 8008e74:	6823      	ldr	r3, [r4, #0]
 8008e76:	250a      	movs	r5, #10
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	6022      	str	r2, [r4, #0]
 8008e7c:	701d      	strb	r5, [r3, #0]
 8008e7e:	e7db      	b.n	8008e38 <_puts_r+0x88>
 8008e80:	08009cd4 	.word	0x08009cd4
 8008e84:	08009cf4 	.word	0x08009cf4
 8008e88:	08009cb4 	.word	0x08009cb4

08008e8c <puts>:
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <puts+0xc>)
 8008e8e:	4601      	mov	r1, r0
 8008e90:	6818      	ldr	r0, [r3, #0]
 8008e92:	f7ff bf8d 	b.w	8008db0 <_puts_r>
 8008e96:	bf00      	nop
 8008e98:	20000010 	.word	0x20000010

08008e9c <cleanup_glue>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	6809      	ldr	r1, [r1, #0]
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	b109      	cbz	r1, 8008eaa <cleanup_glue+0xe>
 8008ea6:	f7ff fff9 	bl	8008e9c <cleanup_glue>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eb2:	f7ff be9d 	b.w	8008bf0 <_free_r>
	...

08008eb8 <_reclaim_reent>:
 8008eb8:	4b2c      	ldr	r3, [pc, #176]	; (8008f6c <_reclaim_reent+0xb4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4283      	cmp	r3, r0
 8008ebe:	b570      	push	{r4, r5, r6, lr}
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	d051      	beq.n	8008f68 <_reclaim_reent+0xb0>
 8008ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ec6:	b143      	cbz	r3, 8008eda <_reclaim_reent+0x22>
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d14a      	bne.n	8008f64 <_reclaim_reent+0xac>
 8008ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ed0:	6819      	ldr	r1, [r3, #0]
 8008ed2:	b111      	cbz	r1, 8008eda <_reclaim_reent+0x22>
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f7ff fe8b 	bl	8008bf0 <_free_r>
 8008eda:	6961      	ldr	r1, [r4, #20]
 8008edc:	b111      	cbz	r1, 8008ee4 <_reclaim_reent+0x2c>
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f7ff fe86 	bl	8008bf0 <_free_r>
 8008ee4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ee6:	b111      	cbz	r1, 8008eee <_reclaim_reent+0x36>
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f7ff fe81 	bl	8008bf0 <_free_r>
 8008eee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ef0:	b111      	cbz	r1, 8008ef8 <_reclaim_reent+0x40>
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7ff fe7c 	bl	8008bf0 <_free_r>
 8008ef8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008efa:	b111      	cbz	r1, 8008f02 <_reclaim_reent+0x4a>
 8008efc:	4620      	mov	r0, r4
 8008efe:	f7ff fe77 	bl	8008bf0 <_free_r>
 8008f02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f04:	b111      	cbz	r1, 8008f0c <_reclaim_reent+0x54>
 8008f06:	4620      	mov	r0, r4
 8008f08:	f7ff fe72 	bl	8008bf0 <_free_r>
 8008f0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008f0e:	b111      	cbz	r1, 8008f16 <_reclaim_reent+0x5e>
 8008f10:	4620      	mov	r0, r4
 8008f12:	f7ff fe6d 	bl	8008bf0 <_free_r>
 8008f16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f18:	b111      	cbz	r1, 8008f20 <_reclaim_reent+0x68>
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7ff fe68 	bl	8008bf0 <_free_r>
 8008f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f22:	b111      	cbz	r1, 8008f2a <_reclaim_reent+0x72>
 8008f24:	4620      	mov	r0, r4
 8008f26:	f7ff fe63 	bl	8008bf0 <_free_r>
 8008f2a:	69a3      	ldr	r3, [r4, #24]
 8008f2c:	b1e3      	cbz	r3, 8008f68 <_reclaim_reent+0xb0>
 8008f2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f30:	4620      	mov	r0, r4
 8008f32:	4798      	blx	r3
 8008f34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f36:	b1b9      	cbz	r1, 8008f68 <_reclaim_reent+0xb0>
 8008f38:	4620      	mov	r0, r4
 8008f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f3e:	f7ff bfad 	b.w	8008e9c <cleanup_glue>
 8008f42:	5949      	ldr	r1, [r1, r5]
 8008f44:	b941      	cbnz	r1, 8008f58 <_reclaim_reent+0xa0>
 8008f46:	3504      	adds	r5, #4
 8008f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f4a:	2d80      	cmp	r5, #128	; 0x80
 8008f4c:	68d9      	ldr	r1, [r3, #12]
 8008f4e:	d1f8      	bne.n	8008f42 <_reclaim_reent+0x8a>
 8008f50:	4620      	mov	r0, r4
 8008f52:	f7ff fe4d 	bl	8008bf0 <_free_r>
 8008f56:	e7ba      	b.n	8008ece <_reclaim_reent+0x16>
 8008f58:	680e      	ldr	r6, [r1, #0]
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f7ff fe48 	bl	8008bf0 <_free_r>
 8008f60:	4631      	mov	r1, r6
 8008f62:	e7ef      	b.n	8008f44 <_reclaim_reent+0x8c>
 8008f64:	2500      	movs	r5, #0
 8008f66:	e7ef      	b.n	8008f48 <_reclaim_reent+0x90>
 8008f68:	bd70      	pop	{r4, r5, r6, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000010 	.word	0x20000010

08008f70 <_sbrk_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d06      	ldr	r5, [pc, #24]	; (8008f8c <_sbrk_r+0x1c>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	602b      	str	r3, [r5, #0]
 8008f7c:	f7f8 fba4 	bl	80016c8 <_sbrk>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_sbrk_r+0x1a>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_sbrk_r+0x1a>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	20002130 	.word	0x20002130

08008f90 <siprintf>:
 8008f90:	b40e      	push	{r1, r2, r3}
 8008f92:	b500      	push	{lr}
 8008f94:	b09c      	sub	sp, #112	; 0x70
 8008f96:	ab1d      	add	r3, sp, #116	; 0x74
 8008f98:	9002      	str	r0, [sp, #8]
 8008f9a:	9006      	str	r0, [sp, #24]
 8008f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fa0:	4809      	ldr	r0, [pc, #36]	; (8008fc8 <siprintf+0x38>)
 8008fa2:	9107      	str	r1, [sp, #28]
 8008fa4:	9104      	str	r1, [sp, #16]
 8008fa6:	4909      	ldr	r1, [pc, #36]	; (8008fcc <siprintf+0x3c>)
 8008fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fac:	9105      	str	r1, [sp, #20]
 8008fae:	6800      	ldr	r0, [r0, #0]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	a902      	add	r1, sp, #8
 8008fb4:	f000 fad4 	bl	8009560 <_svfiprintf_r>
 8008fb8:	9b02      	ldr	r3, [sp, #8]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	701a      	strb	r2, [r3, #0]
 8008fbe:	b01c      	add	sp, #112	; 0x70
 8008fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc4:	b003      	add	sp, #12
 8008fc6:	4770      	bx	lr
 8008fc8:	20000010 	.word	0x20000010
 8008fcc:	ffff0208 	.word	0xffff0208

08008fd0 <__sread>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	f000 fd56 	bl	8009a88 <_read_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	bfab      	itete	ge
 8008fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fe4:	181b      	addge	r3, r3, r0
 8008fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fea:	bfac      	ite	ge
 8008fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fee:	81a3      	strhlt	r3, [r4, #12]
 8008ff0:	bd10      	pop	{r4, pc}

08008ff2 <__swrite>:
 8008ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	461f      	mov	r7, r3
 8008ff8:	898b      	ldrh	r3, [r1, #12]
 8008ffa:	05db      	lsls	r3, r3, #23
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	4616      	mov	r6, r2
 8009002:	d505      	bpl.n	8009010 <__swrite+0x1e>
 8009004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009008:	2302      	movs	r3, #2
 800900a:	2200      	movs	r2, #0
 800900c:	f000 f9c8 	bl	80093a0 <_lseek_r>
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	4632      	mov	r2, r6
 800901e:	463b      	mov	r3, r7
 8009020:	4628      	mov	r0, r5
 8009022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009026:	f000 b869 	b.w	80090fc <_write_r>

0800902a <__sseek>:
 800902a:	b510      	push	{r4, lr}
 800902c:	460c      	mov	r4, r1
 800902e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009032:	f000 f9b5 	bl	80093a0 <_lseek_r>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	bf15      	itete	ne
 800903c:	6560      	strne	r0, [r4, #84]	; 0x54
 800903e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009046:	81a3      	strheq	r3, [r4, #12]
 8009048:	bf18      	it	ne
 800904a:	81a3      	strhne	r3, [r4, #12]
 800904c:	bd10      	pop	{r4, pc}

0800904e <__sclose>:
 800904e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009052:	f000 b8d3 	b.w	80091fc <_close_r>
	...

08009058 <__swbuf_r>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	460e      	mov	r6, r1
 800905c:	4614      	mov	r4, r2
 800905e:	4605      	mov	r5, r0
 8009060:	b118      	cbz	r0, 800906a <__swbuf_r+0x12>
 8009062:	6983      	ldr	r3, [r0, #24]
 8009064:	b90b      	cbnz	r3, 800906a <__swbuf_r+0x12>
 8009066:	f7ff fcd7 	bl	8008a18 <__sinit>
 800906a:	4b21      	ldr	r3, [pc, #132]	; (80090f0 <__swbuf_r+0x98>)
 800906c:	429c      	cmp	r4, r3
 800906e:	d12b      	bne.n	80090c8 <__swbuf_r+0x70>
 8009070:	686c      	ldr	r4, [r5, #4]
 8009072:	69a3      	ldr	r3, [r4, #24]
 8009074:	60a3      	str	r3, [r4, #8]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	071a      	lsls	r2, r3, #28
 800907a:	d52f      	bpl.n	80090dc <__swbuf_r+0x84>
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b36b      	cbz	r3, 80090dc <__swbuf_r+0x84>
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	6820      	ldr	r0, [r4, #0]
 8009084:	1ac0      	subs	r0, r0, r3
 8009086:	6963      	ldr	r3, [r4, #20]
 8009088:	b2f6      	uxtb	r6, r6
 800908a:	4283      	cmp	r3, r0
 800908c:	4637      	mov	r7, r6
 800908e:	dc04      	bgt.n	800909a <__swbuf_r+0x42>
 8009090:	4621      	mov	r1, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f948 	bl	8009328 <_fflush_r>
 8009098:	bb30      	cbnz	r0, 80090e8 <__swbuf_r+0x90>
 800909a:	68a3      	ldr	r3, [r4, #8]
 800909c:	3b01      	subs	r3, #1
 800909e:	60a3      	str	r3, [r4, #8]
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	701e      	strb	r6, [r3, #0]
 80090a8:	6963      	ldr	r3, [r4, #20]
 80090aa:	3001      	adds	r0, #1
 80090ac:	4283      	cmp	r3, r0
 80090ae:	d004      	beq.n	80090ba <__swbuf_r+0x62>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	07db      	lsls	r3, r3, #31
 80090b4:	d506      	bpl.n	80090c4 <__swbuf_r+0x6c>
 80090b6:	2e0a      	cmp	r6, #10
 80090b8:	d104      	bne.n	80090c4 <__swbuf_r+0x6c>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f933 	bl	8009328 <_fflush_r>
 80090c2:	b988      	cbnz	r0, 80090e8 <__swbuf_r+0x90>
 80090c4:	4638      	mov	r0, r7
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <__swbuf_r+0x9c>)
 80090ca:	429c      	cmp	r4, r3
 80090cc:	d101      	bne.n	80090d2 <__swbuf_r+0x7a>
 80090ce:	68ac      	ldr	r4, [r5, #8]
 80090d0:	e7cf      	b.n	8009072 <__swbuf_r+0x1a>
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <__swbuf_r+0xa0>)
 80090d4:	429c      	cmp	r4, r3
 80090d6:	bf08      	it	eq
 80090d8:	68ec      	ldreq	r4, [r5, #12]
 80090da:	e7ca      	b.n	8009072 <__swbuf_r+0x1a>
 80090dc:	4621      	mov	r1, r4
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 f81e 	bl	8009120 <__swsetup_r>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d0cb      	beq.n	8009080 <__swbuf_r+0x28>
 80090e8:	f04f 37ff 	mov.w	r7, #4294967295
 80090ec:	e7ea      	b.n	80090c4 <__swbuf_r+0x6c>
 80090ee:	bf00      	nop
 80090f0:	08009cd4 	.word	0x08009cd4
 80090f4:	08009cf4 	.word	0x08009cf4
 80090f8:	08009cb4 	.word	0x08009cb4

080090fc <_write_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	; (800911c <_write_r+0x20>)
 8009100:	4604      	mov	r4, r0
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	2200      	movs	r2, #0
 8009108:	602a      	str	r2, [r5, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	f7f8 fa8b 	bl	8001626 <_write>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_write_r+0x1e>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_write_r+0x1e>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20002130 	.word	0x20002130

08009120 <__swsetup_r>:
 8009120:	4b32      	ldr	r3, [pc, #200]	; (80091ec <__swsetup_r+0xcc>)
 8009122:	b570      	push	{r4, r5, r6, lr}
 8009124:	681d      	ldr	r5, [r3, #0]
 8009126:	4606      	mov	r6, r0
 8009128:	460c      	mov	r4, r1
 800912a:	b125      	cbz	r5, 8009136 <__swsetup_r+0x16>
 800912c:	69ab      	ldr	r3, [r5, #24]
 800912e:	b913      	cbnz	r3, 8009136 <__swsetup_r+0x16>
 8009130:	4628      	mov	r0, r5
 8009132:	f7ff fc71 	bl	8008a18 <__sinit>
 8009136:	4b2e      	ldr	r3, [pc, #184]	; (80091f0 <__swsetup_r+0xd0>)
 8009138:	429c      	cmp	r4, r3
 800913a:	d10f      	bne.n	800915c <__swsetup_r+0x3c>
 800913c:	686c      	ldr	r4, [r5, #4]
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009144:	0719      	lsls	r1, r3, #28
 8009146:	d42c      	bmi.n	80091a2 <__swsetup_r+0x82>
 8009148:	06dd      	lsls	r5, r3, #27
 800914a:	d411      	bmi.n	8009170 <__swsetup_r+0x50>
 800914c:	2309      	movs	r3, #9
 800914e:	6033      	str	r3, [r6, #0]
 8009150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	f04f 30ff 	mov.w	r0, #4294967295
 800915a:	e03e      	b.n	80091da <__swsetup_r+0xba>
 800915c:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <__swsetup_r+0xd4>)
 800915e:	429c      	cmp	r4, r3
 8009160:	d101      	bne.n	8009166 <__swsetup_r+0x46>
 8009162:	68ac      	ldr	r4, [r5, #8]
 8009164:	e7eb      	b.n	800913e <__swsetup_r+0x1e>
 8009166:	4b24      	ldr	r3, [pc, #144]	; (80091f8 <__swsetup_r+0xd8>)
 8009168:	429c      	cmp	r4, r3
 800916a:	bf08      	it	eq
 800916c:	68ec      	ldreq	r4, [r5, #12]
 800916e:	e7e6      	b.n	800913e <__swsetup_r+0x1e>
 8009170:	0758      	lsls	r0, r3, #29
 8009172:	d512      	bpl.n	800919a <__swsetup_r+0x7a>
 8009174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009176:	b141      	cbz	r1, 800918a <__swsetup_r+0x6a>
 8009178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800917c:	4299      	cmp	r1, r3
 800917e:	d002      	beq.n	8009186 <__swsetup_r+0x66>
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff fd35 	bl	8008bf0 <_free_r>
 8009186:	2300      	movs	r3, #0
 8009188:	6363      	str	r3, [r4, #52]	; 0x34
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	2300      	movs	r3, #0
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	6923      	ldr	r3, [r4, #16]
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f043 0308 	orr.w	r3, r3, #8
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	6923      	ldr	r3, [r4, #16]
 80091a4:	b94b      	cbnz	r3, 80091ba <__swsetup_r+0x9a>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091b0:	d003      	beq.n	80091ba <__swsetup_r+0x9a>
 80091b2:	4621      	mov	r1, r4
 80091b4:	4630      	mov	r0, r6
 80091b6:	f000 f92b 	bl	8009410 <__smakebuf_r>
 80091ba:	89a0      	ldrh	r0, [r4, #12]
 80091bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091c0:	f010 0301 	ands.w	r3, r0, #1
 80091c4:	d00a      	beq.n	80091dc <__swsetup_r+0xbc>
 80091c6:	2300      	movs	r3, #0
 80091c8:	60a3      	str	r3, [r4, #8]
 80091ca:	6963      	ldr	r3, [r4, #20]
 80091cc:	425b      	negs	r3, r3
 80091ce:	61a3      	str	r3, [r4, #24]
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	b943      	cbnz	r3, 80091e6 <__swsetup_r+0xc6>
 80091d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091d8:	d1ba      	bne.n	8009150 <__swsetup_r+0x30>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	0781      	lsls	r1, r0, #30
 80091de:	bf58      	it	pl
 80091e0:	6963      	ldrpl	r3, [r4, #20]
 80091e2:	60a3      	str	r3, [r4, #8]
 80091e4:	e7f4      	b.n	80091d0 <__swsetup_r+0xb0>
 80091e6:	2000      	movs	r0, #0
 80091e8:	e7f7      	b.n	80091da <__swsetup_r+0xba>
 80091ea:	bf00      	nop
 80091ec:	20000010 	.word	0x20000010
 80091f0:	08009cd4 	.word	0x08009cd4
 80091f4:	08009cf4 	.word	0x08009cf4
 80091f8:	08009cb4 	.word	0x08009cb4

080091fc <_close_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	; (8009218 <_close_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f8 fa29 	bl	800165e <_close>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_close_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_close_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20002130 	.word	0x20002130

0800921c <__sflush_r>:
 800921c:	898a      	ldrh	r2, [r1, #12]
 800921e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009222:	4605      	mov	r5, r0
 8009224:	0710      	lsls	r0, r2, #28
 8009226:	460c      	mov	r4, r1
 8009228:	d458      	bmi.n	80092dc <__sflush_r+0xc0>
 800922a:	684b      	ldr	r3, [r1, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dc05      	bgt.n	800923c <__sflush_r+0x20>
 8009230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009232:	2b00      	cmp	r3, #0
 8009234:	dc02      	bgt.n	800923c <__sflush_r+0x20>
 8009236:	2000      	movs	r0, #0
 8009238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800923c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800923e:	2e00      	cmp	r6, #0
 8009240:	d0f9      	beq.n	8009236 <__sflush_r+0x1a>
 8009242:	2300      	movs	r3, #0
 8009244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009248:	682f      	ldr	r7, [r5, #0]
 800924a:	602b      	str	r3, [r5, #0]
 800924c:	d032      	beq.n	80092b4 <__sflush_r+0x98>
 800924e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009250:	89a3      	ldrh	r3, [r4, #12]
 8009252:	075a      	lsls	r2, r3, #29
 8009254:	d505      	bpl.n	8009262 <__sflush_r+0x46>
 8009256:	6863      	ldr	r3, [r4, #4]
 8009258:	1ac0      	subs	r0, r0, r3
 800925a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800925c:	b10b      	cbz	r3, 8009262 <__sflush_r+0x46>
 800925e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009260:	1ac0      	subs	r0, r0, r3
 8009262:	2300      	movs	r3, #0
 8009264:	4602      	mov	r2, r0
 8009266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009268:	6a21      	ldr	r1, [r4, #32]
 800926a:	4628      	mov	r0, r5
 800926c:	47b0      	blx	r6
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	d106      	bne.n	8009282 <__sflush_r+0x66>
 8009274:	6829      	ldr	r1, [r5, #0]
 8009276:	291d      	cmp	r1, #29
 8009278:	d82c      	bhi.n	80092d4 <__sflush_r+0xb8>
 800927a:	4a2a      	ldr	r2, [pc, #168]	; (8009324 <__sflush_r+0x108>)
 800927c:	40ca      	lsrs	r2, r1
 800927e:	07d6      	lsls	r6, r2, #31
 8009280:	d528      	bpl.n	80092d4 <__sflush_r+0xb8>
 8009282:	2200      	movs	r2, #0
 8009284:	6062      	str	r2, [r4, #4]
 8009286:	04d9      	lsls	r1, r3, #19
 8009288:	6922      	ldr	r2, [r4, #16]
 800928a:	6022      	str	r2, [r4, #0]
 800928c:	d504      	bpl.n	8009298 <__sflush_r+0x7c>
 800928e:	1c42      	adds	r2, r0, #1
 8009290:	d101      	bne.n	8009296 <__sflush_r+0x7a>
 8009292:	682b      	ldr	r3, [r5, #0]
 8009294:	b903      	cbnz	r3, 8009298 <__sflush_r+0x7c>
 8009296:	6560      	str	r0, [r4, #84]	; 0x54
 8009298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800929a:	602f      	str	r7, [r5, #0]
 800929c:	2900      	cmp	r1, #0
 800929e:	d0ca      	beq.n	8009236 <__sflush_r+0x1a>
 80092a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a4:	4299      	cmp	r1, r3
 80092a6:	d002      	beq.n	80092ae <__sflush_r+0x92>
 80092a8:	4628      	mov	r0, r5
 80092aa:	f7ff fca1 	bl	8008bf0 <_free_r>
 80092ae:	2000      	movs	r0, #0
 80092b0:	6360      	str	r0, [r4, #52]	; 0x34
 80092b2:	e7c1      	b.n	8009238 <__sflush_r+0x1c>
 80092b4:	6a21      	ldr	r1, [r4, #32]
 80092b6:	2301      	movs	r3, #1
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b0      	blx	r6
 80092bc:	1c41      	adds	r1, r0, #1
 80092be:	d1c7      	bne.n	8009250 <__sflush_r+0x34>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0c4      	beq.n	8009250 <__sflush_r+0x34>
 80092c6:	2b1d      	cmp	r3, #29
 80092c8:	d001      	beq.n	80092ce <__sflush_r+0xb2>
 80092ca:	2b16      	cmp	r3, #22
 80092cc:	d101      	bne.n	80092d2 <__sflush_r+0xb6>
 80092ce:	602f      	str	r7, [r5, #0]
 80092d0:	e7b1      	b.n	8009236 <__sflush_r+0x1a>
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	e7ad      	b.n	8009238 <__sflush_r+0x1c>
 80092dc:	690f      	ldr	r7, [r1, #16]
 80092de:	2f00      	cmp	r7, #0
 80092e0:	d0a9      	beq.n	8009236 <__sflush_r+0x1a>
 80092e2:	0793      	lsls	r3, r2, #30
 80092e4:	680e      	ldr	r6, [r1, #0]
 80092e6:	bf08      	it	eq
 80092e8:	694b      	ldreq	r3, [r1, #20]
 80092ea:	600f      	str	r7, [r1, #0]
 80092ec:	bf18      	it	ne
 80092ee:	2300      	movne	r3, #0
 80092f0:	eba6 0807 	sub.w	r8, r6, r7
 80092f4:	608b      	str	r3, [r1, #8]
 80092f6:	f1b8 0f00 	cmp.w	r8, #0
 80092fa:	dd9c      	ble.n	8009236 <__sflush_r+0x1a>
 80092fc:	6a21      	ldr	r1, [r4, #32]
 80092fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009300:	4643      	mov	r3, r8
 8009302:	463a      	mov	r2, r7
 8009304:	4628      	mov	r0, r5
 8009306:	47b0      	blx	r6
 8009308:	2800      	cmp	r0, #0
 800930a:	dc06      	bgt.n	800931a <__sflush_r+0xfe>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	e78e      	b.n	8009238 <__sflush_r+0x1c>
 800931a:	4407      	add	r7, r0
 800931c:	eba8 0800 	sub.w	r8, r8, r0
 8009320:	e7e9      	b.n	80092f6 <__sflush_r+0xda>
 8009322:	bf00      	nop
 8009324:	20400001 	.word	0x20400001

08009328 <_fflush_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	690b      	ldr	r3, [r1, #16]
 800932c:	4605      	mov	r5, r0
 800932e:	460c      	mov	r4, r1
 8009330:	b913      	cbnz	r3, 8009338 <_fflush_r+0x10>
 8009332:	2500      	movs	r5, #0
 8009334:	4628      	mov	r0, r5
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	b118      	cbz	r0, 8009342 <_fflush_r+0x1a>
 800933a:	6983      	ldr	r3, [r0, #24]
 800933c:	b90b      	cbnz	r3, 8009342 <_fflush_r+0x1a>
 800933e:	f7ff fb6b 	bl	8008a18 <__sinit>
 8009342:	4b14      	ldr	r3, [pc, #80]	; (8009394 <_fflush_r+0x6c>)
 8009344:	429c      	cmp	r4, r3
 8009346:	d11b      	bne.n	8009380 <_fflush_r+0x58>
 8009348:	686c      	ldr	r4, [r5, #4]
 800934a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0ef      	beq.n	8009332 <_fflush_r+0xa>
 8009352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009354:	07d0      	lsls	r0, r2, #31
 8009356:	d404      	bmi.n	8009362 <_fflush_r+0x3a>
 8009358:	0599      	lsls	r1, r3, #22
 800935a:	d402      	bmi.n	8009362 <_fflush_r+0x3a>
 800935c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800935e:	f7ff fc1e 	bl	8008b9e <__retarget_lock_acquire_recursive>
 8009362:	4628      	mov	r0, r5
 8009364:	4621      	mov	r1, r4
 8009366:	f7ff ff59 	bl	800921c <__sflush_r>
 800936a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800936c:	07da      	lsls	r2, r3, #31
 800936e:	4605      	mov	r5, r0
 8009370:	d4e0      	bmi.n	8009334 <_fflush_r+0xc>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	059b      	lsls	r3, r3, #22
 8009376:	d4dd      	bmi.n	8009334 <_fflush_r+0xc>
 8009378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800937a:	f7ff fc11 	bl	8008ba0 <__retarget_lock_release_recursive>
 800937e:	e7d9      	b.n	8009334 <_fflush_r+0xc>
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <_fflush_r+0x70>)
 8009382:	429c      	cmp	r4, r3
 8009384:	d101      	bne.n	800938a <_fflush_r+0x62>
 8009386:	68ac      	ldr	r4, [r5, #8]
 8009388:	e7df      	b.n	800934a <_fflush_r+0x22>
 800938a:	4b04      	ldr	r3, [pc, #16]	; (800939c <_fflush_r+0x74>)
 800938c:	429c      	cmp	r4, r3
 800938e:	bf08      	it	eq
 8009390:	68ec      	ldreq	r4, [r5, #12]
 8009392:	e7da      	b.n	800934a <_fflush_r+0x22>
 8009394:	08009cd4 	.word	0x08009cd4
 8009398:	08009cf4 	.word	0x08009cf4
 800939c:	08009cb4 	.word	0x08009cb4

080093a0 <_lseek_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d07      	ldr	r5, [pc, #28]	; (80093c0 <_lseek_r+0x20>)
 80093a4:	4604      	mov	r4, r0
 80093a6:	4608      	mov	r0, r1
 80093a8:	4611      	mov	r1, r2
 80093aa:	2200      	movs	r2, #0
 80093ac:	602a      	str	r2, [r5, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f7f8 f97c 	bl	80016ac <_lseek>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_lseek_r+0x1e>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_lseek_r+0x1e>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20002130 	.word	0x20002130

080093c4 <__swhatbuf_r>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	460e      	mov	r6, r1
 80093c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093cc:	2900      	cmp	r1, #0
 80093ce:	b096      	sub	sp, #88	; 0x58
 80093d0:	4614      	mov	r4, r2
 80093d2:	461d      	mov	r5, r3
 80093d4:	da08      	bge.n	80093e8 <__swhatbuf_r+0x24>
 80093d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	602a      	str	r2, [r5, #0]
 80093de:	061a      	lsls	r2, r3, #24
 80093e0:	d410      	bmi.n	8009404 <__swhatbuf_r+0x40>
 80093e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e6:	e00e      	b.n	8009406 <__swhatbuf_r+0x42>
 80093e8:	466a      	mov	r2, sp
 80093ea:	f000 fb5f 	bl	8009aac <_fstat_r>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	dbf1      	blt.n	80093d6 <__swhatbuf_r+0x12>
 80093f2:	9a01      	ldr	r2, [sp, #4]
 80093f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093fc:	425a      	negs	r2, r3
 80093fe:	415a      	adcs	r2, r3
 8009400:	602a      	str	r2, [r5, #0]
 8009402:	e7ee      	b.n	80093e2 <__swhatbuf_r+0x1e>
 8009404:	2340      	movs	r3, #64	; 0x40
 8009406:	2000      	movs	r0, #0
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	b016      	add	sp, #88	; 0x58
 800940c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009410 <__smakebuf_r>:
 8009410:	898b      	ldrh	r3, [r1, #12]
 8009412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009414:	079d      	lsls	r5, r3, #30
 8009416:	4606      	mov	r6, r0
 8009418:	460c      	mov	r4, r1
 800941a:	d507      	bpl.n	800942c <__smakebuf_r+0x1c>
 800941c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	2301      	movs	r3, #1
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	b002      	add	sp, #8
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	ab01      	add	r3, sp, #4
 800942e:	466a      	mov	r2, sp
 8009430:	f7ff ffc8 	bl	80093c4 <__swhatbuf_r>
 8009434:	9900      	ldr	r1, [sp, #0]
 8009436:	4605      	mov	r5, r0
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff fc45 	bl	8008cc8 <_malloc_r>
 800943e:	b948      	cbnz	r0, 8009454 <__smakebuf_r+0x44>
 8009440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009444:	059a      	lsls	r2, r3, #22
 8009446:	d4ef      	bmi.n	8009428 <__smakebuf_r+0x18>
 8009448:	f023 0303 	bic.w	r3, r3, #3
 800944c:	f043 0302 	orr.w	r3, r3, #2
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	e7e3      	b.n	800941c <__smakebuf_r+0xc>
 8009454:	4b0d      	ldr	r3, [pc, #52]	; (800948c <__smakebuf_r+0x7c>)
 8009456:	62b3      	str	r3, [r6, #40]	; 0x28
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	6020      	str	r0, [r4, #0]
 800945c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	9b00      	ldr	r3, [sp, #0]
 8009464:	6163      	str	r3, [r4, #20]
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	6120      	str	r0, [r4, #16]
 800946a:	b15b      	cbz	r3, 8009484 <__smakebuf_r+0x74>
 800946c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009470:	4630      	mov	r0, r6
 8009472:	f000 fb2d 	bl	8009ad0 <_isatty_r>
 8009476:	b128      	cbz	r0, 8009484 <__smakebuf_r+0x74>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	f023 0303 	bic.w	r3, r3, #3
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	81a3      	strh	r3, [r4, #12]
 8009484:	89a0      	ldrh	r0, [r4, #12]
 8009486:	4305      	orrs	r5, r0
 8009488:	81a5      	strh	r5, [r4, #12]
 800948a:	e7cd      	b.n	8009428 <__smakebuf_r+0x18>
 800948c:	080089b1 	.word	0x080089b1

08009490 <__malloc_lock>:
 8009490:	4801      	ldr	r0, [pc, #4]	; (8009498 <__malloc_lock+0x8>)
 8009492:	f7ff bb84 	b.w	8008b9e <__retarget_lock_acquire_recursive>
 8009496:	bf00      	nop
 8009498:	20002124 	.word	0x20002124

0800949c <__malloc_unlock>:
 800949c:	4801      	ldr	r0, [pc, #4]	; (80094a4 <__malloc_unlock+0x8>)
 800949e:	f7ff bb7f 	b.w	8008ba0 <__retarget_lock_release_recursive>
 80094a2:	bf00      	nop
 80094a4:	20002124 	.word	0x20002124

080094a8 <__ssputs_r>:
 80094a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ac:	688e      	ldr	r6, [r1, #8]
 80094ae:	429e      	cmp	r6, r3
 80094b0:	4682      	mov	sl, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	4690      	mov	r8, r2
 80094b6:	461f      	mov	r7, r3
 80094b8:	d838      	bhi.n	800952c <__ssputs_r+0x84>
 80094ba:	898a      	ldrh	r2, [r1, #12]
 80094bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094c0:	d032      	beq.n	8009528 <__ssputs_r+0x80>
 80094c2:	6825      	ldr	r5, [r4, #0]
 80094c4:	6909      	ldr	r1, [r1, #16]
 80094c6:	eba5 0901 	sub.w	r9, r5, r1
 80094ca:	6965      	ldr	r5, [r4, #20]
 80094cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d4:	3301      	adds	r3, #1
 80094d6:	444b      	add	r3, r9
 80094d8:	106d      	asrs	r5, r5, #1
 80094da:	429d      	cmp	r5, r3
 80094dc:	bf38      	it	cc
 80094de:	461d      	movcc	r5, r3
 80094e0:	0553      	lsls	r3, r2, #21
 80094e2:	d531      	bpl.n	8009548 <__ssputs_r+0xa0>
 80094e4:	4629      	mov	r1, r5
 80094e6:	f7ff fbef 	bl	8008cc8 <_malloc_r>
 80094ea:	4606      	mov	r6, r0
 80094ec:	b950      	cbnz	r0, 8009504 <__ssputs_r+0x5c>
 80094ee:	230c      	movs	r3, #12
 80094f0:	f8ca 3000 	str.w	r3, [sl]
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009504:	6921      	ldr	r1, [r4, #16]
 8009506:	464a      	mov	r2, r9
 8009508:	f7ff fb5c 	bl	8008bc4 <memcpy>
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009516:	81a3      	strh	r3, [r4, #12]
 8009518:	6126      	str	r6, [r4, #16]
 800951a:	6165      	str	r5, [r4, #20]
 800951c:	444e      	add	r6, r9
 800951e:	eba5 0509 	sub.w	r5, r5, r9
 8009522:	6026      	str	r6, [r4, #0]
 8009524:	60a5      	str	r5, [r4, #8]
 8009526:	463e      	mov	r6, r7
 8009528:	42be      	cmp	r6, r7
 800952a:	d900      	bls.n	800952e <__ssputs_r+0x86>
 800952c:	463e      	mov	r6, r7
 800952e:	6820      	ldr	r0, [r4, #0]
 8009530:	4632      	mov	r2, r6
 8009532:	4641      	mov	r1, r8
 8009534:	f000 fadc 	bl	8009af0 <memmove>
 8009538:	68a3      	ldr	r3, [r4, #8]
 800953a:	1b9b      	subs	r3, r3, r6
 800953c:	60a3      	str	r3, [r4, #8]
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	4433      	add	r3, r6
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	2000      	movs	r0, #0
 8009546:	e7db      	b.n	8009500 <__ssputs_r+0x58>
 8009548:	462a      	mov	r2, r5
 800954a:	f000 faeb 	bl	8009b24 <_realloc_r>
 800954e:	4606      	mov	r6, r0
 8009550:	2800      	cmp	r0, #0
 8009552:	d1e1      	bne.n	8009518 <__ssputs_r+0x70>
 8009554:	6921      	ldr	r1, [r4, #16]
 8009556:	4650      	mov	r0, sl
 8009558:	f7ff fb4a 	bl	8008bf0 <_free_r>
 800955c:	e7c7      	b.n	80094ee <__ssputs_r+0x46>
	...

08009560 <_svfiprintf_r>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	4698      	mov	r8, r3
 8009566:	898b      	ldrh	r3, [r1, #12]
 8009568:	061b      	lsls	r3, r3, #24
 800956a:	b09d      	sub	sp, #116	; 0x74
 800956c:	4607      	mov	r7, r0
 800956e:	460d      	mov	r5, r1
 8009570:	4614      	mov	r4, r2
 8009572:	d50e      	bpl.n	8009592 <_svfiprintf_r+0x32>
 8009574:	690b      	ldr	r3, [r1, #16]
 8009576:	b963      	cbnz	r3, 8009592 <_svfiprintf_r+0x32>
 8009578:	2140      	movs	r1, #64	; 0x40
 800957a:	f7ff fba5 	bl	8008cc8 <_malloc_r>
 800957e:	6028      	str	r0, [r5, #0]
 8009580:	6128      	str	r0, [r5, #16]
 8009582:	b920      	cbnz	r0, 800958e <_svfiprintf_r+0x2e>
 8009584:	230c      	movs	r3, #12
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	f04f 30ff 	mov.w	r0, #4294967295
 800958c:	e0d1      	b.n	8009732 <_svfiprintf_r+0x1d2>
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	616b      	str	r3, [r5, #20]
 8009592:	2300      	movs	r3, #0
 8009594:	9309      	str	r3, [sp, #36]	; 0x24
 8009596:	2320      	movs	r3, #32
 8009598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800959c:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a0:	2330      	movs	r3, #48	; 0x30
 80095a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800974c <_svfiprintf_r+0x1ec>
 80095a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095aa:	f04f 0901 	mov.w	r9, #1
 80095ae:	4623      	mov	r3, r4
 80095b0:	469a      	mov	sl, r3
 80095b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b6:	b10a      	cbz	r2, 80095bc <_svfiprintf_r+0x5c>
 80095b8:	2a25      	cmp	r2, #37	; 0x25
 80095ba:	d1f9      	bne.n	80095b0 <_svfiprintf_r+0x50>
 80095bc:	ebba 0b04 	subs.w	fp, sl, r4
 80095c0:	d00b      	beq.n	80095da <_svfiprintf_r+0x7a>
 80095c2:	465b      	mov	r3, fp
 80095c4:	4622      	mov	r2, r4
 80095c6:	4629      	mov	r1, r5
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ff6d 	bl	80094a8 <__ssputs_r>
 80095ce:	3001      	adds	r0, #1
 80095d0:	f000 80aa 	beq.w	8009728 <_svfiprintf_r+0x1c8>
 80095d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d6:	445a      	add	r2, fp
 80095d8:	9209      	str	r2, [sp, #36]	; 0x24
 80095da:	f89a 3000 	ldrb.w	r3, [sl]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 80a2 	beq.w	8009728 <_svfiprintf_r+0x1c8>
 80095e4:	2300      	movs	r3, #0
 80095e6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ee:	f10a 0a01 	add.w	sl, sl, #1
 80095f2:	9304      	str	r3, [sp, #16]
 80095f4:	9307      	str	r3, [sp, #28]
 80095f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095fa:	931a      	str	r3, [sp, #104]	; 0x68
 80095fc:	4654      	mov	r4, sl
 80095fe:	2205      	movs	r2, #5
 8009600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009604:	4851      	ldr	r0, [pc, #324]	; (800974c <_svfiprintf_r+0x1ec>)
 8009606:	f7f6 fde3 	bl	80001d0 <memchr>
 800960a:	9a04      	ldr	r2, [sp, #16]
 800960c:	b9d8      	cbnz	r0, 8009646 <_svfiprintf_r+0xe6>
 800960e:	06d0      	lsls	r0, r2, #27
 8009610:	bf44      	itt	mi
 8009612:	2320      	movmi	r3, #32
 8009614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009618:	0711      	lsls	r1, r2, #28
 800961a:	bf44      	itt	mi
 800961c:	232b      	movmi	r3, #43	; 0x2b
 800961e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009622:	f89a 3000 	ldrb.w	r3, [sl]
 8009626:	2b2a      	cmp	r3, #42	; 0x2a
 8009628:	d015      	beq.n	8009656 <_svfiprintf_r+0xf6>
 800962a:	9a07      	ldr	r2, [sp, #28]
 800962c:	4654      	mov	r4, sl
 800962e:	2000      	movs	r0, #0
 8009630:	f04f 0c0a 	mov.w	ip, #10
 8009634:	4621      	mov	r1, r4
 8009636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800963a:	3b30      	subs	r3, #48	; 0x30
 800963c:	2b09      	cmp	r3, #9
 800963e:	d94e      	bls.n	80096de <_svfiprintf_r+0x17e>
 8009640:	b1b0      	cbz	r0, 8009670 <_svfiprintf_r+0x110>
 8009642:	9207      	str	r2, [sp, #28]
 8009644:	e014      	b.n	8009670 <_svfiprintf_r+0x110>
 8009646:	eba0 0308 	sub.w	r3, r0, r8
 800964a:	fa09 f303 	lsl.w	r3, r9, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	9304      	str	r3, [sp, #16]
 8009652:	46a2      	mov	sl, r4
 8009654:	e7d2      	b.n	80095fc <_svfiprintf_r+0x9c>
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	1d19      	adds	r1, r3, #4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	9103      	str	r1, [sp, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	bfbb      	ittet	lt
 8009662:	425b      	neglt	r3, r3
 8009664:	f042 0202 	orrlt.w	r2, r2, #2
 8009668:	9307      	strge	r3, [sp, #28]
 800966a:	9307      	strlt	r3, [sp, #28]
 800966c:	bfb8      	it	lt
 800966e:	9204      	strlt	r2, [sp, #16]
 8009670:	7823      	ldrb	r3, [r4, #0]
 8009672:	2b2e      	cmp	r3, #46	; 0x2e
 8009674:	d10c      	bne.n	8009690 <_svfiprintf_r+0x130>
 8009676:	7863      	ldrb	r3, [r4, #1]
 8009678:	2b2a      	cmp	r3, #42	; 0x2a
 800967a:	d135      	bne.n	80096e8 <_svfiprintf_r+0x188>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	1d1a      	adds	r2, r3, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	9203      	str	r2, [sp, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfb8      	it	lt
 8009688:	f04f 33ff 	movlt.w	r3, #4294967295
 800968c:	3402      	adds	r4, #2
 800968e:	9305      	str	r3, [sp, #20]
 8009690:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800975c <_svfiprintf_r+0x1fc>
 8009694:	7821      	ldrb	r1, [r4, #0]
 8009696:	2203      	movs	r2, #3
 8009698:	4650      	mov	r0, sl
 800969a:	f7f6 fd99 	bl	80001d0 <memchr>
 800969e:	b140      	cbz	r0, 80096b2 <_svfiprintf_r+0x152>
 80096a0:	2340      	movs	r3, #64	; 0x40
 80096a2:	eba0 000a 	sub.w	r0, r0, sl
 80096a6:	fa03 f000 	lsl.w	r0, r3, r0
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	4303      	orrs	r3, r0
 80096ae:	3401      	adds	r4, #1
 80096b0:	9304      	str	r3, [sp, #16]
 80096b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b6:	4826      	ldr	r0, [pc, #152]	; (8009750 <_svfiprintf_r+0x1f0>)
 80096b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096bc:	2206      	movs	r2, #6
 80096be:	f7f6 fd87 	bl	80001d0 <memchr>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d038      	beq.n	8009738 <_svfiprintf_r+0x1d8>
 80096c6:	4b23      	ldr	r3, [pc, #140]	; (8009754 <_svfiprintf_r+0x1f4>)
 80096c8:	bb1b      	cbnz	r3, 8009712 <_svfiprintf_r+0x1b2>
 80096ca:	9b03      	ldr	r3, [sp, #12]
 80096cc:	3307      	adds	r3, #7
 80096ce:	f023 0307 	bic.w	r3, r3, #7
 80096d2:	3308      	adds	r3, #8
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	4433      	add	r3, r6
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	e767      	b.n	80095ae <_svfiprintf_r+0x4e>
 80096de:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e2:	460c      	mov	r4, r1
 80096e4:	2001      	movs	r0, #1
 80096e6:	e7a5      	b.n	8009634 <_svfiprintf_r+0xd4>
 80096e8:	2300      	movs	r3, #0
 80096ea:	3401      	adds	r4, #1
 80096ec:	9305      	str	r3, [sp, #20]
 80096ee:	4619      	mov	r1, r3
 80096f0:	f04f 0c0a 	mov.w	ip, #10
 80096f4:	4620      	mov	r0, r4
 80096f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fa:	3a30      	subs	r2, #48	; 0x30
 80096fc:	2a09      	cmp	r2, #9
 80096fe:	d903      	bls.n	8009708 <_svfiprintf_r+0x1a8>
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0c5      	beq.n	8009690 <_svfiprintf_r+0x130>
 8009704:	9105      	str	r1, [sp, #20]
 8009706:	e7c3      	b.n	8009690 <_svfiprintf_r+0x130>
 8009708:	fb0c 2101 	mla	r1, ip, r1, r2
 800970c:	4604      	mov	r4, r0
 800970e:	2301      	movs	r3, #1
 8009710:	e7f0      	b.n	80096f4 <_svfiprintf_r+0x194>
 8009712:	ab03      	add	r3, sp, #12
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	462a      	mov	r2, r5
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <_svfiprintf_r+0x1f8>)
 800971a:	a904      	add	r1, sp, #16
 800971c:	4638      	mov	r0, r7
 800971e:	f3af 8000 	nop.w
 8009722:	1c42      	adds	r2, r0, #1
 8009724:	4606      	mov	r6, r0
 8009726:	d1d6      	bne.n	80096d6 <_svfiprintf_r+0x176>
 8009728:	89ab      	ldrh	r3, [r5, #12]
 800972a:	065b      	lsls	r3, r3, #25
 800972c:	f53f af2c 	bmi.w	8009588 <_svfiprintf_r+0x28>
 8009730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009732:	b01d      	add	sp, #116	; 0x74
 8009734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009738:	ab03      	add	r3, sp, #12
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	462a      	mov	r2, r5
 800973e:	4b06      	ldr	r3, [pc, #24]	; (8009758 <_svfiprintf_r+0x1f8>)
 8009740:	a904      	add	r1, sp, #16
 8009742:	4638      	mov	r0, r7
 8009744:	f000 f87a 	bl	800983c <_printf_i>
 8009748:	e7eb      	b.n	8009722 <_svfiprintf_r+0x1c2>
 800974a:	bf00      	nop
 800974c:	08009d18 	.word	0x08009d18
 8009750:	08009d22 	.word	0x08009d22
 8009754:	00000000 	.word	0x00000000
 8009758:	080094a9 	.word	0x080094a9
 800975c:	08009d1e 	.word	0x08009d1e

08009760 <_printf_common>:
 8009760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009764:	4616      	mov	r6, r2
 8009766:	4699      	mov	r9, r3
 8009768:	688a      	ldr	r2, [r1, #8]
 800976a:	690b      	ldr	r3, [r1, #16]
 800976c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009770:	4293      	cmp	r3, r2
 8009772:	bfb8      	it	lt
 8009774:	4613      	movlt	r3, r2
 8009776:	6033      	str	r3, [r6, #0]
 8009778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800977c:	4607      	mov	r7, r0
 800977e:	460c      	mov	r4, r1
 8009780:	b10a      	cbz	r2, 8009786 <_printf_common+0x26>
 8009782:	3301      	adds	r3, #1
 8009784:	6033      	str	r3, [r6, #0]
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	0699      	lsls	r1, r3, #26
 800978a:	bf42      	ittt	mi
 800978c:	6833      	ldrmi	r3, [r6, #0]
 800978e:	3302      	addmi	r3, #2
 8009790:	6033      	strmi	r3, [r6, #0]
 8009792:	6825      	ldr	r5, [r4, #0]
 8009794:	f015 0506 	ands.w	r5, r5, #6
 8009798:	d106      	bne.n	80097a8 <_printf_common+0x48>
 800979a:	f104 0a19 	add.w	sl, r4, #25
 800979e:	68e3      	ldr	r3, [r4, #12]
 80097a0:	6832      	ldr	r2, [r6, #0]
 80097a2:	1a9b      	subs	r3, r3, r2
 80097a4:	42ab      	cmp	r3, r5
 80097a6:	dc26      	bgt.n	80097f6 <_printf_common+0x96>
 80097a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097ac:	1e13      	subs	r3, r2, #0
 80097ae:	6822      	ldr	r2, [r4, #0]
 80097b0:	bf18      	it	ne
 80097b2:	2301      	movne	r3, #1
 80097b4:	0692      	lsls	r2, r2, #26
 80097b6:	d42b      	bmi.n	8009810 <_printf_common+0xb0>
 80097b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097bc:	4649      	mov	r1, r9
 80097be:	4638      	mov	r0, r7
 80097c0:	47c0      	blx	r8
 80097c2:	3001      	adds	r0, #1
 80097c4:	d01e      	beq.n	8009804 <_printf_common+0xa4>
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	68e5      	ldr	r5, [r4, #12]
 80097ca:	6832      	ldr	r2, [r6, #0]
 80097cc:	f003 0306 	and.w	r3, r3, #6
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	bf08      	it	eq
 80097d4:	1aad      	subeq	r5, r5, r2
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	6922      	ldr	r2, [r4, #16]
 80097da:	bf0c      	ite	eq
 80097dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097e0:	2500      	movne	r5, #0
 80097e2:	4293      	cmp	r3, r2
 80097e4:	bfc4      	itt	gt
 80097e6:	1a9b      	subgt	r3, r3, r2
 80097e8:	18ed      	addgt	r5, r5, r3
 80097ea:	2600      	movs	r6, #0
 80097ec:	341a      	adds	r4, #26
 80097ee:	42b5      	cmp	r5, r6
 80097f0:	d11a      	bne.n	8009828 <_printf_common+0xc8>
 80097f2:	2000      	movs	r0, #0
 80097f4:	e008      	b.n	8009808 <_printf_common+0xa8>
 80097f6:	2301      	movs	r3, #1
 80097f8:	4652      	mov	r2, sl
 80097fa:	4649      	mov	r1, r9
 80097fc:	4638      	mov	r0, r7
 80097fe:	47c0      	blx	r8
 8009800:	3001      	adds	r0, #1
 8009802:	d103      	bne.n	800980c <_printf_common+0xac>
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980c:	3501      	adds	r5, #1
 800980e:	e7c6      	b.n	800979e <_printf_common+0x3e>
 8009810:	18e1      	adds	r1, r4, r3
 8009812:	1c5a      	adds	r2, r3, #1
 8009814:	2030      	movs	r0, #48	; 0x30
 8009816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800981a:	4422      	add	r2, r4
 800981c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009824:	3302      	adds	r3, #2
 8009826:	e7c7      	b.n	80097b8 <_printf_common+0x58>
 8009828:	2301      	movs	r3, #1
 800982a:	4622      	mov	r2, r4
 800982c:	4649      	mov	r1, r9
 800982e:	4638      	mov	r0, r7
 8009830:	47c0      	blx	r8
 8009832:	3001      	adds	r0, #1
 8009834:	d0e6      	beq.n	8009804 <_printf_common+0xa4>
 8009836:	3601      	adds	r6, #1
 8009838:	e7d9      	b.n	80097ee <_printf_common+0x8e>
	...

0800983c <_printf_i>:
 800983c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009840:	7e0f      	ldrb	r7, [r1, #24]
 8009842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009844:	2f78      	cmp	r7, #120	; 0x78
 8009846:	4691      	mov	r9, r2
 8009848:	4680      	mov	r8, r0
 800984a:	460c      	mov	r4, r1
 800984c:	469a      	mov	sl, r3
 800984e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009852:	d807      	bhi.n	8009864 <_printf_i+0x28>
 8009854:	2f62      	cmp	r7, #98	; 0x62
 8009856:	d80a      	bhi.n	800986e <_printf_i+0x32>
 8009858:	2f00      	cmp	r7, #0
 800985a:	f000 80d8 	beq.w	8009a0e <_printf_i+0x1d2>
 800985e:	2f58      	cmp	r7, #88	; 0x58
 8009860:	f000 80a3 	beq.w	80099aa <_printf_i+0x16e>
 8009864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800986c:	e03a      	b.n	80098e4 <_printf_i+0xa8>
 800986e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009872:	2b15      	cmp	r3, #21
 8009874:	d8f6      	bhi.n	8009864 <_printf_i+0x28>
 8009876:	a101      	add	r1, pc, #4	; (adr r1, 800987c <_printf_i+0x40>)
 8009878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800987c:	080098d5 	.word	0x080098d5
 8009880:	080098e9 	.word	0x080098e9
 8009884:	08009865 	.word	0x08009865
 8009888:	08009865 	.word	0x08009865
 800988c:	08009865 	.word	0x08009865
 8009890:	08009865 	.word	0x08009865
 8009894:	080098e9 	.word	0x080098e9
 8009898:	08009865 	.word	0x08009865
 800989c:	08009865 	.word	0x08009865
 80098a0:	08009865 	.word	0x08009865
 80098a4:	08009865 	.word	0x08009865
 80098a8:	080099f5 	.word	0x080099f5
 80098ac:	08009919 	.word	0x08009919
 80098b0:	080099d7 	.word	0x080099d7
 80098b4:	08009865 	.word	0x08009865
 80098b8:	08009865 	.word	0x08009865
 80098bc:	08009a17 	.word	0x08009a17
 80098c0:	08009865 	.word	0x08009865
 80098c4:	08009919 	.word	0x08009919
 80098c8:	08009865 	.word	0x08009865
 80098cc:	08009865 	.word	0x08009865
 80098d0:	080099df 	.word	0x080099df
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	1d1a      	adds	r2, r3, #4
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	602a      	str	r2, [r5, #0]
 80098dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098e4:	2301      	movs	r3, #1
 80098e6:	e0a3      	b.n	8009a30 <_printf_i+0x1f4>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	6829      	ldr	r1, [r5, #0]
 80098ec:	0606      	lsls	r6, r0, #24
 80098ee:	f101 0304 	add.w	r3, r1, #4
 80098f2:	d50a      	bpl.n	800990a <_printf_i+0xce>
 80098f4:	680e      	ldr	r6, [r1, #0]
 80098f6:	602b      	str	r3, [r5, #0]
 80098f8:	2e00      	cmp	r6, #0
 80098fa:	da03      	bge.n	8009904 <_printf_i+0xc8>
 80098fc:	232d      	movs	r3, #45	; 0x2d
 80098fe:	4276      	negs	r6, r6
 8009900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009904:	485e      	ldr	r0, [pc, #376]	; (8009a80 <_printf_i+0x244>)
 8009906:	230a      	movs	r3, #10
 8009908:	e019      	b.n	800993e <_printf_i+0x102>
 800990a:	680e      	ldr	r6, [r1, #0]
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009912:	bf18      	it	ne
 8009914:	b236      	sxthne	r6, r6
 8009916:	e7ef      	b.n	80098f8 <_printf_i+0xbc>
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	6820      	ldr	r0, [r4, #0]
 800991c:	1d19      	adds	r1, r3, #4
 800991e:	6029      	str	r1, [r5, #0]
 8009920:	0601      	lsls	r1, r0, #24
 8009922:	d501      	bpl.n	8009928 <_printf_i+0xec>
 8009924:	681e      	ldr	r6, [r3, #0]
 8009926:	e002      	b.n	800992e <_printf_i+0xf2>
 8009928:	0646      	lsls	r6, r0, #25
 800992a:	d5fb      	bpl.n	8009924 <_printf_i+0xe8>
 800992c:	881e      	ldrh	r6, [r3, #0]
 800992e:	4854      	ldr	r0, [pc, #336]	; (8009a80 <_printf_i+0x244>)
 8009930:	2f6f      	cmp	r7, #111	; 0x6f
 8009932:	bf0c      	ite	eq
 8009934:	2308      	moveq	r3, #8
 8009936:	230a      	movne	r3, #10
 8009938:	2100      	movs	r1, #0
 800993a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800993e:	6865      	ldr	r5, [r4, #4]
 8009940:	60a5      	str	r5, [r4, #8]
 8009942:	2d00      	cmp	r5, #0
 8009944:	bfa2      	ittt	ge
 8009946:	6821      	ldrge	r1, [r4, #0]
 8009948:	f021 0104 	bicge.w	r1, r1, #4
 800994c:	6021      	strge	r1, [r4, #0]
 800994e:	b90e      	cbnz	r6, 8009954 <_printf_i+0x118>
 8009950:	2d00      	cmp	r5, #0
 8009952:	d04d      	beq.n	80099f0 <_printf_i+0x1b4>
 8009954:	4615      	mov	r5, r2
 8009956:	fbb6 f1f3 	udiv	r1, r6, r3
 800995a:	fb03 6711 	mls	r7, r3, r1, r6
 800995e:	5dc7      	ldrb	r7, [r0, r7]
 8009960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009964:	4637      	mov	r7, r6
 8009966:	42bb      	cmp	r3, r7
 8009968:	460e      	mov	r6, r1
 800996a:	d9f4      	bls.n	8009956 <_printf_i+0x11a>
 800996c:	2b08      	cmp	r3, #8
 800996e:	d10b      	bne.n	8009988 <_printf_i+0x14c>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	07de      	lsls	r6, r3, #31
 8009974:	d508      	bpl.n	8009988 <_printf_i+0x14c>
 8009976:	6923      	ldr	r3, [r4, #16]
 8009978:	6861      	ldr	r1, [r4, #4]
 800997a:	4299      	cmp	r1, r3
 800997c:	bfde      	ittt	le
 800997e:	2330      	movle	r3, #48	; 0x30
 8009980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009984:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009988:	1b52      	subs	r2, r2, r5
 800998a:	6122      	str	r2, [r4, #16]
 800998c:	f8cd a000 	str.w	sl, [sp]
 8009990:	464b      	mov	r3, r9
 8009992:	aa03      	add	r2, sp, #12
 8009994:	4621      	mov	r1, r4
 8009996:	4640      	mov	r0, r8
 8009998:	f7ff fee2 	bl	8009760 <_printf_common>
 800999c:	3001      	adds	r0, #1
 800999e:	d14c      	bne.n	8009a3a <_printf_i+0x1fe>
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295
 80099a4:	b004      	add	sp, #16
 80099a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099aa:	4835      	ldr	r0, [pc, #212]	; (8009a80 <_printf_i+0x244>)
 80099ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099b0:	6829      	ldr	r1, [r5, #0]
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80099b8:	6029      	str	r1, [r5, #0]
 80099ba:	061d      	lsls	r5, r3, #24
 80099bc:	d514      	bpl.n	80099e8 <_printf_i+0x1ac>
 80099be:	07df      	lsls	r7, r3, #31
 80099c0:	bf44      	itt	mi
 80099c2:	f043 0320 	orrmi.w	r3, r3, #32
 80099c6:	6023      	strmi	r3, [r4, #0]
 80099c8:	b91e      	cbnz	r6, 80099d2 <_printf_i+0x196>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	f023 0320 	bic.w	r3, r3, #32
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	2310      	movs	r3, #16
 80099d4:	e7b0      	b.n	8009938 <_printf_i+0xfc>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	f043 0320 	orr.w	r3, r3, #32
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	2378      	movs	r3, #120	; 0x78
 80099e0:	4828      	ldr	r0, [pc, #160]	; (8009a84 <_printf_i+0x248>)
 80099e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80099e6:	e7e3      	b.n	80099b0 <_printf_i+0x174>
 80099e8:	0659      	lsls	r1, r3, #25
 80099ea:	bf48      	it	mi
 80099ec:	b2b6      	uxthmi	r6, r6
 80099ee:	e7e6      	b.n	80099be <_printf_i+0x182>
 80099f0:	4615      	mov	r5, r2
 80099f2:	e7bb      	b.n	800996c <_printf_i+0x130>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	6826      	ldr	r6, [r4, #0]
 80099f8:	6961      	ldr	r1, [r4, #20]
 80099fa:	1d18      	adds	r0, r3, #4
 80099fc:	6028      	str	r0, [r5, #0]
 80099fe:	0635      	lsls	r5, r6, #24
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	d501      	bpl.n	8009a08 <_printf_i+0x1cc>
 8009a04:	6019      	str	r1, [r3, #0]
 8009a06:	e002      	b.n	8009a0e <_printf_i+0x1d2>
 8009a08:	0670      	lsls	r0, r6, #25
 8009a0a:	d5fb      	bpl.n	8009a04 <_printf_i+0x1c8>
 8009a0c:	8019      	strh	r1, [r3, #0]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	6123      	str	r3, [r4, #16]
 8009a12:	4615      	mov	r5, r2
 8009a14:	e7ba      	b.n	800998c <_printf_i+0x150>
 8009a16:	682b      	ldr	r3, [r5, #0]
 8009a18:	1d1a      	adds	r2, r3, #4
 8009a1a:	602a      	str	r2, [r5, #0]
 8009a1c:	681d      	ldr	r5, [r3, #0]
 8009a1e:	6862      	ldr	r2, [r4, #4]
 8009a20:	2100      	movs	r1, #0
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7f6 fbd4 	bl	80001d0 <memchr>
 8009a28:	b108      	cbz	r0, 8009a2e <_printf_i+0x1f2>
 8009a2a:	1b40      	subs	r0, r0, r5
 8009a2c:	6060      	str	r0, [r4, #4]
 8009a2e:	6863      	ldr	r3, [r4, #4]
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	2300      	movs	r3, #0
 8009a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a38:	e7a8      	b.n	800998c <_printf_i+0x150>
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	462a      	mov	r2, r5
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	47d0      	blx	sl
 8009a44:	3001      	adds	r0, #1
 8009a46:	d0ab      	beq.n	80099a0 <_printf_i+0x164>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	079b      	lsls	r3, r3, #30
 8009a4c:	d413      	bmi.n	8009a76 <_printf_i+0x23a>
 8009a4e:	68e0      	ldr	r0, [r4, #12]
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	4298      	cmp	r0, r3
 8009a54:	bfb8      	it	lt
 8009a56:	4618      	movlt	r0, r3
 8009a58:	e7a4      	b.n	80099a4 <_printf_i+0x168>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	47d0      	blx	sl
 8009a64:	3001      	adds	r0, #1
 8009a66:	d09b      	beq.n	80099a0 <_printf_i+0x164>
 8009a68:	3501      	adds	r5, #1
 8009a6a:	68e3      	ldr	r3, [r4, #12]
 8009a6c:	9903      	ldr	r1, [sp, #12]
 8009a6e:	1a5b      	subs	r3, r3, r1
 8009a70:	42ab      	cmp	r3, r5
 8009a72:	dcf2      	bgt.n	8009a5a <_printf_i+0x21e>
 8009a74:	e7eb      	b.n	8009a4e <_printf_i+0x212>
 8009a76:	2500      	movs	r5, #0
 8009a78:	f104 0619 	add.w	r6, r4, #25
 8009a7c:	e7f5      	b.n	8009a6a <_printf_i+0x22e>
 8009a7e:	bf00      	nop
 8009a80:	08009d29 	.word	0x08009d29
 8009a84:	08009d3a 	.word	0x08009d3a

08009a88 <_read_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4d07      	ldr	r5, [pc, #28]	; (8009aa8 <_read_r+0x20>)
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	4608      	mov	r0, r1
 8009a90:	4611      	mov	r1, r2
 8009a92:	2200      	movs	r2, #0
 8009a94:	602a      	str	r2, [r5, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	f7f7 fda8 	bl	80015ec <_read>
 8009a9c:	1c43      	adds	r3, r0, #1
 8009a9e:	d102      	bne.n	8009aa6 <_read_r+0x1e>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	b103      	cbz	r3, 8009aa6 <_read_r+0x1e>
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	bd38      	pop	{r3, r4, r5, pc}
 8009aa8:	20002130 	.word	0x20002130

08009aac <_fstat_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_fstat_r+0x20>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	602b      	str	r3, [r5, #0]
 8009aba:	f7f7 fddc 	bl	8001676 <_fstat>
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	d102      	bne.n	8009ac8 <_fstat_r+0x1c>
 8009ac2:	682b      	ldr	r3, [r5, #0]
 8009ac4:	b103      	cbz	r3, 8009ac8 <_fstat_r+0x1c>
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	bd38      	pop	{r3, r4, r5, pc}
 8009aca:	bf00      	nop
 8009acc:	20002130 	.word	0x20002130

08009ad0 <_isatty_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d06      	ldr	r5, [pc, #24]	; (8009aec <_isatty_r+0x1c>)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	f7f7 fddb 	bl	8001696 <_isatty>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_isatty_r+0x1a>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_isatty_r+0x1a>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	20002130 	.word	0x20002130

08009af0 <memmove>:
 8009af0:	4288      	cmp	r0, r1
 8009af2:	b510      	push	{r4, lr}
 8009af4:	eb01 0402 	add.w	r4, r1, r2
 8009af8:	d902      	bls.n	8009b00 <memmove+0x10>
 8009afa:	4284      	cmp	r4, r0
 8009afc:	4623      	mov	r3, r4
 8009afe:	d807      	bhi.n	8009b10 <memmove+0x20>
 8009b00:	1e43      	subs	r3, r0, #1
 8009b02:	42a1      	cmp	r1, r4
 8009b04:	d008      	beq.n	8009b18 <memmove+0x28>
 8009b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b0e:	e7f8      	b.n	8009b02 <memmove+0x12>
 8009b10:	4402      	add	r2, r0
 8009b12:	4601      	mov	r1, r0
 8009b14:	428a      	cmp	r2, r1
 8009b16:	d100      	bne.n	8009b1a <memmove+0x2a>
 8009b18:	bd10      	pop	{r4, pc}
 8009b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b22:	e7f7      	b.n	8009b14 <memmove+0x24>

08009b24 <_realloc_r>:
 8009b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b28:	4680      	mov	r8, r0
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	460e      	mov	r6, r1
 8009b2e:	b921      	cbnz	r1, 8009b3a <_realloc_r+0x16>
 8009b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b34:	4611      	mov	r1, r2
 8009b36:	f7ff b8c7 	b.w	8008cc8 <_malloc_r>
 8009b3a:	b92a      	cbnz	r2, 8009b48 <_realloc_r+0x24>
 8009b3c:	f7ff f858 	bl	8008bf0 <_free_r>
 8009b40:	4625      	mov	r5, r4
 8009b42:	4628      	mov	r0, r5
 8009b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b48:	f000 f81b 	bl	8009b82 <_malloc_usable_size_r>
 8009b4c:	4284      	cmp	r4, r0
 8009b4e:	4607      	mov	r7, r0
 8009b50:	d802      	bhi.n	8009b58 <_realloc_r+0x34>
 8009b52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b56:	d812      	bhi.n	8009b7e <_realloc_r+0x5a>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	f7ff f8b4 	bl	8008cc8 <_malloc_r>
 8009b60:	4605      	mov	r5, r0
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d0ed      	beq.n	8009b42 <_realloc_r+0x1e>
 8009b66:	42bc      	cmp	r4, r7
 8009b68:	4622      	mov	r2, r4
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	bf28      	it	cs
 8009b6e:	463a      	movcs	r2, r7
 8009b70:	f7ff f828 	bl	8008bc4 <memcpy>
 8009b74:	4631      	mov	r1, r6
 8009b76:	4640      	mov	r0, r8
 8009b78:	f7ff f83a 	bl	8008bf0 <_free_r>
 8009b7c:	e7e1      	b.n	8009b42 <_realloc_r+0x1e>
 8009b7e:	4635      	mov	r5, r6
 8009b80:	e7df      	b.n	8009b42 <_realloc_r+0x1e>

08009b82 <_malloc_usable_size_r>:
 8009b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b86:	1f18      	subs	r0, r3, #4
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	bfbc      	itt	lt
 8009b8c:	580b      	ldrlt	r3, [r1, r0]
 8009b8e:	18c0      	addlt	r0, r0, r3
 8009b90:	4770      	bx	lr
	...

08009b94 <_init>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_fini>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr
